[{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://github.com/jeksterslab/cTMed/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://github.com/jeksterslab/cTMed/articles/cTMed.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"cTMed: Continuous Time Mediation","text":"Calculates standard errors confidence intervals effects continuous time mediation models.","code":""},{"path":"https://github.com/jeksterslab/cTMed/articles/cTMed.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"cTMed: Continuous Time Mediation","text":"can install development version cTMed GitHub :","code":"if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/cTMed\")"},{"path":"https://github.com/jeksterslab/cTMed/articles/cTMed.html","id":"documentation","dir":"Articles","previous_headings":"","what":"Documentation","title":"cTMed: Continuous Time Mediation","text":"See GitHub Pages package documentation.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"data-generation-using-the-simssmoufixed-function-from-the-simstatespace-package","dir":"Articles","previous_headings":"","what":"Data Generation Using the SimSSMOUFixed Function from the simStateSpace Package","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"n #> [1] 50 time #> [1] 100 delta_t #> [1] 0.1 mu0 #> [1] 0 0 0 sigma0 #>      [,1] [,2] [,3] #> [1,]  1.0  0.2  0.2 #> [2,]  0.2  1.0  0.2 #> [3,]  0.2  0.2  1.0 sigma0_l # sigma0_l <- t(chol(sigma0)) #>      [,1]      [,2]      [,3] #> [1,]  1.0 0.0000000 0.0000000 #> [2,]  0.2 0.9797959 0.0000000 #> [3,]  0.2 0.1632993 0.9660918 mu #> [1] 0 0 0 phi #>        [,1]   [,2]   [,3] #> [1,] -0.357  0.000  0.000 #> [2,]  0.771 -0.511  0.000 #> [3,] -0.450  0.729 -0.693 sigma #>             [,1]       [,2]        [,3] #> [1,]  0.24455556 0.02201587 -0.05004762 #> [2,]  0.02201587 0.07067800  0.01539456 #> [3,] -0.05004762 0.01539456  0.07553061 sigma_l # sigma_l <- t(chol(sigma)) #>             [,1]      [,2]     [,3] #> [1,]  0.49452559 0.0000000 0.000000 #> [2,]  0.04451917 0.2620993 0.000000 #> [3,] -0.10120330 0.0759256 0.243975 nu #> [1] 0 0 0 lambda #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 theta #>      [,1] [,2] [,3] #> [1,]  0.2  0.0  0.0 #> [2,]  0.0  0.2  0.0 #> [3,]  0.0  0.0  0.2 theta_l # theta_l <- t(chol(theta)) #>           [,1]      [,2]      [,3] #> [1,] 0.4472136 0.0000000 0.0000000 #> [2,] 0.0000000 0.4472136 0.0000000 #> [3,] 0.0000000 0.0000000 0.4472136 library(simStateSpace) sim <- SimSSMOUFixed(   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   type = 0 ) data <- as.data.frame(sim) colnames(data) <- c(\"id\", \"time\", \"x\", \"m\", \"y\") head(data) #>   id time          x          m        y #> 1  1  0.0 -0.3504435 0.41877429 2.611996 #> 2  1  0.1 -0.5920330 1.07433208 1.669272 #> 3  1  0.2 -0.7619855 1.21483834 2.369837 #> 4  1  0.3 -1.6964652 0.21209722 2.128531 #> 5  1  0.4 -1.2282686 0.09950326 1.891140 #> 6  1  0.5  0.1433985 0.66784226 2.036033"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"use dynr package fit continuous-time vector autoregressive model.","code":"library(dynr)"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"prepare-the-data","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Data","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"dynr_data <- dynr.data(   dataframe = data,   id = \"id\",   time = \"time\",   observed = c(\"x\", \"m\", \"y\") )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"prepare-the-initial-condition","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Initial Condition","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"dynr_initial <- prep.initial(   values.inistate = c(     0, 0, 0   ),   params.inistate = c(     \"mu0_1_1\", \"mu0_2_1\", \"mu0_3_1\"   ),   values.inicov = matrix(     data = c(       1.0, 0.2, 0.2,       0.2, 1.0, 0.2,       0.2, 0.2, 1.0     ),     nrow = 3   ),   params.inicov = matrix(     data = c(       \"sigma0_1_1\", \"sigma0_2_1\", \"sigma0_3_1\",       \"sigma0_2_1\", \"sigma0_2_2\", \"sigma0_3_2\",       \"sigma0_3_1\", \"sigma0_3_2\", \"sigma0_3_3\"     ),     nrow = 3   ) )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"prepare-the-measurement-model","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Measurement Model","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"dynr_measurement <- prep.measurement(   values.load = diag(3),   params.load = matrix(     data = \"fixed\",     nrow = 3,     ncol = 3   ),   state.names = c(\"eta_x\", \"eta_m\", \"eta_y\"),   obs.names = c(\"x\", \"m\", \"y\") )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"prepare-the-dynamic-model","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Dynamic Model","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"dynr_dynamics <- prep.formulaDynamics(   formula = list(     eta_x ~ phi_1_1 * eta_x + phi_1_2 * eta_m + phi_1_3 * eta_y,     eta_m ~ phi_2_1 * eta_x + phi_2_2 * eta_m + phi_2_3 * eta_y,     eta_y ~ phi_3_1 * eta_x + phi_3_2 * eta_m + phi_3_3 * eta_y   ),   startval = c(     phi_1_1 = -0.2, phi_2_1 = 0.0, phi_3_1 = 0.0,     phi_1_2 = 0.0, phi_2_2 = -0.2, phi_3_2 = 0.0,     phi_1_3 = 0.0, phi_2_3 = 0.0, phi_3_3 = -0.2   ),   isContinuousTime = TRUE )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"prepare-the-noise-matrices","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Noise Matrices","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"dynr_noise <- prep.noise(   values.latent = matrix(     data = 0.2 * diag(3),     nrow = 3   ),   params.latent = matrix(     data = c(       \"sigma_1_1\", \"sigma_2_1\", \"sigma_3_1\",       \"sigma_2_1\", \"sigma_2_2\", \"sigma_3_2\",       \"sigma_3_1\", \"sigma_3_2\", \"sigma_3_3\"     ),     nrow = 3   ),   values.observed = 0.2 * diag(3),   params.observed = matrix(     data = c(       \"theta_1_1\", \"fixed\", \"fixed\",       \"fixed\", \"theta_2_2\", \"fixed\",       \"fixed\", \"fixed\", \"theta_3_3\"     ),     nrow = 3   ) )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"prepare-the-model","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Model","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"example, increase maximum evaluations optimization process constrain lower upper bounds parameters drift matrix.","code":"dynr_model <- dynr.model(   data = dynr_data,   initial = dynr_initial,   measurement = dynr_measurement,   dynamics = dynr_dynamics,   noise = dynr_noise,   outfile = tempfile(     paste0(       \"src-\",       format(         Sys.time(),         \"%Y-%m-%d-%H-%M-%OS3\"       )     ),     fileext = \".c\"   ) ) dynr_model@options$maxeval <- 100000 lb <- ub <- rep(NA, times = length(dynr_model$xstart)) names(ub) <- names(lb) <- names(dynr_model$xstart) lb[   c(     \"phi_1_1\", \"phi_2_1\", \"phi_3_1\",     \"phi_1_2\", \"phi_2_2\", \"phi_3_2\",     \"phi_1_3\", \"phi_2_3\", \"phi_3_3\"   ) ] <- -1.5 ub[   c(     \"phi_1_1\", \"phi_2_1\", \"phi_3_1\",     \"phi_1_2\", \"phi_2_2\", \"phi_3_2\",     \"phi_1_3\", \"phi_2_3\", \"phi_3_3\"   ) ] <- 1.5 dynr_model$lb <- lb dynr_model$ub <- ub"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"fit-the-model","dir":"Articles","previous_headings":"Model Fitting","what":"Fit the Model","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"fit <- dynr.cook(   dynr_model,   verbose = FALSE ) #> [1] \"Get ready!!!!\" #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> Optimization function called. #> Starting Hessian calculation ... #> Finished Hessian calculation. #> Original exit flag:  3  #> Modified exit flag:  3  #> Optimization terminated successfully: ftol_rel or ftol_abs was reached.  #> Original fitted parameters:  -0.2938068 0.8243958 -0.4543161 -0.07191554  #> -0.5689988 0.707647 0.0257906 0.08266777 -0.6875018 -1.444748 0.07916771  #> -0.2743246 -2.582169 0.1772108 -2.804538 -1.604288 -1.652135 -1.622277  #> -0.06854665 0.08457349 0.1157208 -0.05902915 0.1716259 0.1095353 0.379774  #> -0.08084045 -0.07765934  #>  #> Transformed fitted parameters:  -0.2938068 0.8243958 -0.4543161 -0.07191554  #> -0.5689988 0.707647 0.0257906 0.08266777 -0.6875018 0.2358056 0.01866819  #> -0.06468727 0.07708775 0.008277734 0.08065449 0.2010327 0.1916402 0.1974485  #> -0.06854665 0.08457349 0.1157208 0.9426793 0.1617882 0.1032567 1.489721  #> -0.1004635 0.946144  #>  #> Doing end processing #> Successful trial #> Total Time: 5.501934  #> Backend Time: 5.49238 summary(fit) #> Coefficients: #>              Estimate Std. Error t value   ci.lower   ci.upper Pr(>|t|)     #> phi_1_1    -0.2938068  0.0820046  -3.583 -0.4545328 -0.1330807   0.0002 *** #> phi_2_1     0.8243958  0.0566320  14.557  0.7133991  0.9353925   <2e-16 *** #> phi_3_1    -0.4543161  0.0574999  -7.901 -0.5670137 -0.3416184   <2e-16 *** #> phi_1_2    -0.0719155  0.0683123  -1.053 -0.2058053  0.0619742   0.1463     #> phi_2_2    -0.5689988  0.0482579 -11.791 -0.6635825 -0.4744151   <2e-16 *** #> phi_3_2     0.7076470  0.0485039  14.589  0.6125811  0.8027128   <2e-16 *** #> phi_1_3     0.0257906  0.0622339   0.414 -0.0961855  0.1477667   0.3393     #> phi_2_3     0.0826678  0.0432912   1.910 -0.0021815  0.1675170   0.0281 *   #> phi_3_3    -0.6875018  0.0439895 -15.629 -0.7737196 -0.6012840   <2e-16 *** #> sigma_1_1   0.2358056  0.0226976  10.389  0.1913191  0.2802920   <2e-16 *** #> sigma_2_1   0.0186682  0.0100337   1.861 -0.0009975  0.0383339   0.0314 *   #> sigma_3_1  -0.0646873  0.0107504  -6.017 -0.0857577 -0.0436168   <2e-16 *** #> sigma_2_2   0.0770878  0.0094136   8.189  0.0586374  0.0955381   <2e-16 *** #> sigma_3_2   0.0082777  0.0066195   1.251 -0.0046963  0.0212518   0.1056     #> sigma_3_3   0.0806545  0.0101752   7.927  0.0607115  0.1005975   <2e-16 *** #> theta_1_1   0.2010327  0.0051032  39.394  0.1910306  0.2110348   <2e-16 *** #> theta_2_2   0.1916402  0.0043702  43.851  0.1830748  0.2002057   <2e-16 *** #> theta_3_3   0.1974485  0.0045195  43.688  0.1885905  0.2063066   <2e-16 *** #> mu0_1_1    -0.0685466  0.1417041  -0.484 -0.3462816  0.2091883   0.3143     #> mu0_2_1     0.0845735  0.1744574   0.485 -0.2573568  0.4265038   0.3139     #> mu0_3_1     0.1157208  0.1405318   0.823 -0.1597166  0.3911581   0.2051     #> sigma0_1_1  0.9426793  0.2001859   4.709  0.5503221  1.3350365   <2e-16 *** #> sigma0_2_1  0.1617882  0.1775634   0.911 -0.1862298  0.5098061   0.1811     #> sigma0_3_1  0.1032567  0.1428290   0.723 -0.1766831  0.3831964   0.2349     #> sigma0_2_2  1.4897212  0.3064350   4.861  0.8891197  2.0903227   <2e-16 *** #> sigma0_3_2 -0.1004635  0.1764438  -0.569 -0.4462870  0.2453600   0.2846     #> sigma0_3_3  0.9461440  0.1974849   4.791  0.5590807  1.3332073   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> -2 log-likelihood value at convergence = 21626.57 #> AIC = 21680.57 #> BIC = 21856.53 coefs <- coef(fit) vcovs <- vcov(fit)"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"extract-matrices-from-the-fitted-model-to-use-in-ctmed","dir":"Articles","previous_headings":"Model Fitting","what":"Extract Matrices from the Fitted Model to use in cTMed","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"phi_names <- c(   \"phi_1_1\", \"phi_2_1\", \"phi_3_1\",   \"phi_1_2\", \"phi_2_2\", \"phi_3_2\",   \"phi_1_3\", \"phi_2_3\", \"phi_3_3\" ) sigma_names <- c(   \"sigma_1_1\", \"sigma_2_1\", \"sigma_3_1\",   \"sigma_2_1\", \"sigma_2_2\", \"sigma_3_2\",   \"sigma_3_1\", \"sigma_3_2\", \"sigma_3_3\" ) sigma_vech_names <- c(   \"sigma_1_1\", \"sigma_2_1\", \"sigma_3_1\",   \"sigma_2_2\", \"sigma_3_2\",   \"sigma_3_3\" ) theta_names <- c(   \"phi_1_1\", \"phi_2_1\", \"phi_3_1\",   \"phi_1_2\", \"phi_2_2\", \"phi_3_2\",   \"phi_1_3\", \"phi_2_3\", \"phi_3_3\",   \"sigma_1_1\", \"sigma_2_1\", \"sigma_3_1\",   \"sigma_2_2\", \"sigma_3_2\",   \"sigma_3_3\" ) phi <- matrix(   data = coefs[phi_names],   nrow = 3,   ncol = 3 ) sigma <- matrix(   data = coefs[sigma_names],   nrow = 3,   ncol = 3 ) theta <- coefs[theta_names] vcov_phi_vec <- vcovs[phi_names, phi_names] vcov_sigma_vech <- vcovs[sigma_vech_names, sigma_vech_names] vcov_theta <- vcovs[theta_names, theta_names]"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"estimated-drift-matrix-with-corresponding-sampling-covariance-matrix","dir":"Articles","previous_headings":"Model Fitting > Extract Matrices from the Fitted Model to use in cTMed","what":"Estimated Drift Matrix with Corresponding Sampling Covariance Matrix","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"phi #>            [,1]        [,2]        [,3] #> [1,] -0.2938068 -0.07191554  0.02579060 #> [2,]  0.8243958 -0.56899879  0.08266777 #> [3,] -0.4543161  0.70764697 -0.68750180 vcov_phi_vec #>               phi_1_1       phi_2_1       phi_3_1       phi_1_2       phi_2_2 #> phi_1_1  0.0067247510  3.334401e-04 -1.427365e-03 -0.0048315027 -2.781140e-04 #> phi_2_1  0.0003334401  3.207186e-03 -1.160944e-04 -0.0001311767 -2.396379e-03 #> phi_3_1 -0.0014273654 -1.160944e-04  3.306233e-03  0.0009690095  1.058101e-04 #> phi_1_2 -0.0048315027 -1.311767e-04  9.690095e-04  0.0046665764  1.927798e-04 #> phi_2_2 -0.0002781140 -2.396379e-03  1.058101e-04  0.0001927798  2.328822e-03 #> phi_3_2  0.0010271118  3.666341e-05 -2.433612e-03 -0.0009887664 -8.050796e-05 #> phi_1_3  0.0032991598  4.976013e-05 -6.047423e-04 -0.0033768803 -8.739195e-05 #> phi_2_3  0.0002242026  1.667488e-03 -9.890426e-05 -0.0001916267 -1.709053e-03 #> phi_3_3 -0.0007252163 -6.763331e-06  1.676026e-03  0.0007432086  3.057570e-05 #>               phi_3_2       phi_1_3       phi_2_3       phi_3_3 #> phi_1_1  1.027112e-03  3.299160e-03  2.242026e-04 -7.252163e-04 #> phi_2_1  3.666341e-05  4.976013e-05  1.667488e-03 -6.763331e-06 #> phi_3_1 -2.433612e-03 -6.047423e-04 -9.890426e-05  1.676026e-03 #> phi_1_2 -9.887664e-04 -3.376880e-03 -1.916267e-04  7.432086e-04 #> phi_2_2 -8.050796e-05 -8.739195e-05 -1.709053e-03  3.057570e-05 #> phi_3_2  2.352625e-03  6.636184e-04  1.014057e-04 -1.723398e-03 #> phi_1_3  6.636184e-04  3.873052e-03  1.807258e-04 -8.645868e-04 #> phi_2_3  1.014057e-04  1.807258e-04  1.874130e-03 -9.711251e-05 #> phi_3_3 -1.723398e-03 -8.645868e-04 -9.711251e-05  1.935074e-03"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"process-noise-covariance-matrix-with-corresponding-sampling-covariance-matrix","dir":"Articles","previous_headings":"Model Fitting > Extract Matrices from the Fitted Model to use in cTMed","what":"Process Noise Covariance Matrix with Corresponding Sampling Covariance Matrix","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"sigma #>             [,1]        [,2]         [,3] #> [1,]  0.23580555 0.018668186 -0.064687274 #> [2,]  0.01866819 0.077087751  0.008277734 #> [3,] -0.06468727 0.008277734  0.080654490 vcov_sigma_vech #>               sigma_1_1     sigma_2_1     sigma_3_1     sigma_2_2     sigma_3_2 #> sigma_1_1  5.151809e-04  1.300951e-05 -9.426519e-05  1.267967e-06 -5.237358e-06 #> sigma_2_1  1.300951e-05  1.006750e-04 -3.297983e-06  4.598455e-06 -2.216763e-05 #> sigma_3_1 -9.426519e-05 -3.297983e-06  1.155716e-04 -4.564779e-07  3.331124e-06 #> sigma_2_2  1.267967e-06  4.598455e-06 -4.564779e-07  8.861586e-05 -2.460733e-06 #> sigma_3_2 -5.237358e-06 -2.216763e-05  3.331124e-06 -2.460733e-06  4.381809e-05 #> sigma_3_3  1.929030e-05  1.521518e-06 -4.733325e-05 -1.238551e-07 -2.475766e-06 #>               sigma_3_3 #> sigma_1_1  1.929030e-05 #> sigma_2_1  1.521518e-06 #> sigma_3_1 -4.733325e-05 #> sigma_2_2 -1.238551e-07 #> sigma_3_2 -2.475766e-06 #> sigma_3_3  1.035347e-04"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-dynr.html","id":"estimated-drift-matrix-and-process-noise-covariance-matrix-with-corresponding-sampling-covariance-matrix","dir":"Articles","previous_headings":"Model Fitting > Extract Matrices from the Fitted Model to use in cTMed","what":"Estimated Drift Matrix and Process Noise Covariance Matrix with Corresponding Sampling Covariance Matrix","title":"Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package","text":"","code":"theta #>      phi_1_1      phi_2_1      phi_3_1      phi_1_2      phi_2_2      phi_3_2  #> -0.293806757  0.824395779 -0.454316070 -0.071915543 -0.568998788  0.707646969  #>      phi_1_3      phi_2_3      phi_3_3    sigma_1_1    sigma_2_1    sigma_3_1  #>  0.025790605  0.082667770 -0.687501801  0.235805551  0.018668186 -0.064687274  #>    sigma_2_2    sigma_3_2    sigma_3_3  #>  0.077087751  0.008277734  0.080654490 vcov_theta #>                 phi_1_1       phi_2_1       phi_3_1       phi_1_2       phi_2_2 #> phi_1_1    6.724751e-03  3.334401e-04 -1.427365e-03 -4.831503e-03 -2.781140e-04 #> phi_2_1    3.334401e-04  3.207186e-03 -1.160944e-04 -1.311767e-04 -2.396379e-03 #> phi_3_1   -1.427365e-03 -1.160944e-04  3.306233e-03  9.690095e-04  1.058101e-04 #> phi_1_2   -4.831503e-03 -1.311767e-04  9.690095e-04  4.666576e-03  1.927798e-04 #> phi_2_2   -2.781140e-04 -2.396379e-03  1.058101e-04  1.927798e-04  2.328822e-03 #> phi_3_2    1.027112e-03  3.666341e-05 -2.433612e-03 -9.887664e-04 -8.050796e-05 #> phi_1_3    3.299160e-03  4.976013e-05 -6.047423e-04 -3.376880e-03 -8.739195e-05 #> phi_2_3    2.242026e-04  1.667488e-03 -9.890426e-05 -1.916267e-04 -1.709053e-03 #> phi_3_3   -7.252163e-04 -6.763331e-06  1.676026e-03  7.432086e-04  3.057570e-05 #> sigma_1_1 -1.092537e-03 -1.397793e-04  2.507219e-04  6.151791e-04  8.109672e-05 #> sigma_2_1  9.993127e-05 -2.401283e-04 -3.783337e-05 -1.262283e-04  1.271903e-04 #> sigma_3_1  1.343481e-04  2.923756e-05 -2.733343e-04 -3.607622e-05 -1.029727e-05 #> sigma_2_2 -4.215240e-06  1.126872e-04  1.182182e-05  5.438527e-06 -1.380388e-04 #> sigma_3_2 -4.999399e-06  2.973246e-05  5.315983e-05  1.147415e-05  6.618861e-06 #> sigma_3_3 -2.724559e-05 -1.369809e-05  5.725382e-05  6.594377e-06  5.235267e-06 #>                 phi_3_2       phi_1_3       phi_2_3       phi_3_3     sigma_1_1 #> phi_1_1    1.027112e-03  3.299160e-03  2.242026e-04 -7.252163e-04 -1.092537e-03 #> phi_2_1    3.666341e-05  4.976013e-05  1.667488e-03 -6.763331e-06 -1.397793e-04 #> phi_3_1   -2.433612e-03 -6.047423e-04 -9.890426e-05  1.676026e-03  2.507219e-04 #> phi_1_2   -9.887664e-04 -3.376880e-03 -1.916267e-04  7.432086e-04  6.151791e-04 #> phi_2_2   -8.050796e-05 -8.739195e-05 -1.709053e-03  3.057570e-05  8.109672e-05 #> phi_3_2    2.352625e-03  6.636184e-04  1.014057e-04 -1.723398e-03 -1.428867e-04 #> phi_1_3    6.636184e-04  3.873052e-03  1.807258e-04 -8.645868e-04 -2.886918e-04 #> phi_2_3    1.014057e-04  1.807258e-04  1.874130e-03 -9.711251e-05 -4.114951e-05 #> phi_3_3   -1.723398e-03 -8.645868e-04 -9.711251e-05  1.935074e-03  6.991235e-05 #> sigma_1_1 -1.428867e-04 -2.886918e-04 -4.114951e-05  6.991235e-05  5.151809e-04 #> sigma_2_1  3.918032e-05  7.547975e-05 -5.717899e-05 -2.268938e-05  1.300951e-05 #> sigma_3_1  1.423087e-04 -6.733013e-05 -7.351539e-06 -4.166032e-05 -9.426519e-05 #> sigma_2_2 -1.299085e-05 -2.872326e-06  8.372301e-05  7.965476e-06  1.267967e-06 #> sigma_3_2 -6.380096e-05 -3.960416e-06 -4.347965e-05  3.509239e-05 -5.237358e-06 #> sigma_3_3  1.600695e-05  2.072470e-05  5.891375e-06 -1.016038e-04  1.929030e-05 #>               sigma_2_1     sigma_3_1     sigma_2_2     sigma_3_2     sigma_3_3 #> phi_1_1    9.993127e-05  1.343481e-04 -4.215240e-06 -4.999399e-06 -2.724559e-05 #> phi_2_1   -2.401283e-04  2.923756e-05  1.126872e-04  2.973246e-05 -1.369809e-05 #> phi_3_1   -3.783337e-05 -2.733343e-04  1.182182e-05  5.315983e-05  5.725382e-05 #> phi_1_2   -1.262283e-04 -3.607622e-05  5.438527e-06  1.147415e-05  6.594377e-06 #> phi_2_2    1.271903e-04 -1.029727e-05 -1.380388e-04  6.618861e-06  5.235267e-06 #> phi_3_2    3.918032e-05  1.423087e-04 -1.299085e-05 -6.380096e-05  1.600695e-05 #> phi_1_3    7.547975e-05 -6.733013e-05 -2.872326e-06 -3.960416e-06  2.072470e-05 #> phi_2_3   -5.717899e-05 -7.351539e-06  8.372301e-05 -4.347965e-05  5.891375e-06 #> phi_3_3   -2.268938e-05 -4.166032e-05  7.965476e-06  3.509239e-05 -1.016038e-04 #> sigma_1_1  1.300951e-05 -9.426519e-05  1.267967e-06 -5.237358e-06  1.929030e-05 #> sigma_2_1  1.006750e-04 -3.297983e-06  4.598455e-06 -2.216763e-05  1.521518e-06 #> sigma_3_1 -3.297983e-06  1.155716e-04 -4.564779e-07  3.331124e-06 -4.733325e-05 #> sigma_2_2  4.598455e-06 -4.564779e-07  8.861586e-05 -2.460733e-06 -1.238551e-07 #> sigma_3_2 -2.216763e-05  3.331124e-06 -2.460733e-06  4.381809e-05 -2.475766e-06 #> sigma_3_3  1.521518e-06 -4.733325e-05 -1.238551e-07 -2.475766e-06  1.035347e-04"},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"data-generation-using-the-simssmoufixed-function-from-the-simstatespace-package","dir":"Articles","previous_headings":"","what":"Data Generation Using the SimSSMOUFixed Function from the simStateSpace Package","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"n #> [1] 50 time #> [1] 100 delta_t #> [1] 0.1 mu0 #> [1] 0 0 0 sigma0 #>      [,1] [,2] [,3] #> [1,]  1.0  0.2  0.2 #> [2,]  0.2  1.0  0.2 #> [3,]  0.2  0.2  1.0 sigma0_l # sigma0_l <- t(chol(sigma0)) #>      [,1]      [,2]      [,3] #> [1,]  1.0 0.0000000 0.0000000 #> [2,]  0.2 0.9797959 0.0000000 #> [3,]  0.2 0.1632993 0.9660918 mu #> [1] 0 0 0 phi #>        [,1]   [,2]   [,3] #> [1,] -0.357  0.000  0.000 #> [2,]  0.771 -0.511  0.000 #> [3,] -0.450  0.729 -0.693 sigma #>             [,1]       [,2]        [,3] #> [1,]  0.24455556 0.02201587 -0.05004762 #> [2,]  0.02201587 0.07067800  0.01539456 #> [3,] -0.05004762 0.01539456  0.07553061 sigma_l # sigma_l <- t(chol(sigma)) #>             [,1]      [,2]     [,3] #> [1,]  0.49452559 0.0000000 0.000000 #> [2,]  0.04451917 0.2620993 0.000000 #> [3,] -0.10120330 0.0759256 0.243975 nu #> [1] 0 0 0 lambda #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 theta #>      [,1] [,2] [,3] #> [1,]  0.2  0.0  0.0 #> [2,]  0.0  0.2  0.0 #> [3,]  0.0  0.0  0.2 theta_l # theta_l <- t(chol(theta)) #>           [,1]      [,2]      [,3] #> [1,] 0.4472136 0.0000000 0.0000000 #> [2,] 0.0000000 0.4472136 0.0000000 #> [3,] 0.0000000 0.0000000 0.4472136 library(simStateSpace) sim <- SimSSMOUFixed(   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   type = 0 ) data <- as.data.frame(sim) colnames(data) <- c(\"id\", \"time\", \"x\", \"m\", \"y\") head(data) #>   id time          x          m        y #> 1  1  0.0 -0.3504435 0.41877429 2.611996 #> 2  1  0.1 -0.5920330 1.07433208 1.669272 #> 3  1  0.2 -0.7619855 1.21483834 2.369837 #> 4  1  0.3 -1.6964652 0.21209722 2.128531 #> 5  1  0.4 -1.2282686 0.09950326 1.891140 #> 6  1  0.5  0.1433985 0.66784226 2.036033"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"use OpenMx package fit continuous-time vector autoregressive model.","code":"library(OpenMx)"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"prepare-the-initial-condition","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Initial Condition","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"mu0 <- mxMatrix(   type = \"Full\",   nrow = 3,   ncol = 1,   free = TRUE,   values = matrix(     data = c(       0, 0, 0     ),     nrow = 3,     ncol = 1   ),   labels = matrix(     data = c(       \"mu0_1_1\", \"mu0_2_1\", \"mu0_3_1\"     ),     nrow = 3,     ncol = 1   ),   lbound = NA,   ubound = NA,   byrow = FALSE,   dimnames = list(     c(\"eta_x\", \"eta_m\", \"eta_y\"),     \"mu0\"   ),   name = \"mu0\" ) sigma0 <- mxMatrix(   type = \"Symm\",   nrow = 3,   ncol = 3,   free = TRUE,   values = matrix(     data = c(       1.0, 0.2, 0.2,       0.2, 1.0, 0.2,       0.2, 0.2, 1.0     ),     nrow = 3,     ncol = 3   ),   labels = matrix(     data = c(       \"sigma0_1_1\", \"sigma0_2_1\", \"sigma0_3_1\",       \"sigma0_2_1\", \"sigma0_2_2\", \"sigma0_3_2\",       \"sigma0_3_1\", \"sigma0_3_2\", \"sigma0_3_3\"     ),     nrow = 3,     ncol = 3   ),   lbound = matrix(     data = c(       0, NA, NA,       NA, 0, NA,       NA, NA, 0     ),     nrow = 3,     ncol = 3   ),   ubound = NA,   byrow = FALSE,   dimnames = list(     c(\"eta_x\", \"eta_m\", \"eta_y\"),     c(\"eta_x\", \"eta_m\", \"eta_y\")   ),   name = \"sigma0\" )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"prepare-the-measurement-model","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Measurement Model","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"lambda <- mxMatrix(   type = \"Diag\",   nrow = 3,   ncol = 3,   free = FALSE,   values = 1,   labels = NA,   lbound = NA,   ubound = NA,   byrow = FALSE,   dimnames = list(     c(\"x\", \"m\", \"y\"),     c(\"eta_x\", \"eta_m\", \"eta_y\")   ),   name = \"lambda\" )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"prepare-the-dynamic-model","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Dynamic Model","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"phi <- mxMatrix(   type = \"Full\",   nrow = 3,   ncol = 3,   free = TRUE,   values = matrix(     data = c(       -0.2, 0.0, 0.0,       0.0, -0.2, 0.0,       0.0, 0.0, -0.2     ),     nrow = 3,     ncol = 3   ),   labels = matrix(     data = c(       \"phi_1_1\", \"phi_2_1\", \"phi_3_1\",       \"phi_1_2\", \"phi_2_2\", \"phi_3_2\",       \"phi_1_3\", \"phi_2_3\", \"phi_3_3\"     ),     nrow = 3,     ncol = 3   ),   lbound = -1.5,   ubound = 1.5,   byrow = FALSE,   dimnames = list(     c(\"eta_x\", \"eta_m\", \"eta_y\"),     c(\"eta_x\", \"eta_m\", \"eta_y\")   ),   name = \"phi\" )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"prepare-the-noise-matrices","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Noise Matrices","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"sigma <- mxMatrix(   type = \"Symm\",   nrow = 3,   ncol = 3,   free = TRUE,   values = 0.2 * diag(3),   labels = matrix(     data = c(       \"sigma_1_1\", \"sigma_2_1\", \"sigma_3_1\",       \"sigma_2_1\", \"sigma_2_2\", \"sigma_3_2\",       \"sigma_3_1\", \"sigma_3_2\", \"sigma_3_3\"     ),     nrow = 3,     ncol = 3   ),   lbound = matrix(     data = c(       0, NA, NA,       NA, 0, NA,       NA, NA, 0     ),     nrow = 3,     ncol = 3   ),   ubound = NA,   byrow = FALSE,   dimnames = list(     c(\"eta_x\", \"eta_m\", \"eta_y\"),     c(\"eta_x\", \"eta_m\", \"eta_y\")   ),   name = \"sigma\" ) theta <- mxMatrix(   type = \"Diag\",   nrow = 3,   ncol = 3,   free = TRUE,   values = 0.2 * diag(3),   labels = matrix(     data = c(       \"theta_1_1\", \"fixed\", \"fixed\",       \"fixed\", \"theta_2_2\", \"fixed\",       \"fixed\", \"fixed\", \"theta_3_3\"     ),     nrow = 3,     ncol = 3   ),   lbound = matrix(     data = c(       0, NA, NA,       NA, 0, NA,       NA, NA, 0     ),     nrow = 3,     ncol = 3   ),   ubound = NA,   byrow = FALSE,   dimnames = list(     c(\"x\", \"m\", \"y\"),     c(\"x\", \"m\", \"y\")   ),   name = \"theta\" )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"prepare-miscellaneous-matrices","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare Miscellaneous Matrices","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"time <- mxMatrix(   type = \"Full\",   nrow = 1,   ncol = 1,   free = FALSE,   labels = \"data.time\",   name = \"time\" ) gamma <- mxMatrix(   type = \"Zero\",   nrow = 3,   ncol = 1,   name = \"gamma\" ) kappa <- mxMatrix(   type = \"Zero\",   nrow = 3,   ncol = 1,   name = \"kappa\" ) covariate <- mxMatrix(   type = \"Zero\",   nrow = 1,   ncol = 1,   name = \"covariate\" )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"prepare-the-model","dir":"Articles","previous_headings":"Model Fitting","what":"Prepare the Model","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"parameterization, fit model individuals (id) using multi-group framework, assuming parameters remain fixed across individuals.","code":"model <- mxModel(   model = \"CTVAR\",   phi,   gamma,   lambda,   kappa,   sigma,   theta,   mu0,   sigma0,   covariate,   time,   mxExpectationStateSpaceContinuousTime(     A = \"phi\",     B = \"gamma\",     C = \"lambda\",     D = \"kappa\",     Q = \"sigma\",     R = \"theta\",     x0 = \"mu0\",     P0 = \"sigma0\",     u = \"covariate\",     t = \"time\",     dimnames = c(\"x\", \"m\", \"y\")   ),   mxFitFunctionML(),   mxData(     observed = data,     type = \"raw\"   ) ) ids <- sort(   unique(data[, \"id\"]) ) model_id <- lapply(   X = ids,   FUN = function(i,                  data,                  model) {     return(       mxModel(         name = paste0(\"CTVAR\", \"_\", i),         model = model,         mxData(           observed = data[             which(               data[, \"id\"] == i             ), ,             drop = FALSE           ],           type = \"raw\"         )       )     )   },   data = data,   model = model )"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"fit-the-model","dir":"Articles","previous_headings":"Model Fitting","what":"Fit the Model","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"fit <- mxTryHardctsem(   model = mxModel(     name = \"CTVAR\",     model_id,     mxFitFunctionMultigroup(       paste0(         \"CTVAR\",         \"_\",         ids       )     )   ),   extraTries = 1000 ) #> Running CTVAR with 27 parameters #>  #> Beginning initial fit attempt #> Running CTVAR with 27 parameters #>  #>  Lowest minimum so far:  21626.5696149473 #>  #> Solution found #>  #>  Solution found!  Final fit=21626.57 (started at 22577.553)  (1 attempt(s): 1 valid, 0 errors) #>  Start values from best fit: #> -0.29379097710247,0.824373596871192,-0.454352941158215,-0.0719257338262605,-0.568941561045426,0.707694576680455,0.0257889220918782,0.0826903187980482,-0.687497461423581,0.23016000976406,0.0279936281650791,0.0788922446527097,-0.0678961701647397,0.00451046219167851,0.0843652758341329,0.201040220843954,0.191651067953274,0.197460049245072,-0.0684443090318708,0.084620014481904,0.11577024165373,0.942751957746392,0.161848192692847,1.48976467331756,0.103298443374234,-0.100426749650912,0.946206274665807 summary(fit) #> Summary of CTVAR  #>   #> free parameters: #>          name         matrix   row   col     Estimate   Std.Error A lbound #> 1     phi_1_1    CTVAR_1.phi eta_x eta_x -0.293790977 0.082166191     -1.5 #> 2     phi_2_1    CTVAR_1.phi eta_m eta_x  0.824373597 0.056724536     -1.5 #> 3     phi_3_1    CTVAR_1.phi eta_y eta_x -0.454352941 0.057718856     -1.5 #> 4     phi_1_2    CTVAR_1.phi eta_x eta_m -0.071925734 0.068489344     -1.5 #> 5     phi_2_2    CTVAR_1.phi eta_m eta_m -0.568941561 0.048337545     -1.5 #> 6     phi_3_2    CTVAR_1.phi eta_y eta_m  0.707694577 0.048686321     -1.5 #> 7     phi_1_3    CTVAR_1.phi eta_x eta_y  0.025788922 0.062394707     -1.5 #> 8     phi_2_3    CTVAR_1.phi eta_m eta_y  0.082690319 0.043352142     -1.5 #> 9     phi_3_3    CTVAR_1.phi eta_y eta_y -0.687497461 0.044110977     -1.5 #> 10  sigma_1_1  CTVAR_1.sigma eta_x eta_x  0.230160010 0.022633005        0 #> 11  sigma_2_1  CTVAR_1.sigma eta_x eta_m  0.027993628 0.009999833          #> 12  sigma_2_2  CTVAR_1.sigma eta_m eta_m  0.078892245 0.009570754        0 #> 13  sigma_3_1  CTVAR_1.sigma eta_x eta_y -0.067896170 0.010706969          #> 14  sigma_3_2  CTVAR_1.sigma eta_m eta_y  0.004510462 0.006768996          #> 15  sigma_3_3  CTVAR_1.sigma eta_y eta_y  0.084365276 0.010385774        0 #> 16  theta_1_1  CTVAR_1.theta     x     x  0.201040221 0.005103870        0 #> 17  theta_2_2  CTVAR_1.theta     m     m  0.191651068 0.004371699        0 #> 18  theta_3_3  CTVAR_1.theta     y     y  0.197460049 0.004520320        0 #> 19    mu0_1_1    CTVAR_1.mu0 eta_x   mu0 -0.068444309 0.141891679          #> 20    mu0_2_1    CTVAR_1.mu0 eta_m   mu0  0.084620014 0.175331130          #> 21    mu0_3_1    CTVAR_1.mu0 eta_y   mu0  0.115770242 0.141163223          #> 22 sigma0_1_1 CTVAR_1.sigma0 eta_x eta_x  0.942751958 0.202360338        0 #> 23 sigma0_2_1 CTVAR_1.sigma0 eta_x eta_m  0.161848193 0.178510099          #> 24 sigma0_2_2 CTVAR_1.sigma0 eta_m eta_m  1.489764673 0.309901840        0 #> 25 sigma0_3_1 CTVAR_1.sigma0 eta_x eta_y  0.103298443 0.143316923 !        #> 26 sigma0_3_2 CTVAR_1.sigma0 eta_m eta_y -0.100426750 0.177066649 !        #> 27 sigma0_3_3 CTVAR_1.sigma0 eta_y eta_y  0.946206275 0.201133302 !      0 #>    ubound #> 1     1.5 #> 2     1.5 #> 3     1.5 #> 4     1.5 #> 5     1.5 #> 6     1.5 #> 7     1.5 #> 8     1.5 #> 9     1.5 #> 10        #> 11        #> 12        #> 13        #> 14        #> 15        #> 16        #> 17        #> 18        #> 19        #> 20        #> 21        #> 22        #> 23        #> 24        #> 25        #> 26        #> 27        #>  #> Model Statistics:  #>                |  Parameters  |  Degrees of Freedom  |  Fit (-2lnL units) #>        Model:             27                  14973              21626.57 #>    Saturated:             NA                     NA                    NA #> Independence:             NA                     NA                    NA #> Number of observations/statistics: 5000/15000 #>  #> Information Criteria:  #>       |  df Penalty  |  Parameters Penalty  |  Sample-Size Adjusted #> AIC:       -8319.43               21680.57                 21680.87 #> BIC:     -105901.36               21856.53                 21770.74 #> CFI: NA  #> TLI: 1   (also known as NNFI)  #> RMSEA:  0  [95% CI (NA, NA)] #> Prob(RMSEA <= 0.05): NA #> To get additional fit indices, see help(mxRefModels) #> timestamp: 2025-02-11 06:31:07  #> Wall clock time: 236.0198 secs  #> optimizer:  SLSQP  #> OpenMx version number: 2.21.13  #> Need help?  See help(mxSummary) coefs <- coef(fit) vcovs <- vcov(fit)"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"extract-matrices-from-the-fitted-model-to-use-in-ctmed","dir":"Articles","previous_headings":"Model Fitting","what":"Extract Matrices from the Fitted Model to use in cTMed","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"phi_names <- c(   \"phi_1_1\", \"phi_2_1\", \"phi_3_1\",   \"phi_1_2\", \"phi_2_2\", \"phi_3_2\",   \"phi_1_3\", \"phi_2_3\", \"phi_3_3\" ) sigma_names <- c(   \"sigma_1_1\", \"sigma_2_1\", \"sigma_3_1\",   \"sigma_2_1\", \"sigma_2_2\", \"sigma_3_2\",   \"sigma_3_1\", \"sigma_3_2\", \"sigma_3_3\" ) sigma_vech_names <- c(   \"sigma_1_1\", \"sigma_2_1\", \"sigma_3_1\",   \"sigma_2_2\", \"sigma_3_2\",   \"sigma_3_3\" ) theta_names <- c(   \"phi_1_1\", \"phi_2_1\", \"phi_3_1\",   \"phi_1_2\", \"phi_2_2\", \"phi_3_2\",   \"phi_1_3\", \"phi_2_3\", \"phi_3_3\",   \"sigma_1_1\", \"sigma_2_1\", \"sigma_3_1\",   \"sigma_2_2\", \"sigma_3_2\",   \"sigma_3_3\" ) phi <- matrix(   data = coefs[phi_names],   nrow = 3,   ncol = 3 ) sigma <- matrix(   data = coefs[sigma_names],   nrow = 3,   ncol = 3 ) theta <- coefs[theta_names] vcov_phi_vec <- vcovs[phi_names, phi_names] vcov_sigma_vech <- vcovs[sigma_vech_names, sigma_vech_names] vcov_theta <- vcovs[theta_names, theta_names]"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"estimated-drift-matrix-with-corresponding-sampling-covariance-matrix","dir":"Articles","previous_headings":"Model Fitting > Extract Matrices from the Fitted Model to use in cTMed","what":"Estimated Drift Matrix with Corresponding Sampling Covariance Matrix","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"phi #>            [,1]        [,2]        [,3] #> [1,] -0.2937910 -0.07192573  0.02578892 #> [2,]  0.8243736 -0.56894156  0.08269032 #> [3,] -0.4543529  0.70769458 -0.68749746 vcov_phi_vec #>               phi_1_1       phi_2_1       phi_3_1       phi_1_2       phi_2_2 #> phi_1_1  0.0067512830  3.309225e-04 -0.0014381281 -0.0048573303 -2.760613e-04 #> phi_2_1  0.0003309225  3.217673e-03 -0.0001191910 -0.0001299004 -2.405236e-03 #> phi_3_1 -0.0014381281 -1.191910e-04  0.0033314663  0.0009794905  1.083118e-04 #> phi_1_2 -0.0048573303 -1.299004e-04  0.0009794905  0.0046907902  1.917779e-04 #> phi_2_2 -0.0002760613 -2.405236e-03  0.0001083118  0.0001917779  2.336518e-03 #> phi_3_2  0.0010368200  3.920789e-05 -0.0024546076 -0.0009978418 -8.257311e-05 #> phi_1_3  0.0033229607  4.862890e-05 -0.0006133403 -0.0033986894 -8.625553e-05 #> phi_2_3  0.0002236731  1.674431e-03 -0.0001010005 -0.0001915267 -1.715274e-03 #> phi_3_3 -0.0007334162 -8.023179e-06  0.0016918283  0.0007505617  3.134592e-05 #>               phi_3_2       phi_1_3       phi_2_3       phi_3_3 #> phi_1_1  1.036820e-03  3.322961e-03  2.236731e-04 -7.334162e-04 #> phi_2_1  3.920789e-05  4.862890e-05  1.674431e-03 -8.023179e-06 #> phi_3_1 -2.454608e-03 -6.133403e-04 -1.010005e-04  1.691828e-03 #> phi_1_2 -9.978418e-04 -3.398689e-03 -1.915267e-04  7.505617e-04 #> phi_2_2 -8.257311e-05 -8.625553e-05 -1.715274e-03  3.134592e-05 #> phi_3_2  2.370358e-03  6.709785e-04  1.031267e-04 -1.736972e-03 #> phi_1_3  6.709785e-04  3.893099e-03  1.804313e-04 -8.706979e-04 #> phi_2_3  1.031267e-04  1.804313e-04  1.879408e-03 -9.776183e-05 #> phi_3_3 -1.736972e-03 -8.706979e-04 -9.776183e-05  1.945778e-03"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"process-noise-covariance-matrix-with-corresponding-sampling-covariance-matrix","dir":"Articles","previous_headings":"Model Fitting > Extract Matrices from the Fitted Model to use in cTMed","what":"Process Noise Covariance Matrix with Corresponding Sampling Covariance Matrix","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"sigma #>             [,1]        [,2]         [,3] #> [1,]  0.23016001 0.027993628 -0.067896170 #> [2,]  0.02799363 0.078892245  0.004510462 #> [3,] -0.06789617 0.004510462  0.084365276 vcov_sigma_vech #>               sigma_1_1     sigma_2_1     sigma_3_1     sigma_2_2     sigma_3_2 #> sigma_1_1  5.122529e-04  2.210556e-05 -9.555142e-05  6.993021e-07 -4.525693e-06 #> sigma_2_1  2.210556e-05  9.999665e-05 -7.120332e-06  1.111274e-05 -2.361914e-05 #> sigma_3_1 -9.555142e-05 -7.120332e-06  1.146392e-04 -1.027202e-06  7.394396e-06 #> sigma_2_2  6.993021e-07  1.111274e-05 -1.027202e-06  9.159933e-05 -5.224141e-06 #> sigma_3_2 -4.525693e-06 -2.361914e-05  7.394396e-06 -5.224141e-06  4.581931e-05 #> sigma_3_3  1.719246e-05  3.462719e-06 -4.884374e-05  1.149757e-08 -5.945249e-06 #>               sigma_3_3 #> sigma_1_1  1.719246e-05 #> sigma_2_1  3.462719e-06 #> sigma_3_1 -4.884374e-05 #> sigma_2_2  1.149757e-08 #> sigma_3_2 -5.945249e-06 #> sigma_3_3  1.078643e-04"},{"path":"https://github.com/jeksterslab/cTMed/articles/fit-ct-var-mx.html","id":"estimated-drift-matrix-and-process-noise-covariance-matrix-with-corresponding-sampling-covariance-matrix","dir":"Articles","previous_headings":"Model Fitting > Extract Matrices from the Fitted Model to use in cTMed","what":"Estimated Drift Matrix and Process Noise Covariance Matrix with Corresponding Sampling Covariance Matrix","title":"Fit the Continuous-Time Vector Autoregressive Model Using the OpenMx Package","text":"","code":"theta #>      phi_1_1      phi_2_1      phi_3_1      phi_1_2      phi_2_2      phi_3_2  #> -0.293790977  0.824373597 -0.454352941 -0.071925734 -0.568941561  0.707694577  #>      phi_1_3      phi_2_3      phi_3_3    sigma_1_1    sigma_2_1    sigma_3_1  #>  0.025788922  0.082690319 -0.687497461  0.230160010  0.027993628 -0.067896170  #>    sigma_2_2    sigma_3_2    sigma_3_3  #>  0.078892245  0.004510462  0.084365276 vcov_theta #>                 phi_1_1       phi_2_1       phi_3_1       phi_1_2       phi_2_2 #> phi_1_1    6.751283e-03  3.309225e-04 -1.438128e-03 -4.857330e-03 -2.760613e-04 #> phi_2_1    3.309225e-04  3.217673e-03 -1.191910e-04 -1.299004e-04 -2.405236e-03 #> phi_3_1   -1.438128e-03 -1.191910e-04  3.331466e-03  9.794905e-04  1.083118e-04 #> phi_1_2   -4.857330e-03 -1.299004e-04  9.794905e-04  4.690790e-03  1.917779e-04 #> phi_2_2   -2.760613e-04 -2.405236e-03  1.083118e-04  1.917779e-04  2.336518e-03 #> phi_3_2    1.036820e-03  3.920789e-05 -2.454608e-03 -9.978418e-04 -8.257311e-05 #> phi_1_3    3.322961e-03  4.862890e-05 -6.133403e-04 -3.398689e-03 -8.625553e-05 #> phi_2_3    2.236731e-04  1.674431e-03 -1.010005e-04 -1.915267e-04 -1.715274e-03 #> phi_3_3   -7.334162e-04 -8.023179e-06  1.691828e-03  7.505617e-04  3.134592e-05 #> sigma_1_1 -1.136847e-03 -1.287062e-04  2.706512e-04  6.652561e-04  7.825909e-05 #> sigma_2_1  9.497544e-05 -2.296141e-04 -3.698837e-05 -1.409965e-04  1.216216e-04 #> sigma_3_1  1.232748e-04  1.950668e-05 -2.547148e-04 -1.954526e-05 -4.270096e-06 #> sigma_2_2  1.506877e-05  1.014180e-04  5.251615e-06 -1.691801e-05 -1.366091e-04 #> sigma_3_2 -2.441758e-05  2.731562e-05  5.102487e-05  3.503303e-05  9.128860e-06 #> sigma_3_3 -1.819907e-06 -1.298757e-05  4.432849e-05 -2.036510e-05  5.781343e-06 #>                 phi_3_2       phi_1_3       phi_2_3       phi_3_3     sigma_1_1 #> phi_1_1    1.036820e-03  3.322961e-03  2.236731e-04 -7.334162e-04 -1.136847e-03 #> phi_2_1    3.920789e-05  4.862890e-05  1.674431e-03 -8.023179e-06 -1.287062e-04 #> phi_3_1   -2.454608e-03 -6.133403e-04 -1.010005e-04  1.691828e-03  2.706512e-04 #> phi_1_2   -9.978418e-04 -3.398689e-03 -1.915267e-04  7.505617e-04  6.652561e-04 #> phi_2_2   -8.257311e-05 -8.625553e-05 -1.715274e-03  3.134592e-05  7.825909e-05 #> phi_3_2    2.370358e-03  6.709785e-04  1.031267e-04 -1.736972e-03 -1.637531e-04 #> phi_1_3    6.709785e-04  3.893099e-03  1.804313e-04 -8.706979e-04 -3.382067e-04 #> phi_2_3    1.031267e-04  1.804313e-04  1.879408e-03 -9.776183e-05 -4.355874e-05 #> phi_3_3   -1.736972e-03 -8.706979e-04 -9.776183e-05  1.945778e-03  8.980916e-05 #> sigma_1_1 -1.637531e-04 -3.382067e-04 -4.355874e-05  8.980916e-05  5.122529e-04 #> sigma_2_1  4.521435e-05  9.557236e-05 -5.431899e-05 -3.060797e-05  2.210556e-05 #> sigma_3_1  1.294992e-04 -9.282355e-05 -1.105522e-05 -3.083702e-05 -9.555142e-05 #> sigma_2_2 -5.206801e-06  1.205693e-05  8.854417e-05  3.289020e-06  6.993021e-07 #> sigma_3_2 -6.831112e-05 -2.749640e-05 -4.766928e-05  4.405685e-05 -4.525693e-06 #> sigma_3_3  2.872058e-05  5.375442e-05  4.378105e-06 -1.164000e-04  1.719246e-05 #>               sigma_2_1     sigma_3_1     sigma_2_2     sigma_3_2     sigma_3_3 #> phi_1_1    9.497544e-05  1.232748e-04  1.506877e-05 -2.441758e-05 -1.819907e-06 #> phi_2_1   -2.296141e-04  1.950668e-05  1.014180e-04  2.731562e-05 -1.298757e-05 #> phi_3_1   -3.698837e-05 -2.547148e-04  5.251615e-06  5.102487e-05  4.432849e-05 #> phi_1_2   -1.409965e-04 -1.954526e-05 -1.691801e-05  3.503303e-05 -2.036510e-05 #> phi_2_2    1.216216e-04 -4.270096e-06 -1.366091e-04  9.128860e-06  5.781343e-06 #> phi_3_2    4.521435e-05  1.294992e-04 -5.206801e-06 -6.831112e-05  2.872058e-05 #> phi_1_3    9.557236e-05 -9.282355e-05  1.205693e-05 -2.749640e-05  5.375442e-05 #> phi_2_3   -5.431899e-05 -1.105522e-05  8.854417e-05 -4.766928e-05  4.378105e-06 #> phi_3_3   -3.060797e-05 -3.083702e-05  3.289020e-06  4.405685e-05 -1.164000e-04 #> sigma_1_1  2.210556e-05 -9.555142e-05  6.993021e-07 -4.525693e-06  1.719246e-05 #> sigma_2_1  9.999665e-05 -7.120332e-06  1.111274e-05 -2.361914e-05  3.462719e-06 #> sigma_3_1 -7.120332e-06  1.146392e-04 -1.027202e-06  7.394396e-06 -4.884374e-05 #> sigma_2_2  1.111274e-05 -1.027202e-06  9.159933e-05 -5.224141e-06  1.149757e-08 #> sigma_3_2 -2.361914e-05  7.394396e-06 -5.224141e-06  4.581931e-05 -5.945249e-06 #> sigma_3_3  3.462719e-06 -4.884374e-05  1.149757e-08 -5.945249e-06  1.078643e-04"},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/articles/med-boot.html","id":"bootstrap-method","dir":"Articles","previous_headings":"","what":"Bootstrap Method","title":"Total, Direct, and Indirect Effects in Continuous-Time Mediation Model (Bootstrap)","text":"following generates bootstrap confidence intervals standardized effects.","code":"library(cTMed) boot <- BootMed(   phi = phi,   phi_hat = phi_hat,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\",   ncores = parallel::detectCores() # use multiple cores ) plot(boot) plot(boot, type = \"bc\") boot <- BootMedStd(   phi = phi,   sigma = sigma,   phi_hat = phi_hat,   sigma_hat = sigma_hat,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\",   ncores = parallel::detectCores() # use multiple cores ) plot(boot) plot(boot, type = \"bc\")"},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/articles/med-std.html","id":"delta-method","dir":"Articles","previous_headings":"","what":"Delta Method","title":"Standardized Total, Direct, and Indirect Effects in Continuous-Time Mediation Model","text":"","code":"library(cTMed) delta <- DeltaMedStd(   phi = phi,   sigma = sigma,   vcov_theta = vcov_theta,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\",   ncores = parallel::detectCores() # use multiple cores ) plot(delta)"},{"path":"https://github.com/jeksterslab/cTMed/articles/med-std.html","id":"monte-carlo-method","dir":"Articles","previous_headings":"","what":"Monte Carlo Method","title":"Standardized Total, Direct, and Indirect Effects in Continuous-Time Mediation Model","text":"","code":"mc <- MCMedStd(   phi = phi,   sigma = sigma,   vcov_theta = vcov_theta,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\",   R = 20000L,   ncores = parallel::detectCores() # use multiple cores ) plot(mc)"},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/articles/med.html","id":"delta-method","dir":"Articles","previous_headings":"","what":"Delta Method","title":"Total, Direct, and Indirect Effects in Continuous-Time Mediation Model","text":"","code":"library(cTMed) delta <- DeltaMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\",   ncores = parallel::detectCores() # use multiple cores ) plot(delta)"},{"path":"https://github.com/jeksterslab/cTMed/articles/med.html","id":"monte-carlo-method","dir":"Articles","previous_headings":"","what":"Monte Carlo Method","title":"Total, Direct, and Indirect Effects in Continuous-Time Mediation Model","text":"","code":"mc <- MCMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\",   R = 20000L,   ncores = parallel::detectCores() # use multiple cores ) plot(mc)"},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/articles/session.html","id":"session","dir":"Articles","previous_headings":"","what":"Session","title":"cTMed: Session","text":"","code":"sessionInfo() #> R version 4.4.2 (2024-10-31) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] cTMed_1.0.5.9000          bootStateSpace_1.0.1.9000 #> [3] OpenMx_2.21.13            dynr_0.1.16-109           #> [5] ggplot2_3.5.1             simStateSpace_1.2.8.9000  #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6        shape_1.4.6.1       xfun_0.50           #>  [4] ks_1.14.3           lattice_0.22-6      numDeriv_2016.8-1.1 #>  [7] bitops_1.0-9        vctrs_0.6.5         tools_4.4.2         #> [10] Rdpack_2.6.2        generics_0.1.3      parallel_4.4.2      #> [13] tibble_3.2.1        cluster_2.1.6       pan_1.9             #> [16] pkgconfig_2.0.3     fds_1.8             jomo_2.7-6          #> [19] Matrix_1.7-1        KernSmooth_2.23-24  RcppParallel_5.1.10 #> [22] lifecycle_1.0.4     compiler_4.4.2      stringr_1.5.1       #> [25] munsell_0.5.1       codetools_0.2-20    carData_3.0-5       #> [28] rainbow_3.8         RCurl_1.98-1.16     glmnet_4.1-8        #> [31] Formula_1.2-5       pracma_2.4.4        mice_3.17.0         #> [34] car_3.1-3           pillar_1.10.1       nloptr_2.1.1        #> [37] tidyr_1.3.1         MASS_7.3-61         reformulas_0.4.0    #> [40] iterators_1.0.14    abind_1.4-8         rpart_4.1.23        #> [43] boot_1.3-31         rProject_0.0.18     mclust_6.1.1        #> [46] foreach_1.5.2       mitml_0.4-5         nlme_3.1-166        #> [49] digest_0.6.37       tidyselect_1.2.1    mvtnorm_1.3-3       #> [52] stringi_1.8.4       dplyr_1.1.4         reshape2_1.4.4      #> [55] purrr_1.0.4         splines_4.4.2       pcaPP_2.0-5         #> [58] latex2exp_0.9.6     grid_4.4.2          colorspace_2.1-1    #> [61] expm_1.0-0          cli_3.6.3.9002      magrittr_2.0.3      #> [64] survival_3.7-0      broom_1.0.7         withr_3.0.2         #> [67] scales_1.3.0        backports_1.5.0     nnet_7.3-19         #> [70] lme4_1.1-36         deSolve_1.40        evaluate_1.0.3      #> [73] knitr_1.49          rbibutils_2.3       rlang_1.1.5         #> [76] Rcpp_1.0.14         hdrcde_3.4          xtable_1.8-4        #> [79] glue_1.8.0          fda_6.2.0           minqa_1.2.8         #> [82] R6_2.5.1            plyr_1.8.9"},{"path":"https://github.com/jeksterslab/cTMed/articles/session.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"cTMed: Session","text":"","code":"installed.packages()[, c(\"Package\", \"Version\")] #>                   Package             Version       #> cTMed             \"cTMed\"             \"1.0.5.9000\"  #> simStateSpace     \"simStateSpace\"     \"1.2.8.9000\"  #> abind             \"abind\"             \"1.4-8\"       #> Amelia            \"Amelia\"            \"1.8.3\"       #> arm               \"arm\"               \"1.14-4\"      #> arrow             \"arrow\"             \"18.1.0.1\"    #> ash               \"ash\"               \"1.0-15\"      #> AsioHeaders       \"AsioHeaders\"       \"1.22.1-2\"    #> askpass           \"askpass\"           \"1.2.1\"       #> assertthat        \"assertthat\"        \"0.2.1\"       #> backports         \"backports\"         \"1.5.0\"       #> base64enc         \"base64enc\"         \"0.1-3\"       #> betaDelta         \"betaDelta\"         \"1.0.6\"       #> betaMC            \"betaMC\"            \"1.3.3\"       #> betaNB            \"betaNB\"            \"1.0.5.9000\"  #> betaSandwich      \"betaSandwich\"      \"1.0.8\"       #> BH                \"BH\"                \"1.87.0-1\"    #> bibtex            \"bibtex\"            \"0.5.1\"       #> BiocManager       \"BiocManager\"       \"1.30.25\"     #> bit               \"bit\"               \"4.5.0.1\"     #> bit64             \"bit64\"             \"4.6.0-1\"     #> bitops            \"bitops\"            \"1.0-9\"       #> blob              \"blob\"              \"1.2.4\"       #> bootStateSpace    \"bootStateSpace\"    \"1.0.1.9000\"  #> brew              \"brew\"              \"1.0-10\"      #> brio              \"brio\"              \"1.1.5\"       #> broom             \"broom\"             \"1.0.7\"       #> bslib             \"bslib\"             \"0.9.0\"       #> cachem            \"cachem\"            \"1.1.0\"       #> callr             \"callr\"             \"3.7.6\"       #> car               \"car\"               \"3.1-3\"       #> caracas           \"caracas\"           \"2.1.1\"       #> carData           \"carData\"           \"3.0-5\"       #> cellranger        \"cellranger\"        \"1.1.0\"       #> cffr              \"cffr\"              \"1.2.0\"       #> checkmate         \"checkmate\"         \"2.3.2\"       #> cli               \"cli\"               \"3.6.3.9002\"  #> clipr             \"clipr\"             \"0.8.0\"       #> clock             \"clock\"             \"0.7.2\"       #> clusterGeneration \"clusterGeneration\" \"1.3.8\"       #> coda              \"coda\"              \"0.19-4.1\"    #> cOde              \"cOde\"              \"1.1.1\"       #> collections       \"collections\"       \"0.3.7\"       #> colorspace        \"colorspace\"        \"2.1-1\"       #> commonmark        \"commonmark\"        \"1.9.2\"       #> conflicted        \"conflicted\"        \"1.2.0\"       #> corpcor           \"corpcor\"           \"1.6.10\"      #> covr              \"covr\"              \"3.6.4\"       #> cowplot           \"cowplot\"           \"1.1.3\"       #> cpp11             \"cpp11\"             \"0.5.1\"       #> crayon            \"crayon\"            \"1.5.3\"       #> credentials       \"credentials\"       \"2.0.2\"       #> crosstalk         \"crosstalk\"         \"1.2.1\"       #> cTMed             \"cTMed\"             \"1.0.5.9000\"  #> ctsem             \"ctsem\"             \"3.10.2\"      #> curl              \"curl\"              \"6.2.0\"       #> cyclocomp         \"cyclocomp\"         \"1.1.1\"       #> data.table        \"data.table\"        \"1.16.4\"      #> DBI               \"DBI\"               \"1.2.3\"       #> dbplyr            \"dbplyr\"            \"2.5.0\"       #> Deriv             \"Deriv\"             \"4.1.6\"       #> desc              \"desc\"              \"1.4.3\"       #> deSolve           \"deSolve\"           \"1.40\"        #> devtools          \"devtools\"          \"2.4.5.9000\"  #> diagram           \"diagram\"           \"1.6.5\"       #> dials             \"dials\"             \"1.3.0\"       #> DiceDesign        \"DiceDesign\"        \"1.10\"        #> diffobj           \"diffobj\"           \"0.3.5\"       #> digest            \"digest\"            \"0.6.37\"      #> distributional    \"distributional\"    \"0.5.0\"       #> distro            \"distro\"            \"0.1.0\"       #> doBy              \"doBy\"              \"4.6.25\"      #> docopt            \"docopt\"            \"0.7.1\"       #> doFuture          \"doFuture\"          \"1.0.1\"       #> downlit           \"downlit\"           \"0.4.4\"       #> dplyr             \"dplyr\"             \"1.1.4\"       #> DT                \"DT\"                \"0.33\"        #> dtplyr            \"dtplyr\"            \"1.3.1\"       #> duckdb            \"duckdb\"            \"1.1.3-2\"     #> dynr              \"dynr\"              \"0.1.16-109\"  #> dynUtils          \"dynUtils\"          \"0.9.1\"       #> ellipse           \"ellipse\"           \"0.5.0\"       #> ellipsis          \"ellipsis\"          \"0.3.2\"       #> evaluate          \"evaluate\"          \"1.0.3\"       #> expm              \"expm\"              \"1.0-0\"       #> fansi             \"fansi\"             \"1.0.6\"       #> farver            \"farver\"            \"2.1.2\"       #> fastDummies       \"fastDummies\"       \"1.7.5\"       #> fastmap           \"fastmap\"           \"1.2.0\"       #> fclust            \"fclust\"            \"2.1.1.1\"     #> fda               \"fda\"               \"6.2.0\"       #> fdrtool           \"fdrtool\"           \"1.2.18\"      #> fds               \"fds\"               \"1.8\"         #> fitCTVARMx        \"fitCTVARMx\"        \"0.0.0.9000\"  #> fitDTVARMx        \"fitDTVARMx\"        \"0.0.0.9000\"  #> FNN               \"FNN\"               \"1.1.4.1\"     #> fontawesome       \"fontawesome\"       \"0.5.3\"       #> forcats           \"forcats\"           \"1.0.0\"       #> foreach           \"foreach\"           \"1.5.2\"       #> Formula           \"Formula\"           \"1.2-5\"       #> fs                \"fs\"                \"1.6.5\"       #> fst               \"fst\"               \"0.9.8\"       #> fstcore           \"fstcore\"           \"0.9.18\"      #> furrr             \"furrr\"             \"0.3.1\"       #> future            \"future\"            \"1.34.0\"      #> future.apply      \"future.apply\"      \"1.11.3\"      #> gargle            \"gargle\"            \"1.5.2\"       #> generics          \"generics\"          \"0.1.3\"       #> gert              \"gert\"              \"2.1.4\"       #> ggplot2           \"ggplot2\"           \"3.5.1\"       #> ggrepel           \"ggrepel\"           \"0.9.6\"       #> gh                \"gh\"                \"1.4.1\"       #> gitcreds          \"gitcreds\"          \"0.1.2\"       #> glasso            \"glasso\"            \"1.11\"        #> glmnet            \"glmnet\"            \"4.1-8\"       #> globals           \"globals\"           \"0.16.3\"      #> glue              \"glue\"              \"1.8.0\"       #> googledrive       \"googledrive\"       \"2.1.1\"       #> googlesheets4     \"googlesheets4\"     \"1.1.1\"       #> gower             \"gower\"             \"1.0.2\"       #> GPArotation       \"GPArotation\"       \"2024.3-1\"    #> GPfit             \"GPfit\"             \"1.0-8\"       #> graphicalVAR      \"graphicalVAR\"      \"0.3.4\"       #> gridExtra         \"gridExtra\"         \"2.3\"         #> gsubfn            \"gsubfn\"            \"0.7\"         #> gtable            \"gtable\"            \"0.3.6\"       #> gtools            \"gtools\"            \"3.9.5\"       #> hardhat           \"hardhat\"           \"1.4.1\"       #> haven             \"haven\"             \"2.5.4\"       #> hdrcde            \"hdrcde\"            \"3.4\"         #> here              \"here\"              \"1.0.1\"       #> highr             \"highr\"             \"0.11\"        #> Hmisc             \"Hmisc\"             \"5.2-2\"       #> hms               \"hms\"               \"1.1.3\"       #> htmlTable         \"htmlTable\"         \"2.4.3\"       #> htmltools         \"htmltools\"         \"0.5.8.1\"     #> htmlwidgets       \"htmlwidgets\"       \"1.6.4\"       #> httpgd            \"httpgd\"            \"2.0.2\"       #> httpuv            \"httpuv\"            \"1.6.15\"      #> httr              \"httr\"              \"1.4.7\"       #> httr2             \"httr2\"             \"1.1.0\"       #> ids               \"ids\"               \"1.0.1\"       #> ifaTools          \"ifaTools\"          \"0.23\"        #> igraph            \"igraph\"            \"2.1.4\"       #> infer             \"infer\"             \"1.0.7\"       #> ini               \"ini\"               \"0.3.1\"       #> inline            \"inline\"            \"0.3.21\"      #> ipred             \"ipred\"             \"0.9-15\"      #> isoband           \"isoband\"           \"0.2.7\"       #> iterators         \"iterators\"         \"1.0.14\"      #> jomo              \"jomo\"              \"2.7-6\"       #> jpeg              \"jpeg\"              \"0.1-10\"      #> jquerylib         \"jquerylib\"         \"0.1.4\"       #> jsonlite          \"jsonlite\"          \"1.8.9\"       #> jsonvalidate      \"jsonvalidate\"      \"1.5.0\"       #> kernlab           \"kernlab\"           \"0.9-33\"      #> knitr             \"knitr\"             \"1.49\"        #> ks                \"ks\"                \"1.14.3\"      #> labeling          \"labeling\"          \"0.4.3\"       #> Lahman            \"Lahman\"            \"12.0-0\"      #> languageserver    \"languageserver\"    \"0.3.16\"      #> later             \"later\"             \"1.4.1\"       #> latex2exp         \"latex2exp\"         \"0.9.6\"       #> lava              \"lava\"              \"1.8.1\"       #> lavaan            \"lavaan\"            \"0.6-19\"      #> lazyeval          \"lazyeval\"          \"0.2.2\"       #> lhs               \"lhs\"               \"1.2.0\"       #> lifecycle         \"lifecycle\"         \"1.0.4\"       #> lintr             \"lintr\"             \"3.1.2\"       #> listenv           \"listenv\"           \"0.9.1\"       #> littler           \"littler\"           \"0.3.20\"      #> lme4              \"lme4\"              \"1.1-36\"      #> locfit            \"locfit\"            \"1.5-9.11\"    #> longMI            \"longMI\"            \"1.0.0\"       #> loo               \"loo\"               \"2.8.0\"       #> lubridate         \"lubridate\"         \"1.9.4\"       #> magick            \"magick\"            \"2.8.5\"       #> magrittr          \"magrittr\"          \"2.0.3\"       #> markdown          \"markdown\"          \"1.13\"        #> MatrixModels      \"MatrixModels\"      \"0.5-3\"       #> matrixStats       \"matrixStats\"       \"1.5.0\"       #> mclust            \"mclust\"            \"6.1.1\"       #> memoise           \"memoise\"           \"2.0.1\"       #> metaSEM           \"metaSEM\"           \"1.5.0\"       #> metaVAR           \"metaVAR\"           \"0.0.0.9000\"  #> mice              \"mice\"              \"3.17.0\"      #> microbenchmark    \"microbenchmark\"    \"1.5.0\"       #> mime              \"mime\"              \"0.12\"        #> miniUI            \"miniUI\"            \"0.1.1.1\"     #> minqa             \"minqa\"             \"1.2.8\"       #> mitml             \"mitml\"             \"0.4-5\"       #> mize              \"mize\"              \"0.2.4\"       #> mlVAR             \"mlVAR\"             \"0.5.2\"       #> mnormt            \"mnormt\"            \"2.1.1\"       #> modeldata         \"modeldata\"         \"1.4.0\"       #> modelenv          \"modelenv\"          \"0.2.0\"       #> modelr            \"modelr\"            \"0.1.11\"      #> MplusAutomation   \"MplusAutomation\"   \"1.1.1\"       #> multicool         \"multicool\"         \"1.0.1\"       #> munsell           \"munsell\"           \"0.5.1\"       #> mvtnorm           \"mvtnorm\"           \"1.3-3\"       #> nloptr            \"nloptr\"            \"2.1.1\"       #> numDeriv          \"numDeriv\"          \"2016.8-1.1\"  #> nycflights13      \"nycflights13\"      \"1.0.2\"       #> OpenMx            \"OpenMx\"            \"2.21.13\"     #> openssl           \"openssl\"           \"2.3.2\"       #> ordinal           \"ordinal\"           \"2023.12-4.1\" #> pan               \"pan\"               \"1.9\"         #> pander            \"pander\"            \"0.6.5\"       #> parallelly        \"parallelly\"        \"1.42.0\"      #> parsnip           \"parsnip\"           \"1.2.1\"       #> patchwork         \"patchwork\"         \"1.3.0\"       #> pbapply           \"pbapply\"           \"1.7-2\"       #> pbivnorm          \"pbivnorm\"          \"0.6.0\"       #> pbkrtest          \"pbkrtest\"          \"0.5.3\"       #> pcaPP             \"pcaPP\"             \"2.0-5\"       #> pdftools          \"pdftools\"          \"3.4.1\"       #> pillar            \"pillar\"            \"1.10.1\"      #> pkgbuild          \"pkgbuild\"          \"1.4.6\"       #> pkgconfig         \"pkgconfig\"         \"2.0.3\"       #> pkgdown           \"pkgdown\"           \"2.1.1\"       #> pkgload           \"pkgload\"           \"1.4.0\"       #> plogr             \"plogr\"             \"0.2.0\"       #> plyr              \"plyr\"              \"1.8.9\"       #> png               \"png\"               \"0.1-8\"       #> posterior         \"posterior\"         \"1.6.0\"       #> pracma            \"pracma\"            \"2.4.4\"       #> praise            \"praise\"            \"1.0.0\"       #> prettyunits       \"prettyunits\"       \"1.2.0\"       #> printr            \"printr\"            \"0.3\"         #> processx          \"processx\"          \"3.8.5\"       #> prodlim           \"prodlim\"           \"2024.06.25\"  #> profvis           \"profvis\"           \"0.4.0\"       #> progress          \"progress\"          \"1.2.3\"       #> progressr         \"progressr\"         \"0.15.1\"      #> promises          \"promises\"          \"1.3.2\"       #> proto             \"proto\"             \"1.0.0\"       #> ps                \"ps\"                \"1.8.1\"       #> psych             \"psych\"             \"2.4.12\"      #> purrr             \"purrr\"             \"1.0.4\"       #> qgraph            \"qgraph\"            \"1.9.8\"       #> qpdf              \"qpdf\"              \"1.3.4\"       #> quadprog          \"quadprog\"          \"1.5-8\"       #> quantreg          \"quantreg\"          \"6.00\"        #> quarto            \"quarto\"            \"1.4.4\"       #> QuickJSR          \"QuickJSR\"          \"1.5.1\"       #> R.cache           \"R.cache\"           \"0.16.0\"      #> R.methodsS3       \"R.methodsS3\"       \"1.8.2\"       #> R.oo              \"R.oo\"              \"1.27.0\"      #> R.utils           \"R.utils\"           \"2.12.3\"      #> R6                \"R6\"                \"2.5.1\"       #> ragg              \"ragg\"              \"1.3.3\"       #> rainbow           \"rainbow\"           \"3.8\"         #> rappdirs          \"rappdirs\"          \"0.3.3\"       #> rbibutils         \"rbibutils\"         \"2.3\"         #> rcmdcheck         \"rcmdcheck\"         \"1.4.0\"       #> RColorBrewer      \"RColorBrewer\"      \"1.1-3\"       #> Rcpp              \"Rcpp\"              \"1.0.14\"      #> RcppArmadillo     \"RcppArmadillo\"     \"14.2.3-1\"    #> RcppEigen         \"RcppEigen\"         \"0.3.4.0.2\"   #> RcppGSL           \"RcppGSL\"           \"0.3.13\"      #> RcppParallel      \"RcppParallel\"      \"5.1.10\"      #> RcppTOML          \"RcppTOML\"          \"0.2.2\"       #> RCurl             \"RCurl\"             \"1.98-1.16\"   #> Rdpack            \"Rdpack\"            \"2.6.2\"       #> readr             \"readr\"             \"2.1.5\"       #> readxl            \"readxl\"            \"1.4.3\"       #> recipes           \"recipes\"           \"1.1.0\"       #> RefManageR        \"RefManageR\"        \"1.4.0\"       #> reformulas        \"reformulas\"        \"0.4.0\"       #> rematch           \"rematch\"           \"2.0.0\"       #> rematch2          \"rematch2\"          \"2.1.2\"       #> remotes           \"remotes\"           \"2.5.0\"       #> reprex            \"reprex\"            \"2.1.1\"       #> reshape2          \"reshape2\"          \"1.4.4\"       #> reticulate        \"reticulate\"        \"1.40.0\"      #> rex               \"rex\"               \"1.2.1\"       #> rhub              \"rhub\"              \"2.0.0\"       #> rjags             \"rjags\"             \"4-16\"        #> rlang             \"rlang\"             \"1.1.5\"       #> RMariaDB          \"RMariaDB\"          \"1.3.3\"       #> rmarkdown         \"rmarkdown\"         \"2.29\"        #> roxygen2          \"roxygen2\"          \"7.3.2\"       #> rpf               \"rpf\"               \"1.0.14\"      #> RPostgres         \"RPostgres\"         \"1.4.7\"       #> rProject          \"rProject\"          \"0.0.18\"      #> rprojroot         \"rprojroot\"         \"2.0.4\"       #> rsample           \"rsample\"           \"1.2.1\"       #> RSQLite           \"RSQLite\"           \"2.3.9\"       #> rstan             \"rstan\"             \"2.32.6\"      #> rstantools        \"rstantools\"        \"2.4.0\"       #> rstudioapi        \"rstudioapi\"        \"0.17.1\"      #> rversions         \"rversions\"         \"2.1.2\"       #> rvest             \"rvest\"             \"1.0.4\"       #> Ryacas            \"Ryacas\"            \"1.1.5\"       #> sass              \"sass\"              \"0.4.9\"       #> scales            \"scales\"            \"1.3.0\"       #> selectr           \"selectr\"           \"0.4-2\"       #> semlbci           \"semlbci\"           \"0.11.3\"      #> semmcci           \"semmcci\"           \"1.1.5\"       #> sessioninfo       \"sessioninfo\"       \"1.2.3\"       #> sfd               \"sfd\"               \"0.1.0\"       #> shape             \"shape\"             \"1.4.6.1\"     #> shiny             \"shiny\"             \"1.10.0\"      #> simStateSpace     \"simStateSpace\"     \"1.2.8.9000\"  #> slider            \"slider\"            \"0.3.2\"       #> snow              \"snow\"              \"0.4-4\"       #> snowfall          \"snowfall\"          \"1.84-6.3\"    #> sourcetools       \"sourcetools\"       \"0.1.7-1\"     #> SparseM           \"SparseM\"           \"1.84-2\"      #> sparsevctrs       \"sparsevctrs\"       \"0.2.0\"       #> SQUAREM           \"SQUAREM\"           \"2021.1\"      #> StanHeaders       \"StanHeaders\"       \"2.32.10\"     #> statmod           \"statmod\"           \"1.5.0\"       #> stringi           \"stringi\"           \"1.8.4\"       #> stringr           \"stringr\"           \"1.5.1\"       #> styler            \"styler\"            \"1.10.3\"      #> symSEM            \"symSEM\"            \"0.4\"         #> sys               \"sys\"               \"3.4.3\"       #> systemfonts       \"systemfonts\"       \"1.2.1\"       #> tensorA           \"tensorA\"           \"0.36.2.1\"    #> testthat          \"testthat\"          \"3.2.3\"       #> texreg            \"texreg\"            \"1.39.4\"      #> textshaping       \"textshaping\"       \"1.0.0\"       #> tibble            \"tibble\"            \"3.2.1\"       #> tidymodels        \"tidymodels\"        \"1.2.0\"       #> tidyr             \"tidyr\"             \"1.3.1\"       #> tidyselect        \"tidyselect\"        \"1.2.1\"       #> tidyverse         \"tidyverse\"         \"2.0.0\"       #> timechange        \"timechange\"        \"0.3.0\"       #> timeDate          \"timeDate\"          \"4041.110\"    #> tinytex           \"tinytex\"           \"0.54.2\"      #> tune              \"tune\"              \"1.2.1\"       #> tzdb              \"tzdb\"              \"0.4.0\"       #> ucminf            \"ucminf\"            \"1.2.2\"       #> unigd             \"unigd\"             \"0.1.2\"       #> urlchecker        \"urlchecker\"        \"1.0.1\"       #> usethis           \"usethis\"           \"3.1.0\"       #> utf8              \"utf8\"              \"1.2.4\"       #> uuid              \"uuid\"              \"1.2-1\"       #> V8                \"V8\"                \"6.0.1\"       #> vctrs             \"vctrs\"             \"0.6.5\"       #> viridis           \"viridis\"           \"0.6.5\"       #> viridisLite       \"viridisLite\"       \"0.4.2\"       #> vroom             \"vroom\"             \"1.6.5\"       #> waldo             \"waldo\"             \"0.6.1\"       #> warp              \"warp\"              \"0.2.1\"       #> whisker           \"whisker\"           \"0.4.1\"       #> whoami            \"whoami\"            \"1.3.0\"       #> withr             \"withr\"             \"3.0.2\"       #> workflows         \"workflows\"         \"1.1.4\"       #> workflowsets      \"workflowsets\"      \"1.1.0\"       #> xfun              \"xfun\"              \"0.50\"        #> xml2              \"xml2\"              \"1.3.6\"       #> xmlparsedata      \"xmlparsedata\"      \"1.0.5\"       #> xopen             \"xopen\"             \"1.0.1\"       #> xtable            \"xtable\"            \"1.8-4\"       #> yaml              \"yaml\"              \"2.3.10\"      #> yardstick         \"yardstick\"         \"1.3.2\"       #> zip               \"zip\"               \"2.3.2\"       #> base              \"base\"              \"4.4.2\"       #> boot              \"boot\"              \"1.3-31\"      #> class             \"class\"             \"7.3-22\"      #> cluster           \"cluster\"           \"2.1.6\"       #> codetools         \"codetools\"         \"0.2-20\"      #> compiler          \"compiler\"          \"4.4.2\"       #> datasets          \"datasets\"          \"4.4.2\"       #> foreign           \"foreign\"           \"0.8-87\"      #> graphics          \"graphics\"          \"4.4.2\"       #> grDevices         \"grDevices\"         \"4.4.2\"       #> grid              \"grid\"              \"4.4.2\"       #> KernSmooth        \"KernSmooth\"        \"2.23-24\"     #> lattice           \"lattice\"           \"0.22-6\"      #> MASS              \"MASS\"              \"7.3-61\"      #> Matrix            \"Matrix\"            \"1.7-1\"       #> methods           \"methods\"           \"4.4.2\"       #> mgcv              \"mgcv\"              \"1.9-1\"       #> nlme              \"nlme\"              \"3.1-166\"     #> nnet              \"nnet\"              \"7.3-19\"      #> parallel          \"parallel\"          \"4.4.2\"       #> rpart             \"rpart\"             \"4.1.23\"      #> spatial           \"spatial\"           \"7.3-17\"      #> splines           \"splines\"           \"4.4.2\"       #> stats             \"stats\"             \"4.4.2\"       #> stats4            \"stats4\"            \"4.4.2\"       #> survival          \"survival\"          \"3.7-0\"       #> tcltk             \"tcltk\"             \"4.4.2\"       #> tools             \"tools\"             \"4.4.2\"       #> utils             \"utils\"             \"4.4.2\""},{"path":"https://github.com/jeksterslab/cTMed/articles/session.html","id":"cpu","dir":"Articles","previous_headings":"","what":"CPU","title":"cTMed: Session","text":"","code":"#> Architecture:                         x86_64 #> CPU op-mode(s):                       32-bit, 64-bit #> Address sizes:                        46 bits physical, 48 bits virtual #> Byte Order:                           Little Endian #> CPU(s):                               8 #> On-line CPU(s) list:                  0-7 #> Vendor ID:                            GenuineIntel #> Model name:                           Intel(R) Xeon(R) CPU E5-1620 v2 @ 3.70GHz #> CPU family:                           6 #> Model:                                62 #> Thread(s) per core:                   2 #> Core(s) per socket:                   4 #> Socket(s):                            1 #> Stepping:                             4 #> CPU(s) scaling MHz:                   95% #> CPU max MHz:                          3900.0000 #> CPU min MHz:                          1200.0000 #> BogoMIPS:                             7382.52 #> Flags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm cpuid_fault epb pti ssbd ibrs ibpb stibp tpr_shadow flexpriority ept vpid fsgsbase smep erms xsaveopt dtherm ida arat pln pts vnmi md_clear flush_l1d #> Virtualization:                       VT-x #> L1d cache:                            128 KiB (4 instances) #> L1i cache:                            128 KiB (4 instances) #> L2 cache:                             1 MiB (4 instances) #> L3 cache:                             10 MiB (1 instance) #> NUMA node(s):                         1 #> NUMA node0 CPU(s):                    0-7 #> Vulnerability Gather data sampling:   Not affected #> Vulnerability Itlb multihit:          KVM: Mitigation: VMX disabled #> Vulnerability L1tf:                   Mitigation; PTE Inversion; VMX conditional cache flushes, SMT vulnerable #> Vulnerability Mds:                    Mitigation; Clear CPU buffers; SMT vulnerable #> Vulnerability Meltdown:               Mitigation; PTI #> Vulnerability Mmio stale data:        Unknown: No mitigations #> Vulnerability Reg file data sampling: Not affected #> Vulnerability Retbleed:               Not affected #> Vulnerability Spec rstack overflow:   Not affected #> Vulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl #> Vulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization #> Vulnerability Spectre v2:             Mitigation; Retpolines; IBPB conditional; IBRS_FW; STIBP conditional; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected #> Vulnerability Srbds:                  Not affected #> Vulnerability Tsx async abort:        Not affected"},{"path":"https://github.com/jeksterslab/cTMed/articles/session.html","id":"memory","dir":"Articles","previous_headings":"","what":"Memory","title":"cTMed: Session","text":"","code":"#>                total        used        free      shared  buff/cache   available #> Mem:            11Gi       6.0Gi       2.2Gi        36Mi       3.5Gi       5.4Gi #> Swap:          7.8Gi        12Mi       7.8Gi #> Total:          19Gi       6.0Gi        10Gi"},{"path":"https://github.com/jeksterslab/cTMed/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ivan Jacob Agaloos Pesigan. Author, maintainer, copyright holder.","code":""},{"path":"https://github.com/jeksterslab/cTMed/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pesigan, . J. . (2024). cTMed: Continuous Time Mediation. R package version 1.0.5.9000. https://github.com/jeksterslab/cTMed","code":"@Manual{,   author = {Ivan Jacob Agaloos Pesigan},   title = {cTMed: Continuous Time Mediation},   year = {2024},   note = {R package version 1.0.5.9000}, }"},{"path":"https://github.com/jeksterslab/cTMed/index.html","id":"ctmed","dir":"","previous_headings":"","what":"Continuous Time Mediation","title":"Continuous Time Mediation","text":"Ivan Jacob Agaloos Pesigan 2025-02-11","code":""},{"path":"https://github.com/jeksterslab/cTMed/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Continuous Time Mediation","text":"Calculates standard errors confidence intervals effects continuous time mediation models.","code":""},{"path":"https://github.com/jeksterslab/cTMed/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Continuous Time Mediation","text":"can install development version cTMed GitHub :","code":"if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/cTMed\")"},{"path":"https://github.com/jeksterslab/cTMed/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Continuous Time Mediation","text":"See GitHub Pages package documentation.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBeta","title":"Bootstrap Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBeta","text":"function generates bootstrap method sampling distribution elements matrix lagged coefficients \\(\\boldsymbol{\\beta}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBeta","text":"","code":"BootBeta(phi, phi_hat, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBeta","text":"phi List numeric matrices. element list bootstrap estimate drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi_hat Numeric matrix. estimated drift matrix (\\(\\hat{\\boldsymbol{\\Phi}}\\)) original data set. phi_hat row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBeta","text":"Returns object class ctmedboot list following elements: call Function call. args Function arguments. fun Function used (\"BootBeta\"). output list length length(delta_t). element output list following elements: est Estimated elements matrix lagged coefficients. thetahatstar matrix bootstrap elements matrix lagged coefficients.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBeta","text":"See Total().","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBeta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBeta","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBeta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBeta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBeta","text":"","code":"# \\donttest{ library(bootStateSpace) # prepare parameters ## number of individuals n <- 50 ## time points time <- 100 delta_t <- 0.10 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- matrix(   data = c(     1.0,     0.2,     0.2,     0.2,     1.0,     0.2,     0.2,     0.2,     1.0   ),   nrow = p ) sigma0_l <- t(chol(sigma0)) mu <- rep(x = 0, times = p) phi <- matrix(   data = c(     -0.357,     0.771,     -0.450,     0.0,     -0.511,     0.729,     0,     0,     -0.693   ),   nrow = p ) sigma <- matrix(   data = c(     0.24455556,     0.02201587,     -0.05004762,     0.02201587,     0.07067800,     0.01539456,     -0.05004762,     0.01539456,     0.07553061   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.2 * diag(k) theta_l <- t(chol(theta))  boot <- PBSSMOUFixed(   R = 10L, # use at least 1000 in actual research   path = getwd(),   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = NULL, # consider using multiple cores   seed = 42 ) phi_hat <- phi colnames(phi_hat) <- rownames(phi_hat) <- c(\"x\", \"m\", \"y\") phi <- extract(object = boot, what = \"phi\")  # Specific time interval ---------------------------------------------------- BootBeta(   phi = phi,   phi_hat = phi_hat,   delta_t = 1 ) #>  #> Total, Direct, and Indirect Effects #> type = pc #> $`1` #>             interval     est     se  R    2.5%   97.5% #> from x to x        1  0.6998 0.0462 10  0.6266  0.7449 #> from x to m        1  0.5000 0.0248 10  0.4587  0.5299 #> from x to y        1 -0.1000 0.0135 10 -0.1302 -0.0931 #> from m to x        1  0.0000 0.0469 10 -0.0493  0.0834 #> from m to m        1  0.5999 0.0277 10  0.5667  0.6537 #> from m to y        1  0.3998 0.0171 10  0.3825  0.4322 #> from y to x        1  0.0000 0.0392 10 -0.0706  0.0489 #> from y to m        1  0.0000 0.0276 10 -0.0375  0.0443 #> from y to y        1  0.5001 0.0157 10  0.4886  0.5323 #>   # Range of time intervals --------------------------------------------------- boot <- BootBeta(   phi = phi,   phi_hat = phi_hat,   delta_t = 1:5 ) plot(boot)          plot(boot, type = \"bc\") # bias-corrected           # Methods ------------------------------------------------------------------- # BootBeta has a number of methods including # print, summary, confint, and plot print(boot) #>  #> Total, Direct, and Indirect Effects #> type = pc #> $`1` #>             interval     est     se  R    2.5%   97.5% #> from x to x        1  0.6998 0.0462 10  0.6266  0.7449 #> from x to m        1  0.5000 0.0248 10  0.4587  0.5299 #> from x to y        1 -0.1000 0.0135 10 -0.1302 -0.0931 #> from m to x        1  0.0000 0.0469 10 -0.0493  0.0834 #> from m to m        1  0.5999 0.0277 10  0.5667  0.6537 #> from m to y        1  0.3998 0.0171 10  0.3825  0.4322 #> from y to x        1  0.0000 0.0392 10 -0.0706  0.0489 #> from y to m        1  0.0000 0.0276 10 -0.0375  0.0443 #> from y to y        1  0.5001 0.0157 10  0.4886  0.5323 #>  #> $`2` #>             interval    est     se  R    2.5%  97.5% #> from x to x        2 0.4897 0.0483 10  0.4098 0.5591 #> from x to m        2 0.6499 0.0390 10  0.5798 0.6904 #> from x to y        2 0.0799 0.0159 10  0.0406 0.0879 #> from m to x        2 0.0000 0.0489 10 -0.0474 0.0818 #> from m to m        2 0.3599 0.0460 10  0.3184 0.4541 #> from m to y        2 0.4398 0.0195 10  0.4226 0.4788 #> from y to x        2 0.0000 0.0481 10 -0.0865 0.0616 #> from y to m        2 0.0000 0.0440 10 -0.0689 0.0554 #> from y to y        2 0.2501 0.0190 10  0.2345 0.2841 #>  #> $`3` #>             interval    est     se  R    2.5%  97.5% #> from x to x        3 0.3427 0.0463 10  0.2751 0.4257 #> from x to m        3 0.6347 0.0502 10  0.5459 0.7052 #> from x to y        3 0.2508 0.0187 10  0.2164 0.2668 #> from m to x        3 0.0000 0.0401 10 -0.0469 0.0612 #> from m to m        3 0.2159 0.0528 10  0.1761 0.3210 #> from m to y        3 0.3638 0.0247 10  0.3426 0.4109 #> from y to x        3 0.0000 0.0450 10 -0.0822 0.0574 #> from y to m        3 0.0000 0.0536 10 -0.0934 0.0546 #> from y to y        3 0.1251 0.0217 10  0.0991 0.1646 #>  #> $`4` #>             interval    est     se  R    2.5%  97.5% #> from x to x        4 0.2398 0.0451 10  0.1818 0.3288 #> from x to m        4 0.5521 0.0588 10  0.4572 0.6504 #> from x to y        4 0.3449 0.0247 10  0.2959 0.3704 #> from m to x        4 0.0000 0.0316 10 -0.0473 0.0417 #> from m to m        4 0.1295 0.0508 10  0.0907 0.2251 #> from m to y        4 0.2683 0.0311 10  0.2429 0.3363 #> from y to x        4 0.0000 0.0379 10 -0.0710 0.0473 #> from y to m        4 0.0000 0.0565 10 -0.1030 0.0564 #> from y to y        4 0.0625 0.0266 10  0.0262 0.1026 #>  #> $`5` #>             interval    est     se  R    2.5%  97.5% #> from x to x        5 0.1678 0.0436 10  0.1193 0.2574 #> from x to m        5 0.4511 0.0642 10  0.3589 0.5698 #> from x to y        5 0.3693 0.0323 10  0.3088 0.4065 #> from m to x        5 0.0000 0.0253 10 -0.0430 0.0354 #> from m to m        5 0.0777 0.0448 10  0.0312 0.1541 #> from m to y        5 0.1859 0.0344 10  0.1610 0.2617 #> from y to x        5 0.0000 0.0302 10 -0.0581 0.0366 #> from y to m        5 0.0000 0.0541 10 -0.1015 0.0562 #> from y to y        5 0.0313 0.0316 10 -0.0151 0.0702 #>  summary(boot) #>         effect interval         est         se  R        2.5%       97.5% #> 1  from x to x        1  0.69977250 0.04619116 10  0.62664729  0.74488459 #> 2  from x to m        1  0.50003412 0.02476283 10  0.45865329  0.52990640 #> 3  from x to y        1 -0.10003837 0.01352470 10 -0.13021799 -0.09314403 #> 4  from m to x        1  0.00000000 0.04693048 10 -0.04929444  0.08343532 #> 5  from m to m        1  0.59989538 0.02765975 10  0.56673563  0.65366698 #> 6  from m to y        1  0.39983562 0.01709394 10  0.38245910  0.43217031 #> 7  from y to x        1  0.00000000 0.03921752 10 -0.07064902  0.04890429 #> 8  from y to m        1  0.00000000 0.02757518 10 -0.03753362  0.04426060 #> 9  from y to y        1  0.50007360 0.01565101 10  0.48863283  0.53227520 #> 10 from x to x        2  0.48968155 0.04829661 10  0.40983641  0.55913746 #> 11 from x to m        2  0.64987829 0.03899876 10  0.57977635  0.69042092 #> 12 from x to y        2  0.07990080 0.01591422 10  0.04064558  0.08786268 #> 13 from m to x        2  0.00000000 0.04888590 10 -0.04743327  0.08178123 #> 14 from m to m        2  0.35987447 0.04599035 10  0.31838727  0.45406311 #> 15 from m to y        2  0.43980678 0.01949252 10  0.42255274  0.47879973 #> 16 from y to x        2  0.00000000 0.04808620 10 -0.08645868  0.06162203 #> 17 from y to m        2  0.00000000 0.04396104 10 -0.06887826  0.05544520 #> 18 from y to y        2  0.25007360 0.01902263 10  0.23452458  0.28407526 #> 19 from x to x        3  0.34266568 0.04625981 10  0.27505399  0.42572708 #> 20 from x to m        3  0.63471647 0.05020048 10  0.54592419  0.70521856 #> 21 from x to y        3  0.25081383 0.01873463 10  0.21635512  0.26676004 #> 22 from m to x        3  0.00000000 0.04013982 10 -0.04686850  0.06118365 #> 23 from m to m        3  0.21588703 0.05277385 10  0.17613806  0.32096736 #> 24 from m to y        3  0.36382639 0.02473911 10  0.34257063  0.41085799 #> 25 from y to x        3  0.00000000 0.04496705 10 -0.08215661  0.05740087 #> 26 from y to m        3  0.00000000 0.05360473 10 -0.09343319  0.05463893 #> 27 from y to y        3  0.12505520 0.02167083 10  0.09906528  0.16456126 #> 28 from x to x        4  0.23978802 0.04513964 10  0.18178975  0.32883844 #> 29 from x to m        4  0.55210801 0.05884353 10  0.45719753  0.65039899 #> 30 from x to y        4  0.34492791 0.02474916 10  0.29592103  0.37042957 #> 31 from m to x        4  0.00000000 0.03158889 10 -0.04732694  0.04168309 #> 32 from m to m        4  0.12950963 0.05084726 10  0.09070625  0.22505825 #> 33 from m to y        4  0.26825930 0.03113957 10  0.24288443  0.33626007 #> 34 from y to x        4  0.00000000 0.03785506 10 -0.07095595  0.04725816 #> 35 from y to m        4  0.00000000 0.05647188 10 -0.10303558  0.05638981 #> 36 from y to y        4  0.06253681 0.02659055 10  0.02623799  0.10262406 #> 37 from x to x        5  0.16779706 0.04357747 10  0.11929313  0.25743403 #> 38 from x to m        5  0.45110924 0.06420883 10  0.35894087  0.56976928 #> 39 from x to y        5  0.36925379 0.03226131 10  0.30878766  0.40647923 #> 40 from m to x        5  0.00000000 0.02531419 10 -0.04300933  0.03537615 #> 41 from m to m        5  0.07769223 0.04484573 10  0.03122991  0.15411817 #> 42 from m to y        5  0.18593196 0.03444554 10  0.16101445  0.26167942 #> 43 from y to x        5  0.00000000 0.03018798 10 -0.05814267  0.03661063 #> 44 from y to m        5  0.00000000 0.05406332 10 -0.10148472  0.05620318 #> 45 from y to y        5  0.03127301 0.03156738 10 -0.01509265  0.07019346 confint(boot, level = 0.95) #>         effect interval       2.5 %      97.5 % #> 1  from x to x        1  0.62664729  0.74488459 #> 2  from x to m        1  0.45865329  0.52990640 #> 3  from x to y        1 -0.13021799 -0.09314403 #> 4  from x to x        2  0.40983641  0.55913746 #> 5  from x to m        2  0.57977635  0.69042092 #> 6  from x to y        2  0.04064558  0.08786268 #> 7  from x to x        3  0.27505399  0.42572708 #> 8  from x to m        3  0.54592419  0.70521856 #> 9  from x to y        3  0.21635512  0.26676004 #> 10 from x to x        4  0.18178975  0.32883844 #> 11 from x to m        4  0.45719753  0.65039899 #> 12 from x to y        4  0.29592103  0.37042957 #> 13 from x to x        5  0.11929313  0.25743403 #> 14 from x to m        5  0.35894087  0.56976928 #> 15 from x to y        5  0.30878766  0.40647923 print(boot, type = \"bc\") # bias-corrected #>  #> Total, Direct, and Indirect Effects #> type = bc #> $`1` #>             interval     est     se  R    2.5%   97.5% #> from x to x        1  0.6998 0.0462 10  0.6247  0.7391 #> from x to m        1  0.5000 0.0248 10  0.4598  0.5310 #> from x to y        1 -0.1000 0.0135 10 -0.1193 -0.0928 #> from m to x        1  0.0000 0.0469 10 -0.0493  0.0834 #> from m to m        1  0.5999 0.0277 10  0.5653  0.6134 #> from m to y        1  0.3998 0.0171 10  0.3825  0.4322 #> from y to x        1  0.0000 0.0392 10 -0.0706  0.0489 #> from y to m        1  0.0000 0.0276 10 -0.0337  0.0487 #> from y to y        1  0.5001 0.0157 10  0.4886  0.5323 #>  #> $`2` #>             interval    est     se  R    2.5%  97.5% #> from x to x        2 0.4897 0.0483 10  0.3995 0.5203 #> from x to m        2 0.6499 0.0390 10  0.5718 0.6806 #> from x to y        2 0.0799 0.0159 10  0.0682 0.0888 #> from m to x        2 0.0000 0.0489 10 -0.0467 0.0820 #> from m to m        2 0.3599 0.0460 10  0.3177 0.4386 #> from m to y        2 0.4398 0.0195 10  0.4226 0.4634 #> from y to x        2 0.0000 0.0481 10 -0.0865 0.0616 #> from y to m        2 0.0000 0.0440 10 -0.0689 0.0554 #> from y to y        2 0.2501 0.0190 10  0.2339 0.2829 #>  #> $`3` #>             interval    est     se  R    2.5%  97.5% #> from x to x        3 0.3427 0.0463 10  0.2607 0.3854 #> from x to m        3 0.6347 0.0502 10  0.5323 0.6736 #> from x to y        3 0.2508 0.0187 10  0.2205 0.2683 #> from m to x        3 0.0000 0.0401 10 -0.0440 0.0617 #> from m to m        3 0.2159 0.0528 10  0.1761 0.3210 #> from m to y        3 0.3638 0.0247 10  0.3416 0.3980 #> from y to x        3 0.0000 0.0450 10 -0.0822 0.0574 #> from y to m        3 0.0000 0.0536 10 -0.0934 0.0546 #> from y to y        3 0.1251 0.0217 10  0.0990 0.1432 #>  #> $`4` #>             interval    est     se  R    2.5%  97.5% #> from x to x        4 0.2398 0.0451 10  0.1710 0.2551 #> from x to m        4 0.5521 0.0588 10  0.4374 0.5848 #> from x to y        4 0.3449 0.0247 10  0.3148 0.3716 #> from m to x        4 0.0000 0.0316 10 -0.0391 0.0422 #> from m to m        4 0.1295 0.0508 10  0.0907 0.2251 #> from m to y        4 0.2683 0.0311 10  0.2412 0.3233 #> from y to x        4 0.0000 0.0379 10 -0.0710 0.0473 #> from y to m        4 0.0000 0.0565 10 -0.1030 0.0564 #> from y to y        4 0.0625 0.0266 10  0.0246 0.0917 #>  #> $`5` #>             interval    est     se  R    2.5%  97.5% #> from x to x        5 0.1678 0.0436 10  0.1135 0.2148 #> from x to m        5 0.4511 0.0642 10  0.3371 0.5062 #> from x to y        5 0.3693 0.0323 10  0.2942 0.3981 #> from m to x        5 0.0000 0.0253 10 -0.0430 0.0354 #> from m to m        5 0.0777 0.0448 10  0.0412 0.1572 #> from m to y        5 0.1859 0.0344 10  0.1592 0.2470 #> from y to x        5 0.0000 0.0302 10 -0.0581 0.0366 #> from y to m        5 0.0000 0.0541 10 -0.1015 0.0562 #> from y to y        5 0.0313 0.0316 10 -0.0152 0.0641 #>  summary(boot, type = \"bc\") #>         effect interval         est         se  R        2.5%       97.5% #> 1  from x to x        1  0.69977250 0.04619116 10  0.62468140  0.73907938 #> 2  from x to m        1  0.50003412 0.02476283 10  0.45980840  0.53098923 #> 3  from x to y        1 -0.10003837 0.01352470 10 -0.11928264 -0.09276853 #> 4  from m to x        1  0.00000000 0.04693048 10 -0.04929444  0.08343532 #> 5  from m to m        1  0.59989538 0.02765975 10  0.56533542  0.61343471 #> 6  from m to y        1  0.39983562 0.01709394 10  0.38245910  0.43217031 #> 7  from y to x        1  0.00000000 0.03921752 10 -0.07064902  0.04890429 #> 8  from y to m        1  0.00000000 0.02757518 10 -0.03373034  0.04870959 #> 9  from y to y        1  0.50007360 0.01565101 10  0.48863283  0.53227520 #> 10 from x to x        2  0.48968155 0.04829661 10  0.39951058  0.52028969 #> 11 from x to m        2  0.64987829 0.03899876 10  0.57182354  0.68061666 #> 12 from x to y        2  0.07990080 0.01591422 10  0.06815270  0.08882083 #> 13 from m to x        2  0.00000000 0.04888590 10 -0.04673487  0.08197855 #> 14 from m to m        2  0.35987447 0.04599035 10  0.31766333  0.43855897 #> 15 from m to y        2  0.43980678 0.01949252 10  0.42255078  0.46342043 #> 16 from y to x        2  0.00000000 0.04808620 10 -0.08645868  0.06162203 #> 17 from y to m        2  0.00000000 0.04396104 10 -0.06887826  0.05544520 #> 18 from y to y        2  0.25007360 0.01902263 10  0.23392510  0.28285536 #> 19 from x to x        3  0.34266568 0.04625981 10  0.26069578  0.38535309 #> 20 from x to m        3  0.63471647 0.05020048 10  0.53225460  0.67358656 #> 21 from x to y        3  0.25081383 0.01873463 10  0.22048639  0.26829406 #> 22 from m to x        3  0.00000000 0.04013982 10 -0.04400360  0.06166691 #> 23 from m to m        3  0.21588703 0.05277385 10  0.17613806  0.32096736 #> 24 from m to y        3  0.36382639 0.02473911 10  0.34164309  0.39800899 #> 25 from y to x        3  0.00000000 0.04496705 10 -0.08215661  0.05740087 #> 26 from y to m        3  0.00000000 0.05360473 10 -0.09343319  0.05463893 #> 27 from y to y        3  0.12505520 0.02167083 10  0.09901812  0.14317853 #> 28 from x to x        4  0.23978802 0.04513964 10  0.17104675  0.25509649 #> 29 from x to m        4  0.55210801 0.05884353 10  0.43741315  0.58480548 #> 30 from x to y        4  0.34492791 0.02474916 10  0.31483437  0.37160448 #> 31 from m to x        4  0.00000000 0.03158889 10 -0.03909152  0.04223043 #> 32 from m to m        4  0.12950963 0.05084726 10  0.09070625  0.22505825 #> 33 from m to y        4  0.26825930 0.03113957 10  0.24118376  0.32331608 #> 34 from y to x        4  0.00000000 0.03785506 10 -0.07095595  0.04725816 #> 35 from y to m        4  0.00000000 0.05647188 10 -0.10303558  0.05638981 #> 36 from y to y        4  0.06253681 0.02659055 10  0.02457317  0.09166099 #> 37 from x to x        5  0.16779706 0.04357747 10  0.11350347  0.21483345 #> 38 from x to m        5  0.45110924 0.06420883 10  0.33710283  0.50621360 #> 39 from x to y        5  0.36925379 0.03226131 10  0.29418281  0.39806967 #> 40 from m to x        5  0.00000000 0.02531419 10 -0.04300933  0.03537615 #> 41 from m to m        5  0.07769223 0.04484573 10  0.04123415  0.15717773 #> 42 from m to y        5  0.18593196 0.03444554 10  0.15918697  0.24702743 #> 43 from y to x        5  0.00000000 0.03018798 10 -0.05814267  0.03661063 #> 44 from y to m        5  0.00000000 0.05406332 10 -0.10148472  0.05620318 #> 45 from y to y        5  0.03127301 0.03156738 10 -0.01516324  0.06407115 confint(boot, level = 0.95, type = \"bc\") #>         effect interval      2.5 %      97.5 % #> 1  from x to x        1  0.6246814  0.73907938 #> 2  from x to m        1  0.4598084  0.53098923 #> 3  from x to y        1 -0.1192826 -0.09276853 #> 4  from x to x        2  0.3995106  0.52028969 #> 5  from x to m        2  0.5718235  0.68061666 #> 6  from x to y        2  0.0681527  0.08882083 #> 7  from x to x        3  0.2606958  0.38535309 #> 8  from x to m        3  0.5322546  0.67358656 #> 9  from x to y        3  0.2204864  0.26829406 #> 10 from x to x        4  0.1710467  0.25509649 #> 11 from x to m        4  0.4374131  0.58480548 #> 12 from x to y        4  0.3148344  0.37160448 #> 13 from x to x        5  0.1135035  0.21483345 #> 14 from x to m        5  0.3371028  0.50621360 #> 15 from x to y        5  0.2941828  0.39806967 # }"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBetaStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBetaStd","title":"Bootstrap Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBetaStd","text":"function generates bootstrap method sampling distribution elements standardized matrix lagged coefficients \\(\\boldsymbol{\\beta}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBetaStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBetaStd","text":"","code":"BootBetaStd(phi, sigma, phi_hat, sigma_hat, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBetaStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBetaStd","text":"phi List numeric matrices. element list bootstrap estimate drift matrix (\\(\\boldsymbol{\\Phi}\\)). sigma List numeric matrices. element list bootstrap estimate process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). phi_hat Numeric matrix. estimated drift matrix (\\(\\hat{\\boldsymbol{\\Phi}}\\)) original data set. phi_hat row column names pertaining variables system. sigma_hat Numeric matrix. estimated process noise covariance matrix (\\(\\hat{\\boldsymbol{\\Sigma}}\\)) original data set. delta_t Numeric. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBetaStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBetaStd","text":"Returns object class ctmedboot list following elements: call Function call. args Function arguments. fun Function used (\"BootBetaStd\"). output list length length(delta_t). element output list following elements: est Estimated elements standardized matrix lagged coefficients. thetahatstar matrix bootstrap elements standardized matrix lagged coefficients.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBetaStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBetaStd","text":"See TotalStd().","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBetaStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBetaStd","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBetaStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBetaStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootBetaStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — BootBetaStd","text":"","code":"# \\donttest{ library(bootStateSpace) # prepare parameters ## number of individuals n <- 50 ## time points time <- 100 delta_t <- 0.10 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- matrix(   data = c(     1.0,     0.2,     0.2,     0.2,     1.0,     0.2,     0.2,     0.2,     1.0   ),   nrow = p ) sigma0_l <- t(chol(sigma0)) mu <- rep(x = 0, times = p) phi <- matrix(   data = c(     -0.357,     0.771,     -0.450,     0.0,     -0.511,     0.729,     0,     0,     -0.693   ),   nrow = p ) sigma <- matrix(   data = c(     0.24455556,     0.02201587,     -0.05004762,     0.02201587,     0.07067800,     0.01539456,     -0.05004762,     0.01539456,     0.07553061   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.2 * diag(k) theta_l <- t(chol(theta))  boot <- PBSSMOUFixed(   R = 10L, # use at least 1000 in actual research   path = getwd(),   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = NULL, # consider using multiple cores   seed = 42 ) phi_hat <- phi colnames(phi_hat) <- rownames(phi_hat) <- c(\"x\", \"m\", \"y\") sigma_hat <- sigma phi <- extract(object = boot, what = \"phi\") sigma <- extract(object = boot, what = \"sigma\")  # Specific time interval ---------------------------------------------------- BootBetaStd(   phi = phi,   sigma = sigma,   phi_hat = phi_hat,   sigma_hat = sigma_hat,   delta_t = 1 ) #>  #> Total, Direct, and Indirect Effects #> type = pc #> $`1` #>             interval     est     se  R    2.5%   97.5% #> from x to x        1  0.6998 0.0462 10  0.6266  0.7449 #> from x to m        1  0.6176 0.0390 10  0.5498  0.6702 #> from x to y        1 -0.0821 0.0127 10 -0.1087 -0.0712 #> from m to x        1  0.0000 0.0379 10 -0.0399  0.0667 #> from m to m        1  0.5999 0.0277 10  0.5667  0.6537 #> from m to y        1  0.2656 0.0186 10  0.2413  0.2951 #> from y to x        1  0.0000 0.0459 10 -0.0819  0.0567 #> from y to m        1  0.0000 0.0417 10 -0.0594  0.0664 #> from y to y        1  0.5001 0.0157 10  0.4886  0.5323 #>   # Range of time intervals --------------------------------------------------- boot <- BootBetaStd(   phi = phi,   sigma = sigma,   phi_hat = phi_hat,   sigma_hat = sigma_hat,   delta_t = 1:5 ) plot(boot)          plot(boot, type = \"bc\") # bias-corrected           # Methods ------------------------------------------------------------------- # BootBetaStd has a number of methods including # print, summary, confint, and plot print(boot) #>  #> Total, Direct, and Indirect Effects #> type = pc #> $`1` #>             interval     est     se  R    2.5%   97.5% #> from x to x        1  0.6998 0.0462 10  0.6266  0.7449 #> from x to m        1  0.6176 0.0390 10  0.5498  0.6702 #> from x to y        1 -0.0821 0.0127 10 -0.1087 -0.0712 #> from m to x        1  0.0000 0.0379 10 -0.0399  0.0667 #> from m to m        1  0.5999 0.0277 10  0.5667  0.6537 #> from m to y        1  0.2656 0.0186 10  0.2413  0.2951 #> from y to x        1  0.0000 0.0459 10 -0.0819  0.0567 #> from y to m        1  0.0000 0.0417 10 -0.0594  0.0664 #> from y to y        1  0.5001 0.0157 10  0.4886  0.5323 #>  #> $`2` #>             interval    est     se  R    2.5%  97.5% #> from x to x        2 0.4897 0.0483 10  0.4098 0.5591 #> from x to m        2 0.8027 0.0648 10  0.6892 0.8908 #> from x to y        2 0.0656 0.0135 10  0.0341 0.0733 #> from m to x        2 0.0000 0.0395 10 -0.0390 0.0663 #> from m to m        2 0.3599 0.0460 10  0.3184 0.4541 #> from m to y        2 0.2922 0.0215 10  0.2666 0.3270 #> from y to x        2 0.0000 0.0562 10 -0.1003 0.0715 #> from y to m        2 0.0000 0.0656 10 -0.1009 0.0831 #> from y to y        2 0.2501 0.0190 10  0.2345 0.2841 #>  #> $`3` #>             interval    est     se  R    2.5%  97.5% #> from x to x        3 0.3427 0.0463 10  0.2751 0.4257 #> from x to m        3 0.7840 0.0814 10  0.6491 0.9117 #> from x to y        3 0.2058 0.0209 10  0.1639 0.2255 #> from m to x        3 0.0000 0.0324 10 -0.0384 0.0501 #> from m to m        3 0.2159 0.0528 10  0.1761 0.3210 #> from m to y        3 0.2417 0.0224 10  0.2191 0.2803 #> from y to x        3 0.0000 0.0525 10 -0.0952 0.0666 #> from y to m        3 0.0000 0.0793 10 -0.1369 0.0815 #> from y to y        3 0.1251 0.0217 10  0.0991 0.1646 #>  #> $`4` #>             interval    est     se  R    2.5%  97.5% #> from x to x        4 0.2398 0.0451 10  0.1818 0.3288 #> from x to m        4 0.6820 0.0910 10  0.5437 0.8406 #> from x to y        4 0.2830 0.0305 10  0.2245 0.3184 #> from m to x        4 0.0000 0.0255 10 -0.0388 0.0340 #> from m to m        4 0.1295 0.0508 10  0.0907 0.2251 #> from m to y        4 0.1782 0.0240 10  0.1583 0.2295 #> from y to x        4 0.0000 0.0442 10 -0.0822 0.0548 #> from y to m        4 0.0000 0.0831 10 -0.1510 0.0817 #> from y to y        4 0.0625 0.0266 10  0.0262 0.1026 #>  #> $`5` #>             interval    est     se  R    2.5%  97.5% #> from x to x        5 0.1678 0.0436 10  0.1193 0.2574 #> from x to m        5 0.5572 0.0952 10  0.4270 0.7365 #> from x to y        5 0.3030 0.0380 10  0.2333 0.3487 #> from m to x        5 0.0000 0.0204 10 -0.0352 0.0276 #> from m to m        5 0.0777 0.0448 10  0.0312 0.1541 #> from m to y        5 0.1235 0.0247 10  0.1053 0.1786 #> from y to x        5 0.0000 0.0352 10 -0.0674 0.0425 #> from y to m        5 0.0000 0.0794 10 -0.1488 0.0812 #> from y to y        5 0.0313 0.0316 10 -0.0151 0.0702 #>  summary(boot) #>         effect interval         est         se  R        2.5%       97.5% #> 1  from x to x        1  0.69977250 0.04619116 10  0.62664729  0.74488459 #> 2  from x to m        1  0.61764568 0.03902847 10  0.54982185  0.67022543 #> 3  from x to y        1 -0.08208640 0.01268570 10 -0.10867279 -0.07119273 #> 4  from m to x        1  0.00000000 0.03788028 10 -0.03993294  0.06671122 #> 5  from m to m        1  0.59989538 0.02765975 10  0.56673563  0.65366698 #> 6  from m to y        1  0.26561115 0.01858551 10  0.24131251  0.29512998 #> 7  from y to x        1  0.00000000 0.04588615 10 -0.08194803  0.05670775 #> 8  from y to m        1  0.00000000 0.04170948 10 -0.05944665  0.06635349 #> 9  from y to y        1  0.50007360 0.01565101 10  0.48863283  0.53227520 #> 10 from x to x        2  0.48968155 0.04829661 10  0.40983641  0.55913746 #> 11 from x to m        2  0.80273425 0.06482598 10  0.68918027  0.89078618 #> 12 from x to y        2  0.06556253 0.01345026 10  0.03412108  0.07329555 #> 13 from m to x        2  0.00000000 0.03948585 10 -0.03898831  0.06634213 #> 14 from m to m        2  0.35987447 0.04599035 10  0.31838727  0.45406311 #> 15 from m to y        2  0.29216402 0.02153487 10  0.26656837  0.32697496 #> 16 from y to x        2  0.00000000 0.05621440 10 -0.10025817  0.07145442 #> 17 from y to m        2  0.00000000 0.06558426 10 -0.10092801  0.08306889 #> 18 from y to y        2  0.25007360 0.01902263 10  0.23452458  0.28407526 #> 19 from x to x        3  0.34266568 0.04625981 10  0.27505399  0.42572708 #> 20 from x to m        3  0.78400626 0.08135532 10  0.64906862  0.91169863 #> 21 from x to y        3  0.20580506 0.02085928 10  0.16394193  0.22551444 #> 22 from m to x        3  0.00000000 0.03243410 10 -0.03840964  0.05006817 #> 23 from m to m        3  0.21588703 0.05277385 10  0.17613806  0.32096736 #> 24 from m to y        3  0.24169019 0.02241526 10  0.21906641  0.28033138 #> 25 from y to x        3  0.00000000 0.05252637 10 -0.09524447  0.06656447 #> 26 from y to m        3  0.00000000 0.07926670 10 -0.13693185  0.08154243 #> 27 from y to y        3  0.12505520 0.02167083 10  0.09906528  0.16456126 #> 28 from x to x        4  0.23978802 0.04513964 10  0.18178975  0.32883844 #> 29 from x to m        4  0.68196771 0.09103270 10  0.54373209  0.84059934 #> 30 from x to y        4  0.28303029 0.03049804 10  0.22448338  0.31839234 #> 31 from m to x        4  0.00000000 0.02550784 10 -0.03876694  0.03399591 #> 32 from m to m        4  0.12950963 0.05084726 10  0.09070625  0.22505825 #> 33 from m to y        4  0.17820488 0.02399853 10  0.15833924  0.22952662 #> 34 from y to x        4  0.00000000 0.04418589 10 -0.08224011  0.05481029 #> 35 from y to m        4  0.00000000 0.08312356 10 -0.15102289  0.08165583 #> 36 from y to y        4  0.06253681 0.02659055 10  0.02623799  0.10262406 #> 37 from x to x        5  0.16779706 0.04357747 10  0.11929313  0.25743403 #> 38 from x to m        5  0.55721332 0.09517930 10  0.42702451  0.73648886 #> 39 from x to y        5  0.30299087 0.03803323 10  0.23334539  0.34871687 #> 40 from m to x        5  0.00000000 0.02039594 10 -0.03521938  0.02759550 #> 41 from m to m        5  0.07769223 0.04484573 10  0.03122991  0.15411817 #> 42 from m to y        5  0.12351476 0.02470563 10  0.10532894  0.17860500 #> 43 from y to x        5  0.00000000 0.03521190 10 -0.06737552  0.04246982 #> 44 from y to m        5  0.00000000 0.07939465 10 -0.14876407  0.08122120 #> 45 from y to y        5  0.03127301 0.03156738 10 -0.01509265  0.07019346 confint(boot, level = 0.95) #>         effect interval       2.5 %      97.5 % #> 1  from x to x        1  0.62664729  0.74488459 #> 2  from x to m        1  0.54982185  0.67022543 #> 3  from x to y        1 -0.10867279 -0.07119273 #> 4  from x to x        2  0.40983641  0.55913746 #> 5  from x to m        2  0.68918027  0.89078618 #> 6  from x to y        2  0.03412108  0.07329555 #> 7  from x to x        3  0.27505399  0.42572708 #> 8  from x to m        3  0.64906862  0.91169863 #> 9  from x to y        3  0.16394193  0.22551444 #> 10 from x to x        4  0.18178975  0.32883844 #> 11 from x to m        4  0.54373209  0.84059934 #> 12 from x to y        4  0.22448338  0.31839234 #> 13 from x to x        5  0.11929313  0.25743403 #> 14 from x to m        5  0.42702451  0.73648886 #> 15 from x to y        5  0.23334539  0.34871687 print(boot, type = \"bc\") # bias-corrected #>  #> Total, Direct, and Indirect Effects #> type = bc #> $`1` #>             interval     est     se  R    2.5%   97.5% #> from x to x        1  0.6998 0.0462 10  0.6247  0.7391 #> from x to m        1  0.6176 0.0390 10  0.5654  0.6743 #> from x to y        1 -0.0821 0.0127 10 -0.1020 -0.0683 #> from m to x        1  0.0000 0.0379 10 -0.0399  0.0667 #> from m to m        1  0.5999 0.0277 10  0.5653  0.6134 #> from m to y        1  0.2656 0.0186 10  0.2499  0.2963 #> from y to x        1  0.0000 0.0459 10 -0.0819  0.0567 #> from y to m        1  0.0000 0.0417 10 -0.0514  0.0733 #> from y to y        1  0.5001 0.0157 10  0.4886  0.5323 #>  #> $`2` #>             interval    est     se  R    2.5%  97.5% #> from x to x        2 0.4897 0.0483 10  0.3995 0.5203 #> from x to m        2 0.8027 0.0648 10  0.6765 0.8596 #> from x to y        2 0.0656 0.0135 10  0.0440 0.0741 #> from m to x        2 0.0000 0.0395 10 -0.0380 0.0668 #> from m to m        2 0.3599 0.0460 10  0.3177 0.4386 #> from m to y        2 0.2922 0.0215 10  0.2636 0.3240 #> from y to x        2 0.0000 0.0562 10 -0.1003 0.0715 #> from y to m        2 0.0000 0.0656 10 -0.1009 0.0831 #> from y to y        2 0.2501 0.0190 10  0.2339 0.2829 #>  #> $`3` #>             interval    est     se  R    2.5%  97.5% #> from x to x        3 0.3427 0.0463 10  0.2607 0.3854 #> from x to m        3 0.7840 0.0814 10  0.6297 0.8496 #> from x to y        3 0.2058 0.0209 10  0.1639 0.2255 #> from m to x        3 0.0000 0.0324 10 -0.0362 0.0509 #> from m to m        3 0.2159 0.0528 10  0.1761 0.3210 #> from m to y        3 0.2417 0.0224 10  0.2176 0.2723 #> from y to x        3 0.0000 0.0525 10 -0.0952 0.0666 #> from y to m        3 0.0000 0.0793 10 -0.1369 0.0815 #> from y to y        3 0.1251 0.0217 10  0.0990 0.1432 #>  #> $`4` #>             interval    est     se  R    2.5%  97.5% #> from x to x        4 0.2398 0.0451 10  0.1710 0.2551 #> from x to m        4 0.6820 0.0910 10  0.5186 0.7539 #> from x to y        4 0.2830 0.0305 10  0.2141 0.3118 #> from m to x        4 0.0000 0.0255 10 -0.0322 0.0348 #> from m to m        4 0.1295 0.0508 10  0.0907 0.2251 #> from m to y        4 0.1782 0.0240 10  0.1579 0.2041 #> from y to x        4 0.0000 0.0442 10 -0.0822 0.0548 #> from y to m        4 0.0000 0.0831 10 -0.1510 0.0817 #> from y to y        4 0.0625 0.0266 10  0.0246 0.0917 #>  #> $`5` #>             interval    est     se  R    2.5%  97.5% #> from x to x        5 0.1678 0.0436 10  0.1135 0.2148 #> from x to m        5 0.5572 0.0952 10  0.3988 0.6443 #> from x to y        5 0.3030 0.0380 10  0.2165 0.3334 #> from m to x        5 0.0000 0.0204 10 -0.0352 0.0276 #> from m to m        5 0.0777 0.0448 10  0.0412 0.1572 #> from m to y        5 0.1235 0.0247 10  0.1044 0.1694 #> from y to x        5 0.0000 0.0352 10 -0.0674 0.0425 #> from y to m        5 0.0000 0.0794 10 -0.1488 0.0812 #> from y to y        5 0.0313 0.0316 10 -0.0152 0.0641 #>  summary(boot, type = \"bc\") #>         effect interval         est         se  R        2.5%       97.5% #> 1  from x to x        1  0.69977250 0.04619116 10  0.62468140  0.73907938 #> 2  from x to m        1  0.61764568 0.03902847 10  0.56536551  0.67429388 #> 3  from x to y        1 -0.08208640 0.01268570 10 -0.10202748 -0.06829755 #> 4  from m to x        1  0.00000000 0.03788028 10 -0.03993294  0.06671122 #> 5  from m to m        1  0.59989538 0.02765975 10  0.56533542  0.61343471 #> 6  from m to y        1  0.26561115 0.01858551 10  0.24994639  0.29625244 #> 7  from y to x        1  0.00000000 0.04588615 10 -0.08194803  0.05670775 #> 8  from y to m        1  0.00000000 0.04170948 10 -0.05144332  0.07325928 #> 9  from y to y        1  0.50007360 0.01565101 10  0.48863283  0.53227520 #> 10 from x to x        2  0.48968155 0.04829661 10  0.39951058  0.52028969 #> 11 from x to m        2  0.80273425 0.06482598 10  0.67647811  0.85955774 #> 12 from x to y        2  0.06556253 0.01345026 10  0.04398016  0.07411270 #> 13 from m to x        2  0.00000000 0.03948585 10 -0.03801075  0.06676269 #> 14 from m to m        2  0.35987447 0.04599035 10  0.31766333  0.43855897 #> 15 from m to y        2  0.29216402 0.02153487 10  0.26359462  0.32403763 #> 16 from y to x        2  0.00000000 0.05621440 10 -0.10025817  0.07145442 #> 17 from y to m        2  0.00000000 0.06558426 10 -0.10092801  0.08306889 #> 18 from y to y        2  0.25007360 0.01902263 10  0.23392510  0.28285536 #> 19 from x to x        3  0.34266568 0.04625981 10  0.26069578  0.38535309 #> 20 from x to m        3  0.78400626 0.08135532 10  0.62967601  0.84959224 #> 21 from x to y        3  0.20580506 0.02085928 10  0.16394193  0.22551444 #> 22 from m to x        3  0.00000000 0.03243410 10 -0.03622099  0.05088729 #> 23 from m to m        3  0.21588703 0.05277385 10  0.17613806  0.32096736 #> 24 from m to y        3  0.24169019 0.02241526 10  0.21764340  0.27234764 #> 25 from y to x        3  0.00000000 0.05252637 10 -0.09524447  0.06656447 #> 26 from y to m        3  0.00000000 0.07926670 10 -0.13693185  0.08154243 #> 27 from y to y        3  0.12505520 0.02167083 10  0.09901812  0.14317853 #> 28 from x to x        4  0.23978802 0.04513964 10  0.17104675  0.25509649 #> 29 from x to m        4  0.68196771 0.09103270 10  0.51859361  0.75390965 #> 30 from x to y        4  0.28303029 0.03049804 10  0.21407644  0.31176831 #> 31 from m to x        4  0.00000000 0.02550784 10 -0.03215238  0.03481772 #> 32 from m to m        4  0.12950963 0.05084726 10  0.09070625  0.22505825 #> 33 from m to y        4  0.17820488 0.02399853 10  0.15792999  0.20406726 #> 34 from y to x        4  0.00000000 0.04418589 10 -0.08224011  0.05481029 #> 35 from y to m        4  0.00000000 0.08312356 10 -0.15102289  0.08165583 #> 36 from y to y        4  0.06253681 0.02659055 10  0.02457317  0.09166099 #> 37 from x to x        5  0.16779706 0.04357747 10  0.11350347  0.21483345 #> 38 from x to m        5  0.55721332 0.09517930 10  0.39882288  0.64434751 #> 39 from x to y        5  0.30299087 0.03803323 10  0.21646252  0.33343473 #> 40 from m to x        5  0.00000000 0.02039594 10 -0.03521938  0.02759550 #> 41 from m to m        5  0.07769223 0.04484573 10  0.04123415  0.15717773 #> 42 from m to y        5  0.12351476 0.02470563 10  0.10439811  0.16939233 #> 43 from y to x        5  0.00000000 0.03521190 10 -0.06737552  0.04246982 #> 44 from y to m        5  0.00000000 0.07939465 10 -0.14876407  0.08122120 #> 45 from y to y        5  0.03127301 0.03156738 10 -0.01516324  0.06407115 confint(boot, level = 0.95, type = \"bc\") #>         effect interval       2.5 %      97.5 % #> 1  from x to x        1  0.62468140  0.73907938 #> 2  from x to m        1  0.56536551  0.67429388 #> 3  from x to y        1 -0.10202748 -0.06829755 #> 4  from x to x        2  0.39951058  0.52028969 #> 5  from x to m        2  0.67647811  0.85955774 #> 6  from x to y        2  0.04398016  0.07411270 #> 7  from x to x        3  0.26069578  0.38535309 #> 8  from x to m        3  0.62967601  0.84959224 #> 9  from x to y        3  0.16394193  0.22551444 #> 10 from x to x        4  0.17104675  0.25509649 #> 11 from x to m        4  0.51859361  0.75390965 #> 12 from x to y        4  0.21407644  0.31176831 #> 13 from x to x        5  0.11350347  0.21483345 #> 14 from x to m        5  0.39882288  0.64434751 #> 15 from x to y        5  0.21646252  0.33343473 # }"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootIndirectCentral.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Sampling Distribution for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootIndirectCentral","title":"Bootstrap Sampling Distribution for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootIndirectCentral","text":"function generates bootstrap method sampling distribution indirect effect centrality specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootIndirectCentral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Sampling Distribution for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootIndirectCentral","text":"","code":"BootIndirectCentral(phi, phi_hat, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootIndirectCentral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Sampling Distribution for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootIndirectCentral","text":"phi List numeric matrices. element list bootstrap estimate drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi_hat Numeric matrix. estimated drift matrix (\\(\\hat{\\boldsymbol{\\Phi}}\\)) original data set. phi_hat row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootIndirectCentral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Sampling Distribution for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootIndirectCentral","text":"Returns object class ctmedboot list following elements: call Function call. args Function arguments. fun Function used (\"BootIndirectCentral\"). output list length length(delta_t). element output list following elements: est vector indirect effect centrality. thetahatstar matrix bootstrap indirect effect centrality.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootIndirectCentral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Sampling Distribution for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootIndirectCentral","text":"See IndirectCentral() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootIndirectCentral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Sampling Distribution for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootIndirectCentral","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/BootIndirectCentral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap Sampling Distribution for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootIndirectCentral","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootIndirectCentral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Sampling Distribution for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootIndirectCentral","text":"","code":"# \\donttest{ library(bootStateSpace) # prepare parameters ## number of individuals n <- 50 ## time points time <- 100 delta_t <- 0.10 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- matrix(   data = c(     1.0,     0.2,     0.2,     0.2,     1.0,     0.2,     0.2,     0.2,     1.0   ),   nrow = p ) sigma0_l <- t(chol(sigma0)) mu <- rep(x = 0, times = p) phi <- matrix(   data = c(     -0.357,     0.771,     -0.450,     0.0,     -0.511,     0.729,     0,     0,     -0.693   ),   nrow = p ) sigma <- matrix(   data = c(     0.24455556,     0.02201587,     -0.05004762,     0.02201587,     0.07067800,     0.01539456,     -0.05004762,     0.01539456,     0.07553061   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.2 * diag(k) theta_l <- t(chol(theta))  boot <- PBSSMOUFixed(   R = 10L, # use at least 1000 in actual research   path = getwd(),   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = NULL, # consider using multiple cores   seed = 42 ) phi_hat <- phi colnames(phi_hat) <- rownames(phi_hat) <- c(\"x\", \"m\", \"y\") phi <- extract(object = boot, what = \"phi\")  # Specific time interval ---------------------------------------------------- BootIndirectCentral(   phi = phi,   phi_hat = phi_hat,   delta_t = 1 ) #>  #> Indirect Effect Centrality #> type = pc #> $`1` #>   interval    est     se  R    2.5%  97.5% #> x        1 0.0000 0.0199 10 -0.0369 0.0226 #> m        1 0.1674 0.0140 10  0.1435 0.1824 #> y        1 0.0000 0.0128 10 -0.0216 0.0183 #>   # Range of time intervals --------------------------------------------------- boot <- BootIndirectCentral(   phi = phi,   phi_hat = phi_hat,   delta_t = 1:5 ) plot(boot)    plot(boot, type = \"bc\") # bias-corrected     # Methods ------------------------------------------------------------------- # BootIndirectCentral has a number of methods including # print, summary, confint, and plot print(boot) #>  #> Indirect Effect Centrality #> type = pc #> $`1` #>   interval    est     se  R    2.5%  97.5% #> x        1 0.0000 0.0199 10 -0.0369 0.0226 #> m        1 0.1674 0.0140 10  0.1435 0.1824 #> y        1 0.0000 0.0128 10 -0.0216 0.0183 #>  #> $`2` #>   interval    est     se  R    2.5%  97.5% #> x        2 0.0000 0.0367 10 -0.0675 0.0439 #> m        2 0.4008 0.0366 10  0.3386 0.4386 #> y        2 0.0000 0.0302 10 -0.0525 0.0405 #>  #> $`3` #>   interval    est     se  R    2.5%  97.5% #> x        3 0.0000 0.0399 10 -0.0712 0.0515 #> m        3 0.5423 0.0563 10  0.4484 0.6037 #> y        3 0.0000 0.0459 10 -0.0823 0.0539 #>  #> $`4` #>   interval    est     se  R    2.5%  97.5% #> x        4 0.0000 0.0379 10 -0.0666 0.0505 #> m        4 0.5823 0.0687 10  0.4716 0.6655 #> y        4 0.0000 0.0616 10 -0.1127 0.0649 #>  #> $`5` #>   interval    est     se  R    2.5%  97.5% #> x        5 0.0000 0.0362 10 -0.0607 0.0469 #> m        5 0.5521 0.0739 10  0.4323 0.6466 #> y        5 0.0000 0.0766 10 -0.1430 0.0738 #>  summary(boot) #>    variable interval           est         se  R        2.5%      97.5% #> 1         x        1  0.000000e+00 0.01985940 10 -0.03685723 0.02255445 #> 2         m        1  1.674155e-01 0.01404908 10  0.14353163 0.18235696 #> 3         y        1  0.000000e+00 0.01279882 10 -0.02161436 0.01829366 #> 4         x        2  0.000000e+00 0.03667352 10 -0.06749959 0.04393447 #> 5         m        2  4.008043e-01 0.03658546 10  0.33856442 0.43863339 #> 6         y        2  0.000000e+00 0.03015230 10 -0.05245187 0.04049064 #> 7         x        3  0.000000e+00 0.03992476 10 -0.07116880 0.05146955 #> 8         m        3  5.422564e-01 0.05629083 10  0.44836139 0.60367832 #> 9         y        3 -3.330669e-16 0.04593961 10 -0.08234621 0.05392738 #> 10        x        4  0.000000e+00 0.03791042 10 -0.06661947 0.05051417 #> 11        m        4  5.823179e-01 0.06869160 10  0.47156366 0.66550030 #> 12        y        4  0.000000e+00 0.06156756 10 -0.11273763 0.06492942 #> 13        x        5  0.000000e+00 0.03616999 10 -0.06069927 0.04685244 #> 14        m        5  5.520985e-01 0.07392980 10  0.43230658 0.64658607 #> 15        y        5  0.000000e+00 0.07657344 10 -0.14303981 0.07380935 confint(boot, level = 0.95) #>    variable interval       2.5 %     97.5 % #> 1         x        1 -0.03685723 0.02255445 #> 2         m        1  0.14353163 0.18235696 #> 3         y        1 -0.02161436 0.01829366 #> 4         x        2 -0.06749959 0.04393447 #> 5         m        2  0.33856442 0.43863339 #> 6         y        2 -0.05245187 0.04049064 #> 7         x        3 -0.07116880 0.05146955 #> 8         m        3  0.44836139 0.60367832 #> 9         y        3 -0.08234621 0.05392738 #> 10        x        4 -0.06661947 0.05051417 #> 11        m        4  0.47156366 0.66550030 #> 12        y        4 -0.11273763 0.06492942 #> 13        x        5 -0.06069927 0.04685244 #> 14        m        5  0.43230658 0.64658607 #> 15        y        5 -0.14303981 0.07380935 print(boot, type = \"bc\") # bias-corrected #>  #> Indirect Effect Centrality #> type = bc #> $`1` #>   interval    est     se  R    2.5%  97.5% #> x        1 0.0000 0.0199 10 -0.0369 0.0226 #> m        1 0.1674 0.0140 10  0.1445 0.1832 #> y        1 0.0000 0.0128 10 -0.0216 0.0183 #>  #> $`2` #>   interval    est     se  R    2.5%  97.5% #> x        2 0.0000 0.0367 10 -0.0675 0.0439 #> m        2 0.4008 0.0366 10  0.3392 0.4391 #> y        2 0.0000 0.0302 10 -0.0525 0.0405 #>  #> $`3` #>   interval    est     se  R    2.5%  97.5% #> x        3 0.0000 0.0399 10 -0.0712 0.0515 #> m        3 0.5423 0.0563 10  0.4432 0.5936 #> y        3 0.0000 0.0459 10 -0.0823 0.0539 #>  #> $`4` #>   interval    est     se  R    2.5%  97.5% #> x        4 0.0000 0.0379 10 -0.0585 0.0542 #> m        4 0.5823 0.0687 10  0.4586 0.6409 #> y        4 0.0000 0.0616 10 -0.1127 0.0649 #>  #> $`5` #>   interval    est     se  R    2.5%  97.5% #> x        5 0.0000 0.0362 10 -0.0607 0.0469 #> m        5 0.5521 0.0739 10  0.4167 0.6273 #> y        5 0.0000 0.0766 10 -0.1430 0.0738 #>  summary(boot, type = \"bc\") #>    variable interval           est         se  R        2.5%      97.5% #> 1         x        1  0.000000e+00 0.01985940 10 -0.03685723 0.02255445 #> 2         m        1  1.674155e-01 0.01404908 10  0.14445643 0.18324920 #> 3         y        1  0.000000e+00 0.01279882 10 -0.02161436 0.01829366 #> 4         x        2  0.000000e+00 0.03667352 10 -0.06749959 0.04393447 #> 5         m        2  4.008043e-01 0.03658546 10  0.33921616 0.43914357 #> 6         y        2  0.000000e+00 0.03015230 10 -0.05245187 0.04049064 #> 7         x        3  0.000000e+00 0.03992476 10 -0.07116880 0.05146955 #> 8         m        3  5.422564e-01 0.05629083 10  0.44315433 0.59361883 #> 9         y        3 -3.330669e-16 0.04593961 10 -0.08234621 0.05392738 #> 10        x        4  0.000000e+00 0.03791042 10 -0.05845978 0.05418397 #> 11        m        4  5.823179e-01 0.06869160 10  0.45858979 0.64093404 #> 12        y        4  0.000000e+00 0.06156756 10 -0.11273763 0.06492942 #> 13        x        5  0.000000e+00 0.03616999 10 -0.06069927 0.04685244 #> 14        m        5  5.520985e-01 0.07392980 10  0.41668699 0.62734953 #> 15        y        5  0.000000e+00 0.07657344 10 -0.14303981 0.07380935 confint(boot, level = 0.95, type = \"bc\") #>    variable interval       2.5 %     97.5 % #> 1         x        1 -0.03685723 0.02255445 #> 2         m        1  0.14445643 0.18324920 #> 3         y        1 -0.02161436 0.01829366 #> 4         x        2 -0.06749959 0.04393447 #> 5         m        2  0.33921616 0.43914357 #> 6         y        2 -0.05245187 0.04049064 #> 7         x        3 -0.07116880 0.05146955 #> 8         m        3  0.44315433 0.59361883 #> 9         y        3 -0.08234621 0.05392738 #> 10        x        4 -0.05845978 0.05418397 #> 11        m        4  0.45858979 0.64093404 #> 12        y        4 -0.11273763 0.06492942 #> 13        x        5 -0.06069927 0.04685244 #> 14        m        5  0.41668699 0.62734953 #> 15        y        5 -0.14303981 0.07380935 # }"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMed.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMed","title":"Bootstrap Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMed","text":"function generates bootstrap method sampling distribution total, direct indirect effects independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMed","text":"","code":"BootMed(phi, phi_hat, delta_t, from, to, med, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMed","text":"phi List numeric matrices. element list bootstrap estimate drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi_hat Numeric matrix. estimated drift matrix (\\(\\hat{\\boldsymbol{\\Phi}}\\)) original data set. phi_hat row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMed","text":"Returns object class ctmedboot list following elements: call Function call. args Function arguments. fun Function used (\"BootMed\"). output list length length(delta_t). element output list following elements: est vector total, direct, indirect effects. thetahatstar matrix bootstrap total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMed","text":"See Total(), Direct(), Indirect() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMed","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMed","text":"","code":"# \\donttest{ library(bootStateSpace) # prepare parameters ## number of individuals n <- 50 ## time points time <- 100 delta_t <- 0.10 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- matrix(   data = c(     1.0,     0.2,     0.2,     0.2,     1.0,     0.2,     0.2,     0.2,     1.0   ),   nrow = p ) sigma0_l <- t(chol(sigma0)) mu <- rep(x = 0, times = p) phi <- matrix(   data = c(     -0.357,     0.771,     -0.450,     0.0,     -0.511,     0.729,     0,     0,     -0.693   ),   nrow = p ) sigma <- matrix(   data = c(     0.24455556,     0.02201587,     -0.05004762,     0.02201587,     0.07067800,     0.01539456,     -0.05004762,     0.01539456,     0.07553061   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.2 * diag(k) theta_l <- t(chol(theta))  boot <- PBSSMOUFixed(   R = 10L, # use at least 1000 in actual research   path = getwd(),   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = NULL, # consider using multiple cores   seed = 42 ) phi_hat <- phi colnames(phi_hat) <- rownames(phi_hat) <- c(\"x\", \"m\", \"y\") phi <- extract(object = boot, what = \"phi\")  # Specific time interval ---------------------------------------------------- BootMed(   phi = phi,   phi_hat = phi_hat,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) #>  #> Total, Direct, and Indirect Effects #> type = pc #> $`1` #>          interval     est     se  R    2.5%   97.5% #> total           1 -0.1000 0.0135 10 -0.1302 -0.0931 #> direct          1 -0.2675 0.0235 10 -0.3051 -0.2387 #> indirect        1  0.1674 0.0140 10  0.1449  0.1826 #>   # Range of time intervals --------------------------------------------------- boot <- BootMed(   phi = phi,   phi_hat = phi_hat,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) plot(boot)    plot(boot, type = \"bc\") # bias-corrected     # Methods ------------------------------------------------------------------- # BootMed has a number of methods including # print, summary, confint, and plot print(boot) #>  #> Total, Direct, and Indirect Effects #> type = pc #> $`1` #>          interval     est     se  R    2.5%   97.5% #> total           1 -0.1000 0.0135 10 -0.1302 -0.0931 #> direct          1 -0.2675 0.0235 10 -0.3051 -0.2387 #> indirect        1  0.1674 0.0140 10  0.1449  0.1826 #>  #> $`2` #>          interval     est     se  R    2.5%   97.5% #> total           2  0.0799 0.0159 10  0.0406  0.0879 #> direct          2 -0.3209 0.0367 10 -0.3745 -0.2717 #> indirect        2  0.4008 0.0354 10  0.3411  0.4391 #>  #> $`3` #>          interval     est     se  R    2.5%   97.5% #> total           3  0.2508 0.0187 10  0.2164  0.2668 #> direct          3 -0.2914 0.0441 10 -0.3521 -0.2338 #> indirect        3  0.5423 0.0539 10  0.4524  0.6029 #>  #> $`4` #>          interval     est     se  R    2.5%   97.5% #> total           4  0.3449 0.0247 10  0.2959  0.3704 #> direct          4 -0.2374 0.0455 10 -0.2993 -0.1775 #> indirect        4  0.5823 0.0657 10  0.4754  0.6638 #>  #> $`5` #>          interval     est     se  R    2.5%   97.5% #> total           5  0.3693 0.0323 10  0.3088  0.4065 #> direct          5 -0.1828 0.0426 10 -0.2425 -0.1273 #> indirect        5  0.5521 0.0710 10  0.4361  0.6438 #>  summary(boot) #>      effect interval        est         se  R        2.5%       97.5% #> 1     total        1 -0.1000384 0.01352470 10 -0.13021799 -0.09314403 #> 2    direct        1 -0.2674539 0.02346151 10 -0.30506209 -0.23871488 #> 3  indirect        1  0.1674155 0.01401604 10  0.14494208  0.18255013 #> 4     total        2  0.0799008 0.01591422 10  0.04064558  0.08786268 #> 5    direct        2 -0.3209035 0.03672873 10 -0.37450426 -0.27173260 #> 6  indirect        2  0.4008043 0.03541841 10  0.34113848  0.43908776 #> 7     total        3  0.2508138 0.01873463 10  0.21635512  0.26676004 #> 8    direct        3 -0.2914426 0.04411314 10 -0.35208890 -0.23382113 #> 9  indirect        3  0.5422564 0.05386335 10  0.45235059  0.60293039 #> 10    total        4  0.3449279 0.02474916 10  0.29592103  0.37042957 #> 11   direct        4 -0.2373900 0.04547156 10 -0.29927095 -0.17754396 #> 12 indirect        4  0.5823179 0.06568261 10  0.47544857  0.66375150 #> 13    total        5  0.3692538 0.03226131 10  0.30878766  0.40647923 #> 14   direct        5 -0.1828447 0.04263584 10 -0.24246640 -0.12727444 #> 15 indirect        5  0.5520985 0.07097678 10  0.43606210  0.64375063 confint(boot, level = 0.95) #>      effect interval       2.5 %      97.5 % #> 1     total        1 -0.13021799 -0.09314403 #> 2    direct        1 -0.30506209 -0.23871488 #> 3  indirect        1  0.14494208  0.18255013 #> 4     total        2  0.04064558  0.08786268 #> 5    direct        2 -0.37450426 -0.27173260 #> 6  indirect        2  0.34113848  0.43908776 #> 7     total        3  0.21635512  0.26676004 #> 8    direct        3 -0.35208890 -0.23382113 #> 9  indirect        3  0.45235059  0.60293039 #> 10    total        4  0.29592103  0.37042957 #> 11   direct        4 -0.29927095 -0.17754396 #> 12 indirect        4  0.47544857  0.66375150 #> 13    total        5  0.30878766  0.40647923 #> 14   direct        5 -0.24246640 -0.12727444 #> 15 indirect        5  0.43606210  0.64375063 print(boot, type = \"bc\") # bias-corrected #>  #> Total, Direct, and Indirect Effects #> type = bc #> $`1` #>          interval     est     se  R    2.5%   97.5% #> total           1 -0.1000 0.0135 10 -0.1193 -0.0928 #> direct          1 -0.2675 0.0235 10 -0.2886 -0.2386 #> indirect        1  0.1674 0.0140 10  0.1449  0.1826 #>  #> $`2` #>          interval     est     se  R    2.5%   97.5% #> total           2  0.0799 0.0159 10  0.0682  0.0888 #> direct          2 -0.3209 0.0367 10 -0.3662 -0.2699 #> indirect        2  0.4008 0.0354 10  0.3440  0.4398 #>  #> $`3` #>          interval     est     se  R    2.5%   97.5% #> total           3  0.2508 0.0187 10  0.2205  0.2683 #> direct          3 -0.2914 0.0441 10 -0.3368 -0.2290 #> indirect        3  0.5423 0.0539 10  0.4451  0.5950 #>  #> $`4` #>          interval     est     se  R    2.5%   97.5% #> total           4  0.3449 0.0247 10  0.3148  0.3716 #> direct          4 -0.2374 0.0455 10 -0.2836 -0.1738 #> indirect        4  0.5823 0.0657 10  0.4605  0.6425 #>  #> $`5` #>          interval     est     se  R    2.5%   97.5% #> total           5  0.3693 0.0323 10  0.2942  0.3981 #> direct          5 -0.1828 0.0426 10 -0.2298 -0.1242 #> indirect        5  0.5521 0.0710 10  0.4184  0.6273 #>  summary(boot, type = \"bc\") #>      effect interval        est         se  R       2.5%       97.5% #> 1     total        1 -0.1000384 0.01352470 10 -0.1192826 -0.09276853 #> 2    direct        1 -0.2674539 0.02346151 10 -0.2885540 -0.23858310 #> 3  indirect        1  0.1674155 0.01401604 10  0.1449421  0.18255013 #> 4     total        2  0.0799008 0.01591422 10  0.0681527  0.08882083 #> 5    direct        2 -0.3209035 0.03672873 10 -0.3661783 -0.26985895 #> 6  indirect        2  0.4008043 0.03541841 10  0.3439750  0.43979905 #> 7     total        3  0.2508138 0.01873463 10  0.2204864  0.26829406 #> 8    direct        3 -0.2914426 0.04411314 10 -0.3368455 -0.22903334 #> 9  indirect        3  0.5422564 0.05386335 10  0.4450868  0.59498768 #> 10    total        4  0.3449279 0.02474916 10  0.3148344  0.37160448 #> 11   direct        4 -0.2373900 0.04547156 10 -0.2835681 -0.17381101 #> 12 indirect        4  0.5823179 0.06568261 10  0.4605166  0.64249685 #> 13    total        5  0.3692538 0.03226131 10  0.2941828  0.39806967 #> 14   direct        5 -0.1828447 0.04263584 10 -0.2297977 -0.12421649 #> 15 indirect        5  0.5520985 0.07097678 10  0.4183993  0.62725485 confint(boot, level = 0.95, type = \"bc\") #>      effect interval      2.5 %      97.5 % #> 1     total        1 -0.1192826 -0.09276853 #> 2    direct        1 -0.2885540 -0.23858310 #> 3  indirect        1  0.1449421  0.18255013 #> 4     total        2  0.0681527  0.08882083 #> 5    direct        2 -0.3661783 -0.26985895 #> 6  indirect        2  0.3439750  0.43979905 #> 7     total        3  0.2204864  0.26829406 #> 8    direct        3 -0.3368455 -0.22903334 #> 9  indirect        3  0.4450868  0.59498768 #> 10    total        4  0.3148344  0.37160448 #> 11   direct        4 -0.2835681 -0.17381101 #> 12 indirect        4  0.4605166  0.64249685 #> 13    total        5  0.2941828  0.39806967 #> 14   direct        5 -0.2297977 -0.12421649 #> 15 indirect        5  0.4183993  0.62725485 # }"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMedStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMedStd","title":"Bootstrap Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMedStd","text":"function generates bootstrap method sampling distribution standardized total, direct indirect effects independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMedStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMedStd","text":"","code":"BootMedStd(   phi,   sigma,   phi_hat,   sigma_hat,   delta_t,   from,   to,   med,   ncores = NULL,   tol = 0.01 )"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMedStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMedStd","text":"phi List numeric matrices. element list bootstrap estimate drift matrix (\\(\\boldsymbol{\\Phi}\\)). sigma List numeric matrices. element list bootstrap estimate process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). phi_hat Numeric matrix. estimated drift matrix (\\(\\hat{\\boldsymbol{\\Phi}}\\)) original data set. phi_hat row column names pertaining variables system. sigma_hat Numeric matrix. estimated process noise covariance matrix (\\(\\hat{\\boldsymbol{\\Sigma}}\\)) original data set. delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMedStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMedStd","text":"Returns object class ctmedboot list following elements: call Function call. args Function arguments. fun Function used (\"BootMedStd\"). output list length length(delta_t). element output list following elements: est vector standardized total, direct, indirect effects. thetahatstar matrix bootstrap standardized total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMedStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMedStd","text":"See TotalStd(), DirectStd(), IndirectStd() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMedStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMedStd","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMedStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMedStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootMedStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — BootMedStd","text":"","code":"# \\donttest{ library(bootStateSpace) # prepare parameters ## number of individuals n <- 50 ## time points time <- 100 delta_t <- 0.10 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- matrix(   data = c(     1.0,     0.2,     0.2,     0.2,     1.0,     0.2,     0.2,     0.2,     1.0   ),   nrow = p ) sigma0_l <- t(chol(sigma0)) mu <- rep(x = 0, times = p) phi <- matrix(   data = c(     -0.357,     0.771,     -0.450,     0.0,     -0.511,     0.729,     0,     0,     -0.693   ),   nrow = p ) sigma <- matrix(   data = c(     0.24455556,     0.02201587,     -0.05004762,     0.02201587,     0.07067800,     0.01539456,     -0.05004762,     0.01539456,     0.07553061   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.2 * diag(k) theta_l <- t(chol(theta))  boot <- PBSSMOUFixed(   R = 10L, # use at least 1000 in actual research   path = getwd(),   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = NULL, # consider using multiple cores   seed = 42 ) phi_hat <- phi colnames(phi_hat) <- rownames(phi_hat) <- c(\"x\", \"m\", \"y\") sigma_hat <- sigma phi <- extract(object = boot, what = \"phi\") sigma <- extract(object = boot, what = \"sigma\")  # Specific time interval ---------------------------------------------------- BootMedStd(   phi = phi,   sigma = sigma,   phi_hat = phi_hat,   sigma_hat = sigma_hat,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) #>  #> Total, Direct, and Indirect Effects #> type = pc #> $`1` #>          interval     est     se  R    2.5%   97.5% #> total           1 -0.0821 0.0127 10 -0.1087 -0.0712 #> direct          1 -0.2195 0.0238 10 -0.2562 -0.1826 #> indirect        1  0.1374 0.0140 10  0.1113  0.1533 #>   # Range of time intervals --------------------------------------------------- boot <- BootMedStd(   phi = phi,   sigma = sigma,   phi_hat = phi_hat,   sigma_hat = sigma_hat,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) plot(boot)    plot(boot, type = \"bc\") # bias-corrected     # Methods ------------------------------------------------------------------- # BootMedStd has a number of methods including # print, summary, confint, and plot print(boot) #>  #> Total, Direct, and Indirect Effects #> type = pc #> $`1` #>          interval     est     se  R    2.5%   97.5% #> total           1 -0.0821 0.0127 10 -0.1087 -0.0712 #> direct          1 -0.2195 0.0238 10 -0.2562 -0.1826 #> indirect        1  0.1374 0.0140 10  0.1113  0.1533 #>  #> $`2` #>          interval     est     se  R    2.5%   97.5% #> total           2  0.0656 0.0135 10  0.0341  0.0733 #> direct          2 -0.2633 0.0361 10 -0.3144 -0.2081 #> indirect        2  0.3289 0.0367 10  0.2610  0.3721 #>  #> $`3` #>          interval     est     se  R    2.5%   97.5% #> total           3  0.2058 0.0209 10  0.1639  0.2255 #> direct          3 -0.2391 0.0416 10 -0.2947 -0.1773 #> indirect        3  0.4449 0.0561 10  0.3467  0.5131 #>  #> $`4` #>          interval     est     se  R    2.5%   97.5% #> total           4  0.2830 0.0305 10  0.2245  0.3184 #> direct          4 -0.1948 0.0417 10 -0.2500 -0.1346 #> indirect        4  0.4778 0.0678 10  0.3609  0.5626 #>  #> $`5` #>          interval    est     se  R    2.5%   97.5% #> total           5  0.303 0.0380 10  0.2333  0.3487 #> direct          5 -0.150 0.0382 10 -0.2022 -0.0965 #> indirect        5  0.453 0.0721 10  0.3313  0.5440 #>  summary(boot) #>      effect interval         est         se  R        2.5%       97.5% #> 1     total        1 -0.08208640 0.01268570 10 -0.10867279 -0.07119273 #> 2    direct        1 -0.21945905 0.02377334 10 -0.25618553 -0.18256794 #> 3  indirect        1  0.13737265 0.01398740 10  0.11129641  0.15327633 #> 4     total        2  0.06556253 0.01345026 10  0.03412108  0.07329555 #> 5    direct        2 -0.26331708 0.03608731 10 -0.31435724 -0.20807029 #> 6  indirect        2  0.32887961 0.03670639 10  0.26103324  0.37206472 #> 7     total        3  0.20580506 0.02085928 10  0.16394193  0.22551444 #> 8    direct        3 -0.23914297 0.04161858 10 -0.29474463 -0.17726904 #> 9  indirect        3  0.44494803 0.05609548 10  0.34672250  0.51305228 #> 10    total        4  0.28303029 0.03049804 10  0.22448338  0.31839234 #> 11   direct        4 -0.19479017 0.04165486 10 -0.25000806 -0.13461084 #> 12 indirect        4  0.47782046 0.06781477 10  0.36086930  0.56260137 #> 13    total        5  0.30299087 0.03803323 10  0.23334539  0.34871687 #> 14   direct        5 -0.15003307 0.03824713 10 -0.20215777 -0.09652769 #> 15 indirect        5  0.45302394 0.07211873 10  0.33128996  0.54399145 confint(boot, level = 0.95) #>      effect interval       2.5 %      97.5 % #> 1     total        1 -0.10867279 -0.07119273 #> 2    direct        1 -0.25618553 -0.18256794 #> 3  indirect        1  0.11129641  0.15327633 #> 4     total        2  0.03412108  0.07329555 #> 5    direct        2 -0.31435724 -0.20807029 #> 6  indirect        2  0.26103324  0.37206472 #> 7     total        3  0.16394193  0.22551444 #> 8    direct        3 -0.29474463 -0.17726904 #> 9  indirect        3  0.34672250  0.51305228 #> 10    total        4  0.22448338  0.31839234 #> 11   direct        4 -0.25000806 -0.13461084 #> 12 indirect        4  0.36086930  0.56260137 #> 13    total        5  0.23334539  0.34871687 #> 14   direct        5 -0.20215777 -0.09652769 #> 15 indirect        5  0.33128996  0.54399145 print(boot, type = \"bc\") # bias-corrected #>  #> Total, Direct, and Indirect Effects #> type = bc #> $`1` #>          interval     est     se  R    2.5%   97.5% #> total           1 -0.0821 0.0127 10 -0.1020 -0.0683 #> direct          1 -0.2195 0.0238 10 -0.2452 -0.1757 #> indirect        1  0.1374 0.0140 10  0.1113  0.1533 #>  #> $`2` #>          interval     est     se  R    2.5%   97.5% #> total           2  0.0656 0.0135 10  0.0440  0.0741 #> direct          2 -0.2633 0.0361 10 -0.3052 -0.1983 #> indirect        2  0.3289 0.0367 10  0.2527  0.3695 #>  #> $`3` #>          interval     est     se  R    2.5%   97.5% #> total           3  0.2058 0.0209 10  0.1639  0.2255 #> direct          3 -0.2391 0.0416 10 -0.2872 -0.1685 #> indirect        3  0.4449 0.0561 10  0.3277  0.4990 #>  #> $`4` #>          interval     est     se  R    2.5%   97.5% #> total           4  0.2830 0.0305 10  0.2141  0.3118 #> direct          4 -0.1948 0.0417 10 -0.2421 -0.1279 #> indirect        4  0.4778 0.0678 10  0.3389  0.5415 #>  #> $`5` #>          interval    est     se  R    2.5%   97.5% #> total           5  0.303 0.0380 10  0.2165  0.3334 #> direct          5 -0.150 0.0382 10 -0.1928 -0.0914 #> indirect        5  0.453 0.0721 10  0.3068  0.5106 #>  summary(boot, type = \"bc\") #>      effect interval         est         se  R        2.5%       97.5% #> 1     total        1 -0.08208640 0.01268570 10 -0.10202748 -0.06829755 #> 2    direct        1 -0.21945905 0.02377334 10 -0.24516549 -0.17565292 #> 3  indirect        1  0.13737265 0.01398740 10  0.11129641  0.15327633 #> 4     total        2  0.06556253 0.01345026 10  0.04398016  0.07411270 #> 5    direct        2 -0.26331708 0.03608731 10 -0.30522709 -0.19827816 #> 6  indirect        2  0.32887961 0.03670639 10  0.25267069  0.36945859 #> 7     total        3  0.20580506 0.02085928 10  0.16394193  0.22551444 #> 8    direct        3 -0.23914297 0.04161858 10 -0.28723448 -0.16854780 #> 9  indirect        3  0.44494803 0.05609548 10  0.32773921  0.49897454 #> 10    total        4  0.28303029 0.03049804 10  0.21407644  0.31176831 #> 11   direct        4 -0.19479017 0.04165486 10 -0.24209974 -0.12790969 #> 12 indirect        4  0.47782046 0.06781477 10  0.33892674  0.54150711 #> 13    total        5  0.30299087 0.03803323 10  0.21646252  0.33343473 #> 14   direct        5 -0.15003307 0.03824713 10 -0.19278021 -0.09141454 #> 15 indirect        5  0.45302394 0.07211873 10  0.30679185  0.51062083 confint(boot, level = 0.95, type = \"bc\") #>      effect interval       2.5 %      97.5 % #> 1     total        1 -0.10202748 -0.06829755 #> 2    direct        1 -0.24516549 -0.17565292 #> 3  indirect        1  0.11129641  0.15327633 #> 4     total        2  0.04398016  0.07411270 #> 5    direct        2 -0.30522709 -0.19827816 #> 6  indirect        2  0.25267069  0.36945859 #> 7     total        3  0.16394193  0.22551444 #> 8    direct        3 -0.28723448 -0.16854780 #> 9  indirect        3  0.32773921  0.49897454 #> 10    total        4  0.21407644  0.31176831 #> 11   direct        4 -0.24209974 -0.12790969 #> 12 indirect        4  0.33892674  0.54150711 #> 13    total        5  0.21646252  0.33343473 #> 14   direct        5 -0.19278021 -0.09141454 #> 15 indirect        5  0.30679185  0.51062083 # }"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootTotalCentral.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Sampling Distribution for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootTotalCentral","title":"Bootstrap Sampling Distribution for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootTotalCentral","text":"function generates bootstrap method sampling distribution total effect centrality specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootTotalCentral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Sampling Distribution for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootTotalCentral","text":"","code":"BootTotalCentral(phi, phi_hat, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/BootTotalCentral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Sampling Distribution for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootTotalCentral","text":"phi List numeric matrices. element list bootstrap estimate drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi_hat Numeric matrix. estimated drift matrix (\\(\\hat{\\boldsymbol{\\Phi}}\\)) original data set. phi_hat row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootTotalCentral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Sampling Distribution for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootTotalCentral","text":"Returns object class ctmedboot list following elements: call Function call. args Function arguments. fun Function used (\"BootTotalCentral\"). output list length length(delta_t). element output list following elements: est vector total effect centrality. thetahatstar matrix bootstrap total effect centrality.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootTotalCentral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Sampling Distribution for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootTotalCentral","text":"See TotalCentral() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootTotalCentral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Sampling Distribution for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootTotalCentral","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/BootTotalCentral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap Sampling Distribution for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootTotalCentral","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/BootTotalCentral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Sampling Distribution for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — BootTotalCentral","text":"","code":"# \\donttest{ library(bootStateSpace) # prepare parameters ## number of individuals n <- 50 ## time points time <- 100 delta_t <- 0.10 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- matrix(   data = c(     1.0,     0.2,     0.2,     0.2,     1.0,     0.2,     0.2,     0.2,     1.0   ),   nrow = p ) sigma0_l <- t(chol(sigma0)) mu <- rep(x = 0, times = p) phi <- matrix(   data = c(     -0.357,     0.771,     -0.450,     0.0,     -0.511,     0.729,     0,     0,     -0.693   ),   nrow = p ) sigma <- matrix(   data = c(     0.24455556,     0.02201587,     -0.05004762,     0.02201587,     0.07067800,     0.01539456,     -0.05004762,     0.01539456,     0.07553061   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.2 * diag(k) theta_l <- t(chol(theta))  boot <- PBSSMOUFixed(   R = 10L, # use at least 1000 in actual research   path = getwd(),   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = NULL, # consider using multiple cores   seed = 42 ) phi_hat <- phi colnames(phi_hat) <- rownames(phi_hat) <- c(\"x\", \"m\", \"y\") phi <- extract(object = boot, what = \"phi\")  # Specific time interval ---------------------------------------------------- BootTotalCentral(   phi = phi,   phi_hat = phi_hat,   delta_t = 1 ) #>  #> Total Effect Centrality #> type = pc #> $`1` #>   interval    est     se  R    2.5%  97.5% #> x        1 0.4000 0.0230 10  0.3655 0.4264 #> m        1 0.3998 0.0477 10  0.3466 0.4918 #> y        1 0.0000 0.0589 10 -0.1013 0.0613 #>   # Range of time intervals --------------------------------------------------- boot <- BootTotalCentral(   phi = phi,   phi_hat = phi_hat,   delta_t = 1:5 ) plot(boot)    plot(boot, type = \"bc\") # bias-corrected     # Methods ------------------------------------------------------------------- # BootTotalCentral has a number of methods including # print, summary, confint, and plot print(boot) #>  #> Total Effect Centrality #> type = pc #> $`1` #>   interval    est     se  R    2.5%  97.5% #> x        1 0.4000 0.0230 10  0.3655 0.4264 #> m        1 0.3998 0.0477 10  0.3466 0.4918 #> y        1 0.0000 0.0589 10 -0.1013 0.0613 #>  #> $`2` #>   interval    est     se  R    2.5%  97.5% #> x        2 0.7298 0.0394 10  0.6503 0.7728 #> m        2 0.4398 0.0540 10  0.3823 0.5412 #> y        2 0.0000 0.0874 10 -0.1553 0.0890 #>  #> $`3` #>   interval    est     se  R    2.5%  97.5% #> x        3 0.8855 0.0584 10  0.7695 0.9410 #> m        3 0.3638 0.0556 10  0.3091 0.4702 #> y        3 0.0000 0.0963 10 -0.1756 0.1031 #>  #> $`4` #>   interval    est     se  R    2.5%  97.5% #> x        4 0.8970 0.0772 10  0.7551 0.9984 #> m        4 0.2683 0.0552 10  0.2212 0.3732 #> y        4 0.0000 0.0933 10 -0.1740 0.1013 #>  #> $`5` #>   interval    est     se  R    2.5%  97.5% #> x        5 0.8204 0.0922 10  0.6677 0.9650 #> m        5 0.1859 0.0522 10  0.1407 0.2809 #> y        5 0.0000 0.0837 10 -0.1596 0.0905 #>  summary(boot) #>    variable interval       est         se  R       2.5%      97.5% #> 1         x        1 0.3999957 0.02296759 10  0.3654829 0.42636204 #> 2         m        1 0.3998356 0.04772231 10  0.3465982 0.49180449 #> 3         y        1 0.0000000 0.05893594 10 -0.1013119 0.06128272 #> 4         x        2 0.7297791 0.03935772 10  0.6503308 0.77278373 #> 5         m        2 0.4398068 0.05403270 10  0.3823457 0.54118215 #> 6         y        2 0.0000000 0.08740366 10 -0.1553369 0.08899969 #> 7         x        3 0.8855303 0.05837274 10  0.7695357 0.94098257 #> 8         m        3 0.3638264 0.05562599 10  0.3091364 0.47021113 #> 9         y        3 0.0000000 0.09632624 10 -0.1755898 0.10308311 #> 10        x        4 0.8970359 0.07715246 10  0.7551021 0.99841198 #> 11        m        4 0.2682593 0.05517596 10  0.2211691 0.37320330 #> 12        y        4 0.0000000 0.09327282 10 -0.1739915 0.10128918 #> 13        x        5 0.8203630 0.09219479 10  0.6677285 0.96497207 #> 14        m        5 0.1859320 0.05222735 10  0.1407348 0.28089102 #> 15        y        5 0.0000000 0.08374104 10 -0.1596274 0.09052208 confint(boot, level = 0.95) #>    variable interval      2.5 %     97.5 % #> 1         x        1  0.3654829 0.42636204 #> 2         m        1  0.3465982 0.49180449 #> 3         y        1 -0.1013119 0.06128272 #> 4         x        2  0.6503308 0.77278373 #> 5         m        2  0.3823457 0.54118215 #> 6         y        2 -0.1553369 0.08899969 #> 7         x        3  0.7695357 0.94098257 #> 8         m        3  0.3091364 0.47021113 #> 9         y        3 -0.1755898 0.10308311 #> 10        x        4  0.7551021 0.99841198 #> 11        m        4  0.2211691 0.37320330 #> 12        y        4 -0.1739915 0.10128918 #> 13        x        5  0.6677285 0.96497207 #> 14        m        5  0.1407348 0.28089102 #> 15        y        5 -0.1596274 0.09052208 print(boot, type = \"bc\") # bias-corrected #>  #> Total Effect Centrality #> type = bc #> $`1` #>   interval    est     se  R    2.5%  97.5% #> x        1 0.4000 0.0230 10  0.3713 0.4282 #> m        1 0.3998 0.0477 10  0.3466 0.4918 #> y        1 0.0000 0.0589 10 -0.1013 0.0613 #>  #> $`2` #>   interval    est     se  R    2.5%  97.5% #> x        2 0.7298 0.0394 10  0.6881 0.7794 #> m        2 0.4398 0.0540 10  0.3768 0.5391 #> y        2 0.0000 0.0874 10 -0.1553 0.0890 #>  #> $`3` #>   interval    est     se  R    2.5%  97.5% #> x        3 0.8855 0.0584 10  0.7534 0.9384 #> m        3 0.3638 0.0556 10  0.3056 0.4642 #> y        3 0.0000 0.0963 10 -0.1756 0.1031 #>  #> $`4` #>   interval    est     se  R    2.5%  97.5% #> x        4 0.8970 0.0772 10  0.7251 0.9572 #> m        4 0.2683 0.0552 10  0.2191 0.3633 #> y        4 0.0000 0.0933 10 -0.1740 0.1013 #>  #> $`5` #>   interval    est     se  R    2.5%  97.5% #> x        5 0.8204 0.0922 10  0.6313 0.8943 #> m        5 0.1859 0.0522 10  0.1407 0.2809 #> y        5 0.0000 0.0837 10 -0.1596 0.0905 #>  summary(boot, type = \"bc\") #>    variable interval       est         se  R       2.5%      97.5% #> 1         x        1 0.3999957 0.02296759 10  0.3712508 0.42824588 #> 2         m        1 0.3998356 0.04772231 10  0.3465982 0.49180449 #> 3         y        1 0.0000000 0.05893594 10 -0.1013119 0.06128272 #> 4         x        2 0.7297791 0.03935772 10  0.6881137 0.77938396 #> 5         m        2 0.4398068 0.05403270 10  0.3768249 0.53905183 #> 6         y        2 0.0000000 0.08740366 10 -0.1553369 0.08899969 #> 7         x        3 0.8855303 0.05837274 10  0.7534480 0.93837943 #> 8         m        3 0.3638264 0.05562599 10  0.3055505 0.46424140 #> 9         y        3 0.0000000 0.09632624 10 -0.1755898 0.10308311 #> 10        x        4 0.8970359 0.07715246 10  0.7250552 0.95717611 #> 11        m        4 0.2682593 0.05517596 10  0.2191289 0.36332567 #> 12        y        4 0.0000000 0.09327282 10 -0.1739915 0.10128918 #> 13        x        5 0.8203630 0.09219479 10  0.6312856 0.89432498 #> 14        m        5 0.1859320 0.05222735 10  0.1407348 0.28089102 #> 15        y        5 0.0000000 0.08374104 10 -0.1596274 0.09052208 confint(boot, level = 0.95, type = \"bc\") #>    variable interval      2.5 %     97.5 % #> 1         x        1  0.3712508 0.42824588 #> 2         m        1  0.3465982 0.49180449 #> 3         y        1 -0.1013119 0.06128272 #> 4         x        2  0.6881137 0.77938396 #> 5         m        2  0.3768249 0.53905183 #> 6         y        2 -0.1553369 0.08899969 #> 7         x        3  0.7534480 0.93837943 #> 8         m        3  0.3055505 0.46424140 #> 9         y        3 -0.1755898 0.10308311 #> 10        x        4  0.7250552 0.95717611 #> 11        m        4  0.2191289 0.36332567 #> 12        y        4 -0.1739915 0.10128918 #> 13        x        5  0.6312856 0.89432498 #> 14        m        5  0.1407348 0.28089102 #> 15        y        5 -0.1596274 0.09052208 # }"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBeta","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBeta","text":"function computes delta method sampling variance-covariance matrix elements matrix lagged coefficients \\(\\boldsymbol{\\beta}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBeta","text":"","code":"DeltaBeta(phi, vcov_phi_vec, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBeta","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. vcov_phi_vec Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\). delta_t Vector positive numbers. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores length delta_t long. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBeta","text":"Returns object class ctmeddelta list following elements: call Function call. args Function arguments. fun Function used (\"DeltaBeta\"). output list length equal length delta_t. element output list following elements: delta_t Time interval. jacobian Jacobian matrix. est Estimated elements matrix lagged coefficients. vcov Sampling variance-covariance matrix estimated elements matrix lagged coefficients.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBeta","text":"See Total().","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBeta.html","id":"delta-method","dir":"Reference","previous_headings":"","what":"Delta Method","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBeta","text":"Let \\(\\boldsymbol{\\theta}\\) \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\). multivariate central limit theory, function \\(\\mathbf{g}\\) using \\(\\hat{\\boldsymbol{\\theta}}\\) input can expressed : $$   \t\\sqrt{n}   \t\\left(   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t-   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t\\right)   \t\\xrightarrow[]{   \t\t\\mathrm{D}   \t}   \t\\mathcal{N}   \t\\left(   \t0,   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ \\(\\mathbf{J}\\) matrix first-order derivatives function \\(\\mathbf{g}\\) respect elements \\(\\boldsymbol{\\theta}\\) \\(\\boldsymbol{\\Gamma}\\) asymptotic variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\). former, can derive distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) follows: $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \tn^{-1}   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ uncertainty associated estimator \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , therefore, given \\(n^{-1} \\mathbf{J} \\boldsymbol{\\Gamma} \\mathbf{J}^{\\prime}\\) . \\(\\boldsymbol{\\Gamma}\\) unknown, substitution, can use estimated sampling variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\), , \\(\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) \\(n^{-1} \\boldsymbol{\\Gamma}\\). Therefore, sampling variance-covariance matrix \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) given $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \t\\mathbf{J}   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\mathbf{J}^{\\prime}   \t\\right) .   $$","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBeta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBeta","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBeta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBeta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBeta","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- DeltaBeta(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1 ) #>  #> Elements of the matrix of lagged coefficients #>  #> $`1` #>             interval     est     se       z      p    2.5%   97.5% #> from x to x        1  0.6998 0.0471 14.8688 0.0000  0.6075  0.7920 #> from x to m        1  0.5000 0.0352 14.1965 0.0000  0.4310  0.5691 #> from x to y        1 -0.1000 0.0306 -3.2703 0.0011 -0.1600 -0.0401 #> from m to x        1  0.0000 0.0435  0.0000 1.0000 -0.0852  0.0852 #> from m to m        1  0.5999 0.0326 18.3826 0.0000  0.5359  0.6639 #> from m to y        1  0.3998 0.0284 14.0593 0.0000  0.3441  0.4556 #> from y to x        1  0.0000 0.0418  0.0000 1.0000 -0.0820  0.0820 #> from y to m        1  0.0000 0.0311  0.0000 1.0000 -0.0609  0.0609 #> from y to y        1  0.5001 0.0274 18.2776 0.0000  0.4464  0.5537 #>   # Range of time intervals --------------------------------------------------- delta <- DeltaBeta(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5 ) plot(delta)           # Methods ------------------------------------------------------------------- # DeltaBeta has a number of methods including # print, summary, confint, and plot print(delta) #>  #> Elements of the matrix of lagged coefficients #>  #> $`1` #>             interval     est     se       z      p    2.5%   97.5% #> from x to x        1  0.6998 0.0471 14.8688 0.0000  0.6075  0.7920 #> from x to m        1  0.5000 0.0352 14.1965 0.0000  0.4310  0.5691 #> from x to y        1 -0.1000 0.0306 -3.2703 0.0011 -0.1600 -0.0401 #> from m to x        1  0.0000 0.0435  0.0000 1.0000 -0.0852  0.0852 #> from m to m        1  0.5999 0.0326 18.3826 0.0000  0.5359  0.6639 #> from m to y        1  0.3998 0.0284 14.0593 0.0000  0.3441  0.4556 #> from y to x        1  0.0000 0.0418  0.0000 1.0000 -0.0820  0.0820 #> from y to m        1  0.0000 0.0311  0.0000 1.0000 -0.0609  0.0609 #> from y to y        1  0.5001 0.0274 18.2776 0.0000  0.4464  0.5537 #>  #> $`2` #>             interval    est     se       z      p    2.5%  97.5% #> from x to x        2 0.4897 0.0548  8.9377 0.0000  0.3823 0.5971 #> from x to m        2 0.6499 0.0537 12.1023 0.0000  0.5446 0.7551 #> from x to y        2 0.0799 0.0342  2.3337 0.0196  0.0128 0.1470 #> from m to x        2 0.0000 0.0513  0.0000 1.0000 -0.1006 0.1006 #> from m to m        2 0.3599 0.0504  7.1405 0.0000  0.2611 0.4587 #> from m to y        2 0.4398 0.0324 13.5818 0.0000  0.3763 0.5033 #> from y to x        2 0.0000 0.0502  0.0000 1.0000 -0.0983 0.0983 #> from y to m        2 0.0000 0.0493  0.0000 1.0000 -0.0967 0.0967 #> from y to y        2 0.2501 0.0318  7.8668 0.0000  0.1878 0.3124 #>  #> $`3` #>             interval    est     se       z     p    2.5%  97.5% #> from x to x        3 0.3427 0.0546  6.2779 0e+00  0.2357 0.4496 #> from x to m        3 0.6347 0.0653  9.7126 0e+00  0.5066 0.7628 #> from x to y        3 0.2508 0.0353  7.1106 0e+00  0.1817 0.3199 #> from m to x        3 0.0000 0.0498  0.0000 1e+00 -0.0976 0.0976 #> from m to m        3 0.2159 0.0609  3.5452 4e-04  0.0965 0.3352 #> from m to y        3 0.3638 0.0325 11.1960 0e+00  0.3001 0.4275 #> from y to x        3 0.0000 0.0456  0.0000 1e+00 -0.0893 0.0893 #> from y to m        3 0.0000 0.0587  0.0000 1e+00 -0.1151 0.1151 #> from y to y        3 0.1251 0.0299  4.1799 0e+00  0.0664 0.1837 #>  #> $`4` #>             interval    est     se      z      p    2.5%  97.5% #> from x to x        4 0.2398 0.0536 4.4747 0.0000  0.1348 0.3448 #> from x to m        4 0.5521 0.0717 7.7014 0.0000  0.4116 0.6926 #> from x to y        4 0.3449 0.0394 8.7512 0.0000  0.2677 0.4222 #> from m to x        4 0.0000 0.0456 0.0000 1.0000 -0.0894 0.0894 #> from m to m        4 0.1295 0.0650 1.9937 0.0462  0.0022 0.2568 #> from m to y        4 0.2683 0.0350 7.6627 0.0000  0.1996 0.3369 #> from y to x        4 0.0000 0.0371 0.0000 1.0000 -0.0727 0.0727 #> from y to m        4 0.0000 0.0599 0.0000 1.0000 -0.1174 0.1174 #> from y to y        4 0.0625 0.0310 2.0161 0.0438  0.0017 0.1233 #>  #> $`5` #>             interval    est     se      z      p    2.5%  97.5% #> from x to x        5 0.1678 0.0527 3.1821 0.0015  0.0644 0.2712 #> from x to m        5 0.4511 0.0749 6.0254 0.0000  0.3044 0.5978 #> from x to y        5 0.3693 0.0441 8.3649 0.0000  0.2827 0.4558 #> from m to x        5 0.0000 0.0401 0.0000 1.0000 -0.0786 0.0786 #> from m to m        5 0.0777 0.0642 1.2092 0.2266 -0.0482 0.2036 #> from m to y        5 0.1859 0.0381 4.8780 0.0000  0.1112 0.2606 #> from y to x        5 0.0000 0.0286 0.0000 1.0000 -0.0560 0.0560 #> from y to m        5 0.0000 0.0554 0.0000 1.0000 -0.1086 0.1086 #> from y to y        5 0.0313 0.0341 0.9180 0.3586 -0.0355 0.0980 #>  summary(delta) #>         effect interval         est         se         z            p #> 1  from x to x        1  0.69977250 0.04706304 14.868833 5.252120e-50 #> 2  from x to m        1  0.50003412 0.03522246 14.196456 9.636357e-46 #> 3  from x to y        1 -0.10003837 0.03059043 -3.270250 1.074523e-03 #> 4  from m to x        1  0.00000000 0.04346035  0.000000 1.000000e+00 #> 5  from m to m        1  0.59989538 0.03263394 18.382559 1.812145e-75 #> 6  from m to y        1  0.39983562 0.02843922 14.059305 6.754616e-45 #> 7  from y to x        1  0.00000000 0.04181566  0.000000 1.000000e+00 #> 8  from y to m        1  0.00000000 0.03106890  0.000000 1.000000e+00 #> 9  from y to y        1  0.50007360 0.02735991 18.277603 1.247910e-74 #> 10 from x to x        2  0.48968155 0.05478810  8.937735 3.972267e-19 #> 11 from x to m        2  0.64987829 0.05369863 12.102325 1.026621e-33 #> 12 from x to y        2  0.07990080 0.03423772  2.333707 1.961107e-02 #> 13 from m to x        2  0.00000000 0.05133834  0.000000 1.000000e+00 #> 14 from m to m        2  0.35987447 0.05039929  7.140467 9.301408e-13 #> 15 from m to y        2  0.43980678 0.03238198 13.581835 5.132412e-42 #> 16 from y to x        2  0.00000000 0.05017236  0.000000 1.000000e+00 #> 17 from y to m        2  0.00000000 0.04933966  0.000000 1.000000e+00 #> 18 from y to y        2  0.25007360 0.03178830  7.866843 3.637020e-15 #> 19 from x to x        3  0.34266568 0.05458246  6.277945 3.430781e-10 #> 20 from x to m        3  0.63471647 0.06534988  9.712588 2.664838e-22 #> 21 from x to y        3  0.25081383 0.03527306  7.110634 1.155108e-12 #> 22 from m to x        3  0.00000000 0.04982130  0.000000 1.000000e+00 #> 23 from m to m        3  0.21588703 0.06089478  3.545247 3.922457e-04 #> 24 from m to y        3  0.36382639 0.03249624 11.195955 4.267787e-29 #> 25 from y to x        3  0.00000000 0.04556623  0.000000 1.000000e+00 #> 26 from y to m        3  0.00000000 0.05873679  0.000000 1.000000e+00 #> 27 from y to y        3  0.12505520 0.02991799  4.179933 2.915945e-05 #> 28 from x to x        4  0.23978802 0.05358737  4.474711 7.651461e-06 #> 29 from x to m        4  0.55210801 0.07168886  7.701448 1.345328e-14 #> 30 from x to y        4  0.34492791 0.03941513  8.751155 2.111808e-18 #> 31 from m to x        4  0.00000000 0.04561260  0.000000 1.000000e+00 #> 32 from m to m        4  0.12950963 0.06495896  1.993715 4.618325e-02 #> 33 from m to y        4  0.26825930 0.03500840  7.662712 1.820476e-14 #> 34 from y to x        4  0.00000000 0.03711526  0.000000 1.000000e+00 #> 35 from y to m        4  0.00000000 0.05991073  0.000000 1.000000e+00 #> 36 from y to y        4  0.06253681 0.03101888  2.016088 4.379072e-02 #> 37 from x to x        5  0.16779706 0.05273210  3.182067 1.462281e-03 #> 38 from x to m        5  0.45110924 0.07486738  6.025445 1.686454e-09 #> 39 from x to y        5  0.36925379 0.04414319  8.364909 6.016140e-17 #> 40 from m to x        5  0.00000000 0.04011151  0.000000 1.000000e+00 #> 41 from m to m        5  0.07769223 0.06424869  1.209242 2.265698e-01 #> 42 from m to y        5  0.18593196 0.03811640  4.878004 1.071646e-06 #> 43 from y to x        5  0.00000000 0.02858726  0.000000 1.000000e+00 #> 44 from y to m        5  0.00000000 0.05541699  0.000000 1.000000e+00 #> 45 from y to y        5  0.03127301 0.03406623  0.918006 3.586157e-01 #>            2.5%       97.5% #> 1   0.607530630  0.79201437 #> 2   0.430999370  0.56906888 #> 3  -0.159994521 -0.04008223 #> 4  -0.085180722  0.08518072 #> 5   0.535934031  0.66385674 #> 6   0.344095782  0.45557546 #> 7  -0.081957196  0.08195720 #> 8  -0.060893928  0.06089393 #> 9   0.446449155  0.55369804 #> 10  0.382298845  0.59706425 #> 11  0.544630905  0.75512568 #> 12  0.012796105  0.14700550 #> 13 -0.100621301  0.10062130 #> 14  0.261093683  0.45865526 #> 15  0.376339257  0.50327430 #> 16 -0.098336021  0.09833602 #> 17 -0.096703960  0.09670396 #> 18  0.187769671  0.31237753 #> 19  0.235686018  0.44964534 #> 20  0.506633055  0.76279989 #> 21  0.181679901  0.31994775 #> 22 -0.097647963  0.09764796 #> 23  0.096535451  0.33523862 #> 24  0.300134940  0.42751784 #> 25 -0.089308174  0.08930817 #> 26 -0.115121991  0.11512199 #> 27  0.066417023  0.18369339 #> 28  0.134758701  0.34481734 #> 29  0.411600436  0.69261559 #> 30  0.267675671  0.42218015 #> 31 -0.089399053  0.08939905 #> 32  0.002192406  0.25682686 #> 33  0.199644090  0.33687451 #> 34 -0.072744578  0.07274458 #> 35 -0.117422876  0.11742288 #> 36  0.001740919  0.12333269 #> 37  0.064444048  0.27115007 #> 38  0.304371874  0.59784661 #> 39  0.282734719  0.45577286 #> 40 -0.078617114  0.07861711 #> 41 -0.048232879  0.20361734 #> 42  0.111225188  0.26063873 #> 43 -0.056029996  0.05603000 #> 44 -0.108615295  0.10861530 #> 45 -0.035495583  0.09804159 confint(delta, level = 0.95) #>         effect interval        2.5 %      97.5 % #> 1  from x to x        1  0.607530630  0.79201437 #> 2  from x to m        1  0.430999370  0.56906888 #> 3  from x to y        1 -0.159994521 -0.04008223 #> 4  from m to x        1 -0.085180722  0.08518072 #> 5  from m to m        1  0.535934031  0.66385674 #> 6  from m to y        1  0.344095782  0.45557546 #> 7  from y to x        1 -0.081957196  0.08195720 #> 8  from y to m        1 -0.060893928  0.06089393 #> 9  from y to y        1  0.446449155  0.55369804 #> 10 from x to x        2  0.382298845  0.59706425 #> 11 from x to m        2  0.544630905  0.75512568 #> 12 from x to y        2  0.012796105  0.14700550 #> 13 from m to x        2 -0.100621301  0.10062130 #> 14 from m to m        2  0.261093683  0.45865526 #> 15 from m to y        2  0.376339257  0.50327430 #> 16 from y to x        2 -0.098336021  0.09833602 #> 17 from y to m        2 -0.096703960  0.09670396 #> 18 from y to y        2  0.187769671  0.31237753 #> 19 from x to x        3  0.235686018  0.44964534 #> 20 from x to m        3  0.506633055  0.76279989 #> 21 from x to y        3  0.181679901  0.31994775 #> 22 from m to x        3 -0.097647963  0.09764796 #> 23 from m to m        3  0.096535451  0.33523862 #> 24 from m to y        3  0.300134940  0.42751784 #> 25 from y to x        3 -0.089308174  0.08930817 #> 26 from y to m        3 -0.115121991  0.11512199 #> 27 from y to y        3  0.066417023  0.18369339 #> 28 from x to x        4  0.134758701  0.34481734 #> 29 from x to m        4  0.411600436  0.69261559 #> 30 from x to y        4  0.267675671  0.42218015 #> 31 from m to x        4 -0.089399053  0.08939905 #> 32 from m to m        4  0.002192406  0.25682686 #> 33 from m to y        4  0.199644090  0.33687451 #> 34 from y to x        4 -0.072744578  0.07274458 #> 35 from y to m        4 -0.117422876  0.11742288 #> 36 from y to y        4  0.001740919  0.12333269 #> 37 from x to x        5  0.064444048  0.27115007 #> 38 from x to m        5  0.304371874  0.59784661 #> 39 from x to y        5  0.282734719  0.45577286 #> 40 from m to x        5 -0.078617114  0.07861711 #> 41 from m to m        5 -0.048232879  0.20361734 #> 42 from m to y        5  0.111225188  0.26063873 #> 43 from y to x        5 -0.056029996  0.05603000 #> 44 from y to m        5 -0.108615295  0.10861530 #> 45 from y to y        5 -0.035495583  0.09804159 plot(delta)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBetaStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBetaStd","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBetaStd","text":"function computes delta method sampling variance-covariance matrix elements standardized matrix lagged coefficients \\(\\boldsymbol{\\beta}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\) process noise covariance matrix \\(\\boldsymbol{\\Sigma}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBetaStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBetaStd","text":"","code":"DeltaBetaStd(phi, sigma, vcov_theta, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBetaStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBetaStd","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. sigma Numeric matrix. process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). vcov_theta Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\) \\(\\mathrm{vech} \\left( \\boldsymbol{\\Sigma} \\right)\\) delta_t Numeric. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBetaStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBetaStd","text":"Returns object class ctmeddelta list following elements: call Function call. args Function arguments. fun Function used (\"DeltaBetaStd\"). output list length equal length delta_t. element output list following elements: delta_t Time interval. jacobian Jacobian matrix. est Estimated elements standardized matrix lagged coefficients. vcov Sampling variance-covariance matrix estimated elements standardized matrix lagged coefficients.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBetaStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBetaStd","text":"See TotalStd().","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBetaStd.html","id":"delta-method","dir":"Reference","previous_headings":"","what":"Delta Method","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBetaStd","text":"Let \\(\\boldsymbol{\\theta}\\) vector combines \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise \\(\\mathrm{vech} \\left( \\boldsymbol{\\Sigma} \\right)\\), , unique elements \\(\\boldsymbol{\\Sigma}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) vector combines \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\) \\(\\mathrm{vech} \\left( \\hat{\\boldsymbol{\\Sigma}} \\right)\\). multivariate central limit theory, function \\(\\mathbf{g}\\) using \\(\\hat{\\boldsymbol{\\theta}}\\) input can expressed : $$   \t\\sqrt{n}   \t\\left(   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t-   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t\\right)   \t\\xrightarrow[]{   \t\t\\mathrm{D}   \t}   \t\\mathcal{N}   \t\\left(   \t0,   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ \\(\\mathbf{J}\\) matrix first-order derivatives function \\(\\mathbf{g}\\) respect elements \\(\\boldsymbol{\\theta}\\) \\(\\boldsymbol{\\Gamma}\\) asymptotic variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\). former, can derive distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) follows: $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \tn^{-1}   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ uncertainty associated estimator \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , therefore, given \\(n^{-1} \\mathbf{J} \\boldsymbol{\\Gamma} \\mathbf{J}^{\\prime}\\) . \\(\\boldsymbol{\\Gamma}\\) unknown, substitution, can use estimated sampling variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\), , \\(\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) \\(n^{-1} \\boldsymbol{\\Gamma}\\). Therefore, sampling variance-covariance matrix \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) given $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \t\\mathbf{J}   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\mathbf{J}^{\\prime}   \t\\right) .   $$","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBetaStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBetaStd","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBetaStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBetaStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaBetaStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delta Method Sampling Variance-Covariance Matrix for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — DeltaBetaStd","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") sigma <- matrix(   data = c(     0.24455556, 0.02201587, -0.05004762,     0.02201587, 0.07067800, 0.01539456,     -0.05004762, 0.01539456, 0.07553061   ),   nrow = 3 ) vcov_theta <- matrix(   data = c(     0.00843, 0.00040, -0.00151, -0.00600, -0.00033,     0.00110, 0.00324, 0.00020, -0.00061, -0.00115,     0.00011, 0.00015, 0.00001, -0.00002, -0.00001,     0.00040, 0.00374, 0.00016, -0.00022, -0.00273,     -0.00016, 0.00009, 0.00150, 0.00012, -0.00010,     -0.00026, 0.00002, 0.00012, 0.00004, -0.00001,     -0.00151, 0.00016, 0.00389, 0.00103, -0.00007,     -0.00283, -0.00050, 0.00000, 0.00156, 0.00021,     -0.00005, -0.00031, 0.00001, 0.00007, 0.00006,     -0.00600, -0.00022, 0.00103, 0.00644, 0.00031,     -0.00119, -0.00374, -0.00021, 0.00070, 0.00064,     -0.00015, -0.00005, 0.00000, 0.00003, -0.00001,     -0.00033, -0.00273, -0.00007, 0.00031, 0.00287,     0.00013, -0.00014, -0.00170, -0.00012, 0.00006,     0.00014, -0.00001, -0.00015, 0.00000, 0.00001,     0.00110, -0.00016, -0.00283, -0.00119, 0.00013,     0.00297, 0.00063, -0.00004, -0.00177, -0.00013,     0.00005, 0.00017, -0.00002, -0.00008, 0.00001,     0.00324, 0.00009, -0.00050, -0.00374, -0.00014,     0.00063, 0.00495, 0.00024, -0.00093, -0.00020,     0.00006, -0.00010, 0.00000, -0.00001, 0.00004,     0.00020, 0.00150, 0.00000, -0.00021, -0.00170,     -0.00004, 0.00024, 0.00214, 0.00012, -0.00002,     -0.00004, 0.00000, 0.00006, -0.00005, -0.00001,     -0.00061, 0.00012, 0.00156, 0.00070, -0.00012,     -0.00177, -0.00093, 0.00012, 0.00223, 0.00004,     -0.00002, -0.00003, 0.00001, 0.00003, -0.00013,     -0.00115, -0.00010, 0.00021, 0.00064, 0.00006,     -0.00013, -0.00020, -0.00002, 0.00004, 0.00057,     0.00001, -0.00009, 0.00000, 0.00000, 0.00001,     0.00011, -0.00026, -0.00005, -0.00015, 0.00014,     0.00005, 0.00006, -0.00004, -0.00002, 0.00001,     0.00012, 0.00001, 0.00000, -0.00002, 0.00000,     0.00015, 0.00002, -0.00031, -0.00005, -0.00001,     0.00017, -0.00010, 0.00000, -0.00003, -0.00009,     0.00001, 0.00014, 0.00000, 0.00000, -0.00005,     0.00001, 0.00012, 0.00001, 0.00000, -0.00015,     -0.00002, 0.00000, 0.00006, 0.00001, 0.00000,     0.00000, 0.00000, 0.00010, 0.00001, 0.00000,     -0.00002, 0.00004, 0.00007, 0.00003, 0.00000,     -0.00008, -0.00001, -0.00005, 0.00003, 0.00000,     -0.00002, 0.00000, 0.00001, 0.00005, 0.00001,     -0.00001, -0.00001, 0.00006, -0.00001, 0.00001,     0.00001, 0.00004, -0.00001, -0.00013, 0.00001,     0.00000, -0.00005, 0.00000, 0.00001, 0.00012   ),   nrow = 15 )  # Specific time interval ---------------------------------------------------- DeltaBetaStd(   phi = phi,   sigma = sigma,   vcov_theta = vcov_theta,   delta_t = 1 ) #>  #> Elements of the matrix of lagged coefficients #>  #> $`1` #>             interval     est     se       z      p    2.5%   97.5% #> from x to x        1  0.6998 0.0471 14.8688 0.0000  0.6075  0.7920 #> from x to m        1  0.6176 0.0635  9.7222 0.0000  0.4931  0.7422 #> from x to y        1 -0.0821 0.0253 -3.2410 0.0012 -0.1317 -0.0324 #> from m to x        1  0.0000 0.0352  0.0000 1.0000 -0.0690  0.0690 #> from m to m        1  0.5999 0.0326 18.3826 0.0000  0.5359  0.6639 #> from m to y        1  0.2656 0.0290  9.1606 0.0000  0.2088  0.3224 #> from y to x        1  0.0000 0.0510  0.0000 1.0000 -0.0999  0.0999 #> from y to m        1  0.0000 0.0468  0.0000 1.0000 -0.0917  0.0917 #> from y to y        1  0.5001 0.0274 18.2776 0.0000  0.4464  0.5537 #>   # Range of time intervals --------------------------------------------------- delta <- DeltaBetaStd(   phi = phi,   sigma = sigma,   vcov_theta = vcov_theta,   delta_t = 1:5 ) plot(delta)           # Methods ------------------------------------------------------------------- # DeltaBetaStd has a number of methods including # print, summary, confint, and plot print(delta) #>  #> Elements of the matrix of lagged coefficients #>  #> $`1` #>             interval     est     se       z      p    2.5%   97.5% #> from x to x        1  0.6998 0.0471 14.8688 0.0000  0.6075  0.7920 #> from x to m        1  0.6176 0.0635  9.7222 0.0000  0.4931  0.7422 #> from x to y        1 -0.0821 0.0253 -3.2410 0.0012 -0.1317 -0.0324 #> from m to x        1  0.0000 0.0352  0.0000 1.0000 -0.0690  0.0690 #> from m to m        1  0.5999 0.0326 18.3826 0.0000  0.5359  0.6639 #> from m to y        1  0.2656 0.0290  9.1606 0.0000  0.2088  0.3224 #> from y to x        1  0.0000 0.0510  0.0000 1.0000 -0.0999  0.0999 #> from y to m        1  0.0000 0.0468  0.0000 1.0000 -0.0917  0.0917 #> from y to y        1  0.5001 0.0274 18.2776 0.0000  0.4464  0.5537 #>  #> $`2` #>             interval    est     se      z      p    2.5%  97.5% #> from x to x        2 0.4897 0.0548 8.9377 0.0000  0.3823 0.5971 #> from x to m        2 0.8027 0.0959 8.3707 0.0000  0.6148 0.9907 #> from x to y        2 0.0656 0.0301 2.1770 0.0295  0.0065 0.1246 #> from m to x        2 0.0000 0.0416 0.0000 1.0000 -0.0815 0.0815 #> from m to m        2 0.3599 0.0504 7.1405 0.0000  0.2611 0.4587 #> from m to y        2 0.2922 0.0339 8.6207 0.0000  0.2257 0.3586 #> from y to x        2 0.0000 0.0611 0.0000 1.0000 -0.1198 0.1198 #> from y to m        2 0.0000 0.0743 0.0000 1.0000 -0.1456 0.1456 #> from y to y        2 0.2501 0.0318 7.8668 0.0000  0.1878 0.3124 #>  #> $`3` #>             interval    est     se      z     p    2.5%  97.5% #> from x to x        3 0.3427 0.0546 6.2779 0e+00  0.2357 0.4496 #> from x to m        3 0.7840 0.1117 7.0192 0e+00  0.5651 1.0029 #> from x to y        3 0.2058 0.0403 5.1028 0e+00  0.1268 0.2849 #> from m to x        3 0.0000 0.0403 0.0000 1e+00 -0.0791 0.0791 #> from m to m        3 0.2159 0.0609 3.5452 4e-04  0.0965 0.3352 #> from m to y        3 0.2417 0.0314 7.7033 0e+00  0.1802 0.3032 #> from y to x        3 0.0000 0.0555 0.0000 1e+00 -0.1088 0.1088 #> from y to m        3 0.0000 0.0884 0.0000 1e+00 -0.1733 0.1733 #> from y to y        3 0.1251 0.0299 4.1799 0e+00  0.0664 0.1837 #>  #> $`4` #>             interval    est     se      z      p    2.5%  97.5% #> from x to x        4 0.2398 0.0536 4.4747 0.0000  0.1348 0.3448 #> from x to m        4 0.6820 0.1168 5.8412 0.0000  0.4531 0.9108 #> from x to y        4 0.2830 0.0503 5.6229 0.0000  0.1844 0.3817 #> from m to x        4 0.0000 0.0369 0.0000 1.0000 -0.0724 0.0724 #> from m to m        4 0.1295 0.0650 1.9937 0.0462  0.0022 0.2568 #> from m to y        4 0.1782 0.0289 6.1765 0.0000  0.1217 0.2348 #> from y to x        4 0.0000 0.0452 0.0000 1.0000 -0.0887 0.0887 #> from y to m        4 0.0000 0.0902 0.0000 1.0000 -0.1768 0.1768 #> from y to y        4 0.0625 0.0310 2.0161 0.0438  0.0017 0.1233 #>  #> $`5` #>             interval    est     se      z      p    2.5%  97.5% #> from x to x        5 0.1678 0.0527 3.1821 0.0015  0.0644 0.2712 #> from x to m        5 0.5572 0.1160 4.8055 0.0000  0.3300 0.7845 #> from x to y        5 0.3030 0.0558 5.4294 0.0000  0.1936 0.4124 #> from m to x        5 0.0000 0.0325 0.0000 1.0000 -0.0636 0.0636 #> from m to m        5 0.0777 0.0642 1.2092 0.2266 -0.0482 0.2036 #> from m to y        5 0.1235 0.0278 4.4386 0.0000  0.0690 0.1781 #> from y to x        5 0.0000 0.0348 0.0000 1.0000 -0.0683 0.0683 #> from y to m        5 0.0000 0.0834 0.0000 1.0000 -0.1635 0.1635 #> from y to y        5 0.0313 0.0341 0.9180 0.3586 -0.0355 0.0980 #>  summary(delta) #>         effect interval         est         se         z            p #> 1  from x to x        1  0.69977250 0.04706304 14.868833 5.252120e-50 #> 2  from x to m        1  0.61764568 0.06352941  9.722201 2.424819e-22 #> 3  from x to y        1 -0.08208640 0.02532775 -3.240967 1.191251e-03 #> 4  from m to x        1  0.00000000 0.03518467  0.000000 1.000000e+00 #> 5  from m to m        1  0.59989538 0.03263394 18.382559 1.812145e-75 #> 6  from m to y        1  0.26561115 0.02899498  9.160590 5.161428e-20 #> 7  from y to x        1  0.00000000 0.05096059  0.000000 1.000000e+00 #> 8  from y to m        1  0.00000000 0.04676932  0.000000 1.000000e+00 #> 9  from y to y        1  0.50007360 0.02735991 18.277603 1.247910e-74 #> 10 from x to x        2  0.48968155 0.05478810  8.937735 3.972267e-19 #> 11 from x to m        2  0.80273425 0.09589808  8.370702 5.727596e-17 #> 12 from x to y        2  0.06556253 0.03011589  2.177008 2.947995e-02 #> 13 from m to x        2  0.00000000 0.04156254  0.000000 1.000000e+00 #> 14 from m to m        2  0.35987447 0.05039929  7.140467 9.301408e-13 #> 15 from m to y        2  0.29216402 0.03389111  8.620669 6.656409e-18 #> 16 from y to x        2  0.00000000 0.06114486  0.000000 1.000000e+00 #> 17 from y to m        2  0.00000000 0.07427307  0.000000 1.000000e+00 #> 18 from y to y        2  0.25007360 0.03178830  7.866843 3.637020e-15 #> 19 from x to x        3  0.34266568 0.05458246  6.277945 3.430781e-10 #> 20 from x to m        3  0.78400626 0.11169482  7.019182 2.231707e-12 #> 21 from x to y        3  0.20580506 0.04033214  5.102756 3.347427e-07 #> 22 from m to x        3  0.00000000 0.04033438  0.000000 1.000000e+00 #> 23 from m to m        3  0.21588703 0.06089478  3.545247 3.922457e-04 #> 24 from m to y        3  0.24169019 0.03137485  7.703310 1.325865e-14 #> 25 from y to x        3  0.00000000 0.05553139  0.000000 1.000000e+00 #> 26 from y to m        3  0.00000000 0.08841896  0.000000 1.000000e+00 #> 27 from y to y        3  0.12505520 0.02991799  4.179933 2.915945e-05 #> 28 from x to x        4  0.23978802 0.05358737  4.474711 7.651461e-06 #> 29 from x to m        4  0.68196771 0.11675163  5.841183 5.183128e-09 #> 30 from x to y        4  0.28303029 0.05033522  5.622908 1.877698e-08 #> 31 from m to x        4  0.00000000 0.03692709  0.000000 1.000000e+00 #> 32 from m to m        4  0.12950963 0.06495896  1.993715 4.618325e-02 #> 33 from m to y        4  0.17820488 0.02885225  6.176463 6.555356e-10 #> 34 from y to x        4  0.00000000 0.04523223  0.000000 1.000000e+00 #> 35 from y to m        4  0.00000000 0.09018614  0.000000 1.000000e+00 #> 36 from y to y        4  0.06253681 0.03101888  2.016088 4.379072e-02 #> 37 from x to x        5  0.16779706 0.05273210  3.182067 1.462281e-03 #> 38 from x to m        5  0.55721332 0.11595229  4.805539 1.543348e-06 #> 39 from x to y        5  0.30299087 0.05580590  5.429370 5.655331e-08 #> 40 from m to x        5  0.00000000 0.03247351  0.000000 1.000000e+00 #> 41 from m to m        5  0.07769223 0.06424869  1.209242 2.265698e-01 #> 42 from m to y        5  0.12351476 0.02782767  4.438560 9.056286e-06 #> 43 from y to x        5  0.00000000 0.03483918  0.000000 1.000000e+00 #> 44 from y to m        5  0.00000000 0.08342152  0.000000 1.000000e+00 #> 45 from y to y        5  0.03127301 0.03406623  0.918006 3.586157e-01 #>            2.5%       97.5% #> 1   0.607530630  0.79201437 #> 2   0.493130327  0.74216103 #> 3  -0.131727880 -0.03244492 #> 4  -0.068960683  0.06896068 #> 5   0.535934031  0.66385674 #> 6   0.208782027  0.32244027 #> 7  -0.099880915  0.09988091 #> 8  -0.091666188  0.09166619 #> 9   0.446449155  0.55369804 #> 10  0.382298845  0.59706425 #> 11  0.614777467  0.99069103 #> 12  0.006536480  0.12458858 #> 13 -0.081461080  0.08146108 #> 14  0.261093683  0.45865526 #> 15  0.225738672  0.35858937 #> 16 -0.119841726  0.11984173 #> 17 -0.145572534  0.14557253 #> 18  0.187769671  0.31237753 #> 19  0.235686018  0.44964534 #> 20  0.565088444  1.00292408 #> 21  0.126755521  0.28485460 #> 22 -0.079053922  0.07905392 #> 23  0.096535451  0.33523862 #> 24  0.180196609  0.30318376 #> 25 -0.108839524  0.10883952 #> 26 -0.173297970  0.17329797 #> 27  0.066417023  0.18369339 #> 28  0.134758701  0.34481734 #> 29  0.453138716  0.91079671 #> 30  0.184375071  0.38168551 #> 31 -0.072375763  0.07237576 #> 32  0.002192406  0.25682686 #> 33  0.121655503  0.23475426 #> 34 -0.088653534  0.08865353 #> 35 -0.176761589  0.17676159 #> 36  0.001740919  0.12333269 #> 37  0.064444048  0.27115007 #> 38  0.329950999  0.78447563 #> 39  0.193613318  0.41236841 #> 40 -0.063646911  0.06364691 #> 41 -0.048232879  0.20361734 #> 42  0.068973535  0.17805598 #> 43 -0.068283538  0.06828354 #> 44 -0.163503168  0.16350317 #> 45 -0.035495583  0.09804159 confint(delta, level = 0.95) #>         effect interval        2.5 %      97.5 % #> 1  from x to x        1  0.607530630  0.79201437 #> 2  from x to m        1  0.493130327  0.74216103 #> 3  from x to y        1 -0.131727880 -0.03244492 #> 4  from m to x        1 -0.068960683  0.06896068 #> 5  from m to m        1  0.535934031  0.66385674 #> 6  from m to y        1  0.208782027  0.32244027 #> 7  from y to x        1 -0.099880915  0.09988091 #> 8  from y to m        1 -0.091666188  0.09166619 #> 9  from y to y        1  0.446449155  0.55369804 #> 10 from x to x        2  0.382298845  0.59706425 #> 11 from x to m        2  0.614777467  0.99069103 #> 12 from x to y        2  0.006536480  0.12458858 #> 13 from m to x        2 -0.081461080  0.08146108 #> 14 from m to m        2  0.261093683  0.45865526 #> 15 from m to y        2  0.225738672  0.35858937 #> 16 from y to x        2 -0.119841726  0.11984173 #> 17 from y to m        2 -0.145572534  0.14557253 #> 18 from y to y        2  0.187769671  0.31237753 #> 19 from x to x        3  0.235686018  0.44964534 #> 20 from x to m        3  0.565088444  1.00292408 #> 21 from x to y        3  0.126755521  0.28485460 #> 22 from m to x        3 -0.079053922  0.07905392 #> 23 from m to m        3  0.096535451  0.33523862 #> 24 from m to y        3  0.180196609  0.30318376 #> 25 from y to x        3 -0.108839524  0.10883952 #> 26 from y to m        3 -0.173297970  0.17329797 #> 27 from y to y        3  0.066417023  0.18369339 #> 28 from x to x        4  0.134758701  0.34481734 #> 29 from x to m        4  0.453138716  0.91079671 #> 30 from x to y        4  0.184375071  0.38168551 #> 31 from m to x        4 -0.072375763  0.07237576 #> 32 from m to m        4  0.002192406  0.25682686 #> 33 from m to y        4  0.121655503  0.23475426 #> 34 from y to x        4 -0.088653534  0.08865353 #> 35 from y to m        4 -0.176761589  0.17676159 #> 36 from y to y        4  0.001740919  0.12333269 #> 37 from x to x        5  0.064444048  0.27115007 #> 38 from x to m        5  0.329950999  0.78447563 #> 39 from x to y        5  0.193613318  0.41236841 #> 40 from m to x        5 -0.063646911  0.06364691 #> 41 from m to m        5 -0.048232879  0.20361734 #> 42 from m to y        5  0.068973535  0.17805598 #> 43 from y to x        5 -0.068283538  0.06828354 #> 44 from y to m        5 -0.163503168  0.16350317 #> 45 from y to y        5 -0.035495583  0.09804159 plot(delta)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaIndirectCentral.html","id":null,"dir":"Reference","previous_headings":"","what":"Delta Method Sampling Variance-Covariance Matrix for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaIndirectCentral","title":"Delta Method Sampling Variance-Covariance Matrix for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaIndirectCentral","text":"function computes delta method sampling variance-covariance matrix indirect effect centrality specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaIndirectCentral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delta Method Sampling Variance-Covariance Matrix for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaIndirectCentral","text":"","code":"DeltaIndirectCentral(phi, vcov_phi_vec, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaIndirectCentral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delta Method Sampling Variance-Covariance Matrix for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaIndirectCentral","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. vcov_phi_vec Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\). delta_t Vector positive numbers. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores length delta_t long. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaIndirectCentral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delta Method Sampling Variance-Covariance Matrix for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaIndirectCentral","text":"Returns object class ctmeddelta list following elements: call Function call. args Function arguments. fun Function used (\"DeltaIndirectCentral\"). output list length equal length delta_t. element output list following elements: delta_t Time interval. jacobian Jacobian matrix. est Estimated indirect effect centrality. vcov Sampling variance-covariance matrix estimated indirect effect centrality.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaIndirectCentral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delta Method Sampling Variance-Covariance Matrix for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaIndirectCentral","text":"See IndirectCentral() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaIndirectCentral.html","id":"delta-method","dir":"Reference","previous_headings":"","what":"Delta Method","title":"Delta Method Sampling Variance-Covariance Matrix for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaIndirectCentral","text":"Let \\(\\boldsymbol{\\theta}\\) \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\). multivariate central limit theory, function \\(\\mathbf{g}\\) using \\(\\hat{\\boldsymbol{\\theta}}\\) input can expressed : $$   \t\\sqrt{n}   \t\\left(   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t-   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t\\right)   \t\\xrightarrow[]{   \t\t\\mathrm{D}   \t}   \t\\mathcal{N}   \t\\left(   \t0,   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ \\(\\mathbf{J}\\) matrix first-order derivatives function \\(\\mathbf{g}\\) respect elements \\(\\boldsymbol{\\theta}\\) \\(\\boldsymbol{\\Gamma}\\) asymptotic variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\). former, can derive distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) follows: $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \tn^{-1}   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ uncertainty associated estimator \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , therefore, given \\(n^{-1} \\mathbf{J} \\boldsymbol{\\Gamma} \\mathbf{J}^{\\prime}\\) . \\(\\boldsymbol{\\Gamma}\\) unknown, substitution, can use estimated sampling variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\), , \\(\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) \\(n^{-1} \\boldsymbol{\\Gamma}\\). Therefore, sampling variance-covariance matrix \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) given $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \t\\mathbf{J}   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\mathbf{J}^{\\prime}   \t\\right) .   $$","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaIndirectCentral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delta Method Sampling Variance-Covariance Matrix for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaIndirectCentral","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaIndirectCentral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Delta Method Sampling Variance-Covariance Matrix for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaIndirectCentral","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaIndirectCentral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delta Method Sampling Variance-Covariance Matrix for the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaIndirectCentral","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.002704274, -0.001475275, 0.000949122,     -0.001619422, 0.000885122, -0.000569404,     0.00085493, -0.000465824, 0.000297815,     -0.001475275, 0.004428442, -0.002642303,     0.000980573, -0.00271817, 0.001618805,     -0.000586921, 0.001478421, -0.000871547,     0.000949122, -0.002642303, 0.006402668,     -0.000697798, 0.001813471, -0.004043138,     0.000463086, -0.001120949, 0.002271711,     -0.001619422, 0.000980573, -0.000697798,     0.002079286, -0.001152501, 0.000753,     -0.001528701, 0.000820587, -0.000517524,     0.000885122, -0.00271817, 0.001813471,     -0.001152501, 0.00342605, -0.002075005,     0.000899165, -0.002532849, 0.001475579,     -0.000569404, 0.001618805, -0.004043138,     0.000753, -0.002075005, 0.004984032,     -0.000622255, 0.001634917, -0.003705661,     0.00085493, -0.000586921, 0.000463086,     -0.001528701, 0.000899165, -0.000622255,     0.002060076, -0.001096684, 0.000686386,     -0.000465824, 0.001478421, -0.001120949,     0.000820587, -0.002532849, 0.001634917,     -0.001096684, 0.003328692, -0.001926088,     0.000297815, -0.000871547, 0.002271711,     -0.000517524, 0.001475579, -0.003705661,     0.000686386, -0.001926088, 0.004726235   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- DeltaIndirectCentral(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1 ) #>  #> Indirect Effect Centrality #>  #> $`1` #>   interval    est     se      z p    2.5%  97.5% #> x        1 0.0000 0.0123 0.0000 1 -0.0242 0.0242 #> m        1 0.1674 0.0194 8.6167 0  0.1293 0.2055 #> y        1 0.0000 0.0114 0.0000 1 -0.0223 0.0223 #>   # Range of time intervals --------------------------------------------------- delta <- DeltaIndirectCentral(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5 ) plot(delta)     # Methods ------------------------------------------------------------------- # DeltaIndirectCentral has a number of methods including # print, summary, confint, and plot print(delta) #>  #> Indirect Effect Centrality #>  #> $`1` #>   interval    est     se      z p    2.5%  97.5% #> x        1 0.0000 0.0123 0.0000 1 -0.0242 0.0242 #> m        1 0.1674 0.0194 8.6167 0  0.1293 0.2055 #> y        1 0.0000 0.0114 0.0000 1 -0.0223 0.0223 #>  #> $`2` #>   interval    est     se       z p    2.5%  97.5% #> x        2 0.0000 0.0245  0.0000 1 -0.0479 0.0479 #> m        2 0.4008 0.0389 10.3027 0  0.3246 0.4771 #> y        2 0.0000 0.0219  0.0000 1 -0.0430 0.0430 #>  #> $`3` #>   interval    est     se       z p    2.5%  97.5% #> x        3 0.0000 0.0298  0.0000 1 -0.0585 0.0585 #> m        3 0.5423 0.0493 11.0007 0  0.4456 0.6389 #> y        3 0.0000 0.0284  0.0000 1 -0.0557 0.0557 #>  #> $`4` #>   interval    est     se       z p    2.5%  97.5% #> x        4 0.0000 0.0323  0.0000 1 -0.0634 0.0634 #> m        4 0.5823 0.0548 10.6249 0  0.4749 0.6897 #> y        4 0.0000 0.0359  0.0000 1 -0.0704 0.0704 #>  #> $`5` #>   interval    est     se      z p    2.5%  97.5% #> x        5 0.0000 0.0339 0.0000 1 -0.0664 0.0664 #> m        5 0.5521 0.0571 9.6771 0  0.4403 0.6639 #> y        5 0.0000 0.0440 0.0000 1 -0.0862 0.0862 #>  summary(delta) #>    variable interval           est         se             z            p #> 1         x        1  0.000000e+00 0.01232312  0.000000e+00 1.000000e+00 #> 2         m        1  1.674155e-01 0.01942918  8.616704e+00 6.890881e-18 #> 3         y        1  0.000000e+00 0.01138285  0.000000e+00 1.000000e+00 #> 4         x        2  0.000000e+00 0.02445046  0.000000e+00 1.000000e+00 #> 5         m        2  4.008043e-01 0.03890291  1.030268e+01 6.852356e-25 #> 6         y        2  0.000000e+00 0.02194571  0.000000e+00 1.000000e+00 #> 7         x        3  0.000000e+00 0.02983956  0.000000e+00 1.000000e+00 #> 8         m        3  5.422564e-01 0.04929290  1.100070e+01 3.791795e-28 #> 9         y        3 -3.330669e-16 0.02842516 -1.171733e-14 1.000000e+00 #> 10        x        4  0.000000e+00 0.03232705  0.000000e+00 1.000000e+00 #> 11        m        4  5.823179e-01 0.05480696  1.062489e+01 2.282791e-26 #> 12        y        4  0.000000e+00 0.03591407  0.000000e+00 1.000000e+00 #> 13        x        5  0.000000e+00 0.03388315  0.000000e+00 1.000000e+00 #> 14        m        5  5.520985e-01 0.05705207  9.677098e+00 3.772724e-22 #> 15        y        5  0.000000e+00 0.04399892  0.000000e+00 1.000000e+00 #>           2.5%      97.5% #> 1  -0.02415288 0.02415288 #> 2   0.12933502 0.20549601 #> 3  -0.02230998 0.02230998 #> 4  -0.04792202 0.04792202 #> 5   0.32455600 0.47705260 #> 6  -0.04301280 0.04301280 #> 7  -0.05848447 0.05848447 #> 8   0.44564411 0.63886875 #> 9  -0.05571230 0.05571230 #> 10 -0.06335985 0.06335985 #> 11  0.47489827 0.68973759 #> 12 -0.07039028 0.07039028 #> 13 -0.06640976 0.06640976 #> 14  0.44027850 0.66391851 #> 15 -0.08623631 0.08623631 confint(delta, level = 0.95) #>    variable interval       2.5 %     97.5 % #> 1         x        1 -0.02415288 0.02415288 #> 2         m        1  0.12933502 0.20549601 #> 3         y        1 -0.02230998 0.02230998 #> 4         x        2 -0.04792202 0.04792202 #> 5         m        2  0.32455600 0.47705260 #> 6         y        2 -0.04301280 0.04301280 #> 7         x        3 -0.05848447 0.05848447 #> 8         m        3  0.44564411 0.63886875 #> 9         y        3 -0.05571230 0.05571230 #> 10        x        4 -0.06335985 0.06335985 #> 11        m        4  0.47489827 0.68973759 #> 12        y        4 -0.07039028 0.07039028 #> 13        x        5 -0.06640976 0.06640976 #> 14        m        5  0.44027850 0.66391851 #> 15        y        5 -0.08623631 0.08623631 plot(delta)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMed.html","id":null,"dir":"Reference","previous_headings":"","what":"Delta Method Sampling Variance-Covariance Matrix for the Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMed","title":"Delta Method Sampling Variance-Covariance Matrix for the Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMed","text":"function computes delta method sampling variance-covariance matrix total, direct, indirect effects independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delta Method Sampling Variance-Covariance Matrix for the Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMed","text":"","code":"DeltaMed(phi, vcov_phi_vec, delta_t, from, to, med, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delta Method Sampling Variance-Covariance Matrix for the Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMed","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. vcov_phi_vec Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\). delta_t Vector positive numbers. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores length delta_t long. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delta Method Sampling Variance-Covariance Matrix for the Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMed","text":"Returns object class ctmeddelta list following elements: call Function call. args Function arguments. fun Function used (\"DeltaMed\"). output list length equal length delta_t. element output list following elements: delta_t Time interval. jacobian Jacobian matrix. est Estimated total, direct, indirect effects. vcov Sampling variance-covariance matrix estimated total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delta Method Sampling Variance-Covariance Matrix for the Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMed","text":"See Total(), Direct(), Indirect() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMed.html","id":"delta-method","dir":"Reference","previous_headings":"","what":"Delta Method","title":"Delta Method Sampling Variance-Covariance Matrix for the Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMed","text":"Let \\(\\boldsymbol{\\theta}\\) \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\). multivariate central limit theory, function \\(\\mathbf{g}\\) using \\(\\hat{\\boldsymbol{\\theta}}\\) input can expressed : $$   \t\\sqrt{n}   \t\\left(   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t-   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t\\right)   \t\\xrightarrow[]{   \t\t\\mathrm{D}   \t}   \t\\mathcal{N}   \t\\left(   \t0,   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ \\(\\mathbf{J}\\) matrix first-order derivatives function \\(\\mathbf{g}\\) respect elements \\(\\boldsymbol{\\theta}\\) \\(\\boldsymbol{\\Gamma}\\) asymptotic variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\). former, can derive distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) follows: $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \tn^{-1}   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ uncertainty associated estimator \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , therefore, given \\(n^{-1} \\mathbf{J} \\boldsymbol{\\Gamma} \\mathbf{J}^{\\prime}\\) . \\(\\boldsymbol{\\Gamma}\\) unknown, substitution, can use estimated sampling variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\), , \\(\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) \\(n^{-1} \\boldsymbol{\\Gamma}\\). Therefore, sampling variance-covariance matrix \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) given $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \t\\mathbf{J}   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\mathbf{J}^{\\prime}   \t\\right) .   $$","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delta Method Sampling Variance-Covariance Matrix for the Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMed","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Delta Method Sampling Variance-Covariance Matrix for the Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delta Method Sampling Variance-Covariance Matrix for the Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMed","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- DeltaMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se       z      p    2.5%   97.5% #> total           1 -0.1000 0.0306 -3.2703 0.0011 -0.1600 -0.0401 #> direct          1 -0.2675 0.0394 -6.7894 0.0000 -0.3447 -0.1902 #> indirect        1  0.1674 0.0175  9.5524 0.0000  0.1331  0.2018 #>   # Range of time intervals --------------------------------------------------- delta <- DeltaMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) plot(delta)     # Methods ------------------------------------------------------------------- # DeltaMed has a number of methods including # print, summary, confint, and plot print(delta) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se       z      p    2.5%   97.5% #> total           1 -0.1000 0.0306 -3.2703 0.0011 -0.1600 -0.0401 #> direct          1 -0.2675 0.0394 -6.7894 0.0000 -0.3447 -0.1902 #> indirect        1  0.1674 0.0175  9.5524 0.0000  0.1331  0.2018 #>  #> $`2` #>          interval     est     se       z      p    2.5%   97.5% #> total           2  0.0799 0.0342  2.3337 0.0196  0.0128  0.1470 #> direct          2 -0.3209 0.0552 -5.8129 0.0000 -0.4291 -0.2127 #> indirect        2  0.4008 0.0461  8.7033 0.0000  0.3105  0.4911 #>  #> $`3` #>          interval     est     se       z p    2.5%   97.5% #> total           3  0.2508 0.0353  7.1106 0  0.1817  0.3199 #> direct          3 -0.2914 0.0608 -4.7907 0 -0.4107 -0.1722 #> indirect        3  0.5423 0.0703  7.7121 0  0.4044  0.6801 #>  #> $`4` #>          interval     est     se       z     p    2.5%   97.5% #> total           4  0.3449 0.0394  8.7512 0e+00  0.2677  0.4222 #> direct          4 -0.2374 0.0604 -3.9333 1e-04 -0.3557 -0.1191 #> indirect        4  0.5823 0.0850  6.8529 0e+00  0.4158  0.7489 #>  #> $`5` #>          interval     est     se       z      p    2.5%   97.5% #> total           5  0.3693 0.0441  8.3649 0.0000  0.2827  0.4558 #> direct          5 -0.1828 0.0561 -3.2606 0.0011 -0.2928 -0.0729 #> indirect        5  0.5521 0.0899  6.1417 0.0000  0.3759  0.7283 #>  summary(delta) #>      effect interval        est         se         z            p        2.5% #> 1     total        1 -0.1000384 0.03059043 -3.270250 1.074523e-03 -0.15999452 #> 2    direct        1 -0.2674539 0.03939266 -6.789434 1.125739e-11 -0.34466208 #> 3  indirect        1  0.1674155 0.01752594  9.552442 1.266749e-21  0.13306530 #> 4     total        2  0.0799008 0.03423772  2.333707 1.961107e-02  0.01279611 #> 5    direct        2 -0.3209035 0.05520582 -5.812857 6.141562e-09 -0.42910491 #> 6  indirect        2  0.4008043 0.04605220  8.703260 3.224842e-18  0.31054364 #> 7     total        3  0.2508138 0.03527306  7.110634 1.155108e-12  0.18167990 #> 8    direct        3 -0.2914426 0.06083486 -4.790717 1.661862e-06 -0.41067673 #> 9  indirect        3  0.5422564 0.07031203  7.712143 1.237223e-14  0.40444738 #> 10    total        4  0.3449279 0.03941513  8.751155 2.111808e-18  0.26767567 #> 11   direct        4 -0.2373900 0.06035330 -3.933340 8.377377e-05 -0.35568031 #> 12 indirect        4  0.5823179 0.08497410  6.852887 7.237429e-12  0.41577174 #> 13    total        5  0.3692538 0.04414319  8.364909 6.016140e-17  0.28273472 #> 14   direct        5 -0.1828447 0.05607756 -3.260568 1.111891e-03 -0.29275471 #> 15 indirect        5  0.5520985 0.08989286  6.141739 8.162290e-10  0.37591173 #>          97.5% #> 1  -0.04008223 #> 2  -0.19024569 #> 3   0.20176572 #> 4   0.14700550 #> 5  -0.21270209 #> 6   0.49106497 #> 7   0.31994775 #> 8  -0.17220847 #> 9   0.68006547 #> 10  0.42218015 #> 11 -0.11909972 #> 12  0.74886411 #> 13  0.45577286 #> 14 -0.07293472 #> 15  0.72828528 confint(delta, level = 0.95) #>      effect interval       2.5 %      97.5 % #> 1     total        1 -0.15999452 -0.04008223 #> 2    direct        1 -0.34466208 -0.19024569 #> 3  indirect        1  0.13306530  0.20176572 #> 4     total        2  0.01279611  0.14700550 #> 5    direct        2 -0.42910491 -0.21270209 #> 6  indirect        2  0.31054364  0.49106497 #> 7     total        3  0.18167990  0.31994775 #> 8    direct        3 -0.41067673 -0.17220847 #> 9  indirect        3  0.40444738  0.68006547 #> 10    total        4  0.26767567  0.42218015 #> 11   direct        4 -0.35568031 -0.11909972 #> 12 indirect        4  0.41577174  0.74886411 #> 13    total        5  0.28273472  0.45577286 #> 14   direct        5 -0.29275471 -0.07293472 #> 15 indirect        5  0.37591173  0.72828528 plot(delta)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMedStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Delta Method Sampling Variance-Covariance Matrix for the Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMedStd","title":"Delta Method Sampling Variance-Covariance Matrix for the Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMedStd","text":"function computes delta method sampling variance-covariance matrix standardized total, direct, indirect effects independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\) process noise covariance matrix \\(\\boldsymbol{\\Sigma}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMedStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delta Method Sampling Variance-Covariance Matrix for the Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMedStd","text":"","code":"DeltaMedStd(   phi,   sigma,   vcov_theta,   delta_t,   from,   to,   med,   ncores = NULL,   tol = 0.01 )"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMedStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delta Method Sampling Variance-Covariance Matrix for the Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMedStd","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. sigma Numeric matrix. process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). vcov_theta Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\) \\(\\mathrm{vech} \\left( \\boldsymbol{\\Sigma} \\right)\\) delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMedStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delta Method Sampling Variance-Covariance Matrix for the Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMedStd","text":"Returns object class ctmeddelta list following elements: call Function call. args Function arguments. fun Function used (\"DeltaMedStd\"). output list length equal length delta_t. element output list following elements: delta_t Time interval. jacobian Jacobian matrix. est Estimated standardized total, direct, indirect effects. vcov Sampling variance-covariance matrix estimated standardized total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMedStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delta Method Sampling Variance-Covariance Matrix for the Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMedStd","text":"See TotalStd(), DirectStd(), IndirectStd() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMedStd.html","id":"delta-method","dir":"Reference","previous_headings":"","what":"Delta Method","title":"Delta Method Sampling Variance-Covariance Matrix for the Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMedStd","text":"Let \\(\\boldsymbol{\\theta}\\) vector combines \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise \\(\\mathrm{vech} \\left( \\boldsymbol{\\Sigma} \\right)\\), , unique elements \\(\\boldsymbol{\\Sigma}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) vector combines \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\) \\(\\mathrm{vech} \\left( \\hat{\\boldsymbol{\\Sigma}} \\right)\\). multivariate central limit theory, function \\(\\mathbf{g}\\) using \\(\\hat{\\boldsymbol{\\theta}}\\) input can expressed : $$   \t\\sqrt{n}   \t\\left(   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t-   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t\\right)   \t\\xrightarrow[]{   \t\t\\mathrm{D}   \t}   \t\\mathcal{N}   \t\\left(   \t0,   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ \\(\\mathbf{J}\\) matrix first-order derivatives function \\(\\mathbf{g}\\) respect elements \\(\\boldsymbol{\\theta}\\) \\(\\boldsymbol{\\Gamma}\\) asymptotic variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\). former, can derive distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) follows: $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \tn^{-1}   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ uncertainty associated estimator \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , therefore, given \\(n^{-1} \\mathbf{J} \\boldsymbol{\\Gamma} \\mathbf{J}^{\\prime}\\) . \\(\\boldsymbol{\\Gamma}\\) unknown, substitution, can use estimated sampling variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\), , \\(\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) \\(n^{-1} \\boldsymbol{\\Gamma}\\). Therefore, sampling variance-covariance matrix \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) given $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \t\\mathbf{J}   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\mathbf{J}^{\\prime}   \t\\right) .   $$","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMedStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delta Method Sampling Variance-Covariance Matrix for the Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMedStd","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMedStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Delta Method Sampling Variance-Covariance Matrix for the Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMedStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaMedStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delta Method Sampling Variance-Covariance Matrix for the Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — DeltaMedStd","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") sigma <- matrix(   data = c(     0.24455556, 0.02201587, -0.05004762,     0.02201587, 0.07067800, 0.01539456,     -0.05004762, 0.01539456, 0.07553061   ),   nrow = 3 ) vcov_theta <- matrix(   data = c(     0.00843, 0.00040, -0.00151, -0.00600, -0.00033,     0.00110, 0.00324, 0.00020, -0.00061, -0.00115,     0.00011, 0.00015, 0.00001, -0.00002, -0.00001,     0.00040, 0.00374, 0.00016, -0.00022, -0.00273,     -0.00016, 0.00009, 0.00150, 0.00012, -0.00010,     -0.00026, 0.00002, 0.00012, 0.00004, -0.00001,     -0.00151, 0.00016, 0.00389, 0.00103, -0.00007,     -0.00283, -0.00050, 0.00000, 0.00156, 0.00021,     -0.00005, -0.00031, 0.00001, 0.00007, 0.00006,     -0.00600, -0.00022, 0.00103, 0.00644, 0.00031,     -0.00119, -0.00374, -0.00021, 0.00070, 0.00064,     -0.00015, -0.00005, 0.00000, 0.00003, -0.00001,     -0.00033, -0.00273, -0.00007, 0.00031, 0.00287,     0.00013, -0.00014, -0.00170, -0.00012, 0.00006,     0.00014, -0.00001, -0.00015, 0.00000, 0.00001,     0.00110, -0.00016, -0.00283, -0.00119, 0.00013,     0.00297, 0.00063, -0.00004, -0.00177, -0.00013,     0.00005, 0.00017, -0.00002, -0.00008, 0.00001,     0.00324, 0.00009, -0.00050, -0.00374, -0.00014,     0.00063, 0.00495, 0.00024, -0.00093, -0.00020,     0.00006, -0.00010, 0.00000, -0.00001, 0.00004,     0.00020, 0.00150, 0.00000, -0.00021, -0.00170,     -0.00004, 0.00024, 0.00214, 0.00012, -0.00002,     -0.00004, 0.00000, 0.00006, -0.00005, -0.00001,     -0.00061, 0.00012, 0.00156, 0.00070, -0.00012,     -0.00177, -0.00093, 0.00012, 0.00223, 0.00004,     -0.00002, -0.00003, 0.00001, 0.00003, -0.00013,     -0.00115, -0.00010, 0.00021, 0.00064, 0.00006,     -0.00013, -0.00020, -0.00002, 0.00004, 0.00057,     0.00001, -0.00009, 0.00000, 0.00000, 0.00001,     0.00011, -0.00026, -0.00005, -0.00015, 0.00014,     0.00005, 0.00006, -0.00004, -0.00002, 0.00001,     0.00012, 0.00001, 0.00000, -0.00002, 0.00000,     0.00015, 0.00002, -0.00031, -0.00005, -0.00001,     0.00017, -0.00010, 0.00000, -0.00003, -0.00009,     0.00001, 0.00014, 0.00000, 0.00000, -0.00005,     0.00001, 0.00012, 0.00001, 0.00000, -0.00015,     -0.00002, 0.00000, 0.00006, 0.00001, 0.00000,     0.00000, 0.00000, 0.00010, 0.00001, 0.00000,     -0.00002, 0.00004, 0.00007, 0.00003, 0.00000,     -0.00008, -0.00001, -0.00005, 0.00003, 0.00000,     -0.00002, 0.00000, 0.00001, 0.00005, 0.00001,     -0.00001, -0.00001, 0.00006, -0.00001, 0.00001,     0.00001, 0.00004, -0.00001, -0.00013, 0.00001,     0.00000, -0.00005, 0.00000, 0.00001, 0.00012   ),   nrow = 15 )  # Specific time interval ---------------------------------------------------- DeltaMedStd(   phi = phi,   sigma = sigma,   vcov_theta = vcov_theta,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se       z      p    2.5%   97.5% #> total           1 -0.0821 0.0253 -3.2410 0.0012 -0.1317 -0.0324 #> direct          1 -0.2195 0.0375 -5.8533 0.0000 -0.2929 -0.1460 #> indirect        1  0.1374 0.0203  6.7549 0.0000  0.0975  0.1772 #>   # Range of time intervals --------------------------------------------------- delta <- DeltaMedStd(   phi = phi,   sigma = sigma,   vcov_theta = vcov_theta,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) plot(delta)     # Methods ------------------------------------------------------------------- # DeltaMedStd has a number of methods including # print, summary, confint, and plot print(delta) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se       z      p    2.5%   97.5% #> total           1 -0.0821 0.0253 -3.2410 0.0012 -0.1317 -0.0324 #> direct          1 -0.2195 0.0375 -5.8533 0.0000 -0.2929 -0.1460 #> indirect        1  0.1374 0.0203  6.7549 0.0000  0.0975  0.1772 #>  #> $`2` #>          interval     est     se       z      p    2.5%   97.5% #> total           2  0.0656 0.0301  2.1770 0.0295  0.0065  0.1246 #> direct          2 -0.2633 0.0515 -5.1166 0.0000 -0.3642 -0.1625 #> indirect        2  0.3289 0.0526  6.2563 0.0000  0.2258  0.4319 #>  #> $`3` #>          interval     est     se       z p    2.5%   97.5% #> total           3  0.2058 0.0403  5.1028 0  0.1268  0.2849 #> direct          3 -0.2391 0.0552 -4.3347 0 -0.3473 -0.1310 #> indirect        3  0.4449 0.0779  5.7151 0  0.2924  0.5975 #>  #> $`4` #>          interval     est     se       z     p    2.5%   97.5% #> total           4  0.2830 0.0503  5.6229 0e+00  0.1844  0.3817 #> direct          4 -0.1948 0.0534 -3.6447 3e-04 -0.2995 -0.0900 #> indirect        4  0.4778 0.0915  5.2248 0e+00  0.2986  0.6571 #>  #> $`5` #>          interval    est     se       z      p    2.5%   97.5% #> total           5  0.303 0.0558  5.4294 0.0000  0.1936  0.4124 #> direct          5 -0.150 0.0488 -3.0766 0.0021 -0.2456 -0.0545 #> indirect        5  0.453 0.0945  4.7959 0.0000  0.2679  0.6382 #>  summary(delta) #>      effect interval         est         se         z            p        2.5% #> 1     total        1 -0.08208640 0.02532775 -3.240967 1.191251e-03 -0.13172788 #> 2    direct        1 -0.21945905 0.03749299 -5.853336 4.818108e-09 -0.29294396 #> 3  indirect        1  0.13737265 0.02033677  6.754891 1.429428e-11  0.09751332 #> 4     total        2  0.06556253 0.03011589  2.177008 2.947995e-02  0.00653648 #> 5    direct        2 -0.26331708 0.05146307 -5.116622 3.110559e-07 -0.36418285 #> 6  indirect        2  0.32887961 0.05256755  6.256324 3.941568e-10  0.22584912 #> 7     total        3  0.20580506 0.04033214  5.102756 3.347427e-07  0.12675552 #> 8    direct        3 -0.23914297 0.05517002 -4.334655 1.459891e-05 -0.34727421 #> 9  indirect        3  0.44494803 0.07785435  5.715133 1.096179e-08  0.29235630 #> 10    total        4  0.28303029 0.05033522  5.622908 1.877698e-08  0.18437507 #> 11   direct        4 -0.19479017 0.05344467 -3.644707 2.676964e-04 -0.29953979 #> 12 indirect        4  0.47782046 0.09145306  5.224762 1.743796e-07  0.29857575 #> 13    total        5  0.30299087 0.05580590  5.429370 5.655331e-08  0.19361332 #> 14   direct        5 -0.15003307 0.04876512 -3.076647 2.093430e-03 -0.24561095 #> 15 indirect        5  0.45302394 0.09446014  4.795927 1.619241e-06  0.26788547 #>          97.5% #> 1  -0.03244492 #> 2  -0.14597414 #> 3   0.17723198 #> 4   0.12458858 #> 5  -0.16245132 #> 6   0.43191011 #> 7   0.28485460 #> 8  -0.13101172 #> 9   0.59753976 #> 10  0.38168551 #> 11 -0.09004054 #> 12  0.65706517 #> 13  0.41236841 #> 14 -0.05445519 #> 15  0.63816240 confint(delta, level = 0.95) #>      effect interval       2.5 %      97.5 % #> 1     total        1 -0.13172788 -0.03244492 #> 2    direct        1 -0.29294396 -0.14597414 #> 3  indirect        1  0.09751332  0.17723198 #> 4     total        2  0.00653648  0.12458858 #> 5    direct        2 -0.36418285 -0.16245132 #> 6  indirect        2  0.22584912  0.43191011 #> 7     total        3  0.12675552  0.28485460 #> 8    direct        3 -0.34727421 -0.13101172 #> 9  indirect        3  0.29235630  0.59753976 #> 10    total        4  0.18437507  0.38168551 #> 11   direct        4 -0.29953979 -0.09004054 #> 12 indirect        4  0.29857575  0.65706517 #> 13    total        5  0.19361332  0.41236841 #> 14   direct        5 -0.24561095 -0.05445519 #> 15 indirect        5  0.26788547  0.63816240 plot(delta)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaTotalCentral.html","id":null,"dir":"Reference","previous_headings":"","what":"Delta Method Sampling Variance-Covariance Matrix for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaTotalCentral","title":"Delta Method Sampling Variance-Covariance Matrix for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaTotalCentral","text":"function computes delta method sampling variance-covariance matrix total effect centrality specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaTotalCentral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delta Method Sampling Variance-Covariance Matrix for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaTotalCentral","text":"","code":"DeltaTotalCentral(phi, vcov_phi_vec, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaTotalCentral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delta Method Sampling Variance-Covariance Matrix for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaTotalCentral","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. vcov_phi_vec Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\). delta_t Vector positive numbers. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores length delta_t long. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaTotalCentral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delta Method Sampling Variance-Covariance Matrix for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaTotalCentral","text":"Returns object class ctmeddelta list following elements: call Function call. args Function arguments. fun Function used (\"DeltaTotalCentral\"). output list length equal length delta_t. element output list following elements: delta_t Time interval. jacobian Jacobian matrix. est Estimated total effect centrality. vcov Sampling variance-covariance matrix estimated total effect centrality.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaTotalCentral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delta Method Sampling Variance-Covariance Matrix for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaTotalCentral","text":"See TotalCentral() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaTotalCentral.html","id":"delta-method","dir":"Reference","previous_headings":"","what":"Delta Method","title":"Delta Method Sampling Variance-Covariance Matrix for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaTotalCentral","text":"Let \\(\\boldsymbol{\\theta}\\) \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\). multivariate central limit theory, function \\(\\mathbf{g}\\) using \\(\\hat{\\boldsymbol{\\theta}}\\) input can expressed : $$   \t\\sqrt{n}   \t\\left(   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t-   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t\\right)   \t\\xrightarrow[]{   \t\t\\mathrm{D}   \t}   \t\\mathcal{N}   \t\\left(   \t0,   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ \\(\\mathbf{J}\\) matrix first-order derivatives function \\(\\mathbf{g}\\) respect elements \\(\\boldsymbol{\\theta}\\) \\(\\boldsymbol{\\Gamma}\\) asymptotic variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\). former, can derive distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) follows: $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \tn^{-1}   \t\\mathbf{J}   \t\\boldsymbol{\\Gamma}   \t\\mathbf{J}^{\\prime}   \t\\right)   $$ uncertainty associated estimator \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , therefore, given \\(n^{-1} \\mathbf{J} \\boldsymbol{\\Gamma} \\mathbf{J}^{\\prime}\\) . \\(\\boldsymbol{\\Gamma}\\) unknown, substitution, can use estimated sampling variance-covariance matrix \\(\\hat{\\boldsymbol{\\theta}}\\), , \\(\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) \\(n^{-1} \\boldsymbol{\\Gamma}\\). Therefore, sampling variance-covariance matrix \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) given $$   \t\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\approx   \t\\mathcal{N}   \t\\left(   \t\\mathbf{g} \\left( \\boldsymbol{\\theta} \\right)   \t,   \t\\mathbf{J}   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\mathbf{J}^{\\prime}   \t\\right) .   $$","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaTotalCentral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delta Method Sampling Variance-Covariance Matrix for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaTotalCentral","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaTotalCentral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Delta Method Sampling Variance-Covariance Matrix for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaTotalCentral","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DeltaTotalCentral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delta Method Sampling Variance-Covariance Matrix for the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — DeltaTotalCentral","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- DeltaTotalCentral(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1 ) #>  #> Total Effect Centrality #>  #> $`1` #>   interval    est     se      z p    2.5%  97.5% #> x        1 0.4000 0.0485 8.2517 0  0.3050 0.4950 #> m        1 0.3998 0.0411 9.7184 0  0.3192 0.4805 #> y        1 0.0000 0.0650 0.0000 1 -0.1273 0.1273 #>   # Range of time intervals --------------------------------------------------- delta <- DeltaTotalCentral(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5 ) plot(delta)     # Methods ------------------------------------------------------------------- # DeltaTotalCentral has a number of methods including # print, summary, confint, and plot print(delta) #>  #> Total Effect Centrality #>  #> $`1` #>   interval    est     se      z p    2.5%  97.5% #> x        1 0.4000 0.0485 8.2517 0  0.3050 0.4950 #> m        1 0.3998 0.0411 9.7184 0  0.3192 0.4805 #> y        1 0.0000 0.0650 0.0000 1 -0.1273 0.1273 #>  #> $`2` #>   interval    est     se       z p    2.5%  97.5% #> x        2 0.7298 0.0680 10.7288 0  0.5965 0.8631 #> m        2 0.4398 0.0529  8.3137 0  0.3361 0.5435 #> y        2 0.0000 0.0951  0.0000 1 -0.1863 0.1863 #>  #> $`3` #>   interval    est     se       z p    2.5%  97.5% #> x        3 0.8855 0.0855 10.3526 0  0.7179 1.0532 #> m        3 0.3638 0.0606  6.0028 0  0.2450 0.4826 #> y        3 0.0000 0.1022  0.0000 1 -0.2004 0.2004 #>  #> $`4` #>   interval    est     se      z p    2.5%  97.5% #> x        4 0.8970 0.0999 8.9763 0  0.7012 1.0929 #> m        4 0.2683 0.0659 4.0735 0  0.1392 0.3973 #> y        4 0.0000 0.0961 0.0000 1 -0.1883 0.1883 #>  #> $`5` #>   interval    est     se      z      p    2.5%  97.5% #> x        5 0.8204 0.1098 7.4745 0.0000  0.6052 1.0355 #> m        5 0.1859 0.0679 2.7368 0.0062  0.0528 0.3191 #> y        5 0.0000 0.0836 0.0000 1.0000 -0.1638 0.1638 #>  summary(delta) #>    variable interval       est         se         z            p        2.5% #> 1         x        1 0.3999957 0.04847428  8.251711 1.561425e-16  0.30498791 #> 2         m        1 0.3998356 0.04114215  9.718394 2.517201e-22  0.31919849 #> 3         y        1 0.0000000 0.06497353  0.000000 1.000000e+00 -0.12734577 #> 4         x        2 0.7297791 0.06802060 10.728796 7.456131e-27  0.59646118 #> 5         m        2 0.4398068 0.05290118  8.313742 9.273073e-17  0.33612237 #> 6         y        2 0.0000000 0.09507733  0.000000 1.000000e+00 -0.18634813 #> 7         x        3 0.8855303 0.08553733 10.352560 4.074439e-25  0.71788022 #> 8         m        3 0.3638264 0.06060970  6.002775 1.939728e-09  0.24503357 #> 9         y        3 0.0000000 0.10222877  0.000000 1.000000e+00 -0.20036471 #> 10        x        4 0.8970359 0.09993352  8.976326 2.799578e-19  0.70116982 #> 11        m        4 0.2682593 0.06585448  4.073516 4.630857e-05  0.13918690 #> 12        y        4 0.0000000 0.09608206  0.000000 1.000000e+00 -0.18831738 #> 13        x        5 0.8203630 0.10975492  7.474499 7.749877e-14  0.60524733 #> 14        m        5 0.1859320 0.06793801  2.736788 6.204218e-03  0.05277591 #> 15        y        5 0.0000000 0.08357313  0.000000 1.000000e+00 -0.16380032 #>        97.5% #> 1  0.4950036 #> 2  0.4804728 #> 3  0.1273458 #> 4  0.8630970 #> 5  0.5434912 #> 6  0.1863481 #> 7  1.0531804 #> 8  0.4826192 #> 9  0.2003647 #> 10 1.0929020 #> 11 0.3973317 #> 12 0.1883174 #> 13 1.0354787 #> 14 0.3190880 #> 15 0.1638003 confint(delta, level = 0.95) #>    variable interval       2.5 %    97.5 % #> 1         x        1  0.30498791 0.4950036 #> 2         m        1  0.31919849 0.4804728 #> 3         y        1 -0.12734577 0.1273458 #> 4         x        2  0.59646118 0.8630970 #> 5         m        2  0.33612237 0.5434912 #> 6         y        2 -0.18634813 0.1863481 #> 7         x        3  0.71788022 1.0531804 #> 8         m        3  0.24503357 0.4826192 #> 9         y        3 -0.20036471 0.2003647 #> 10        x        4  0.70116982 1.0929020 #> 11        m        4  0.13918690 0.3973317 #> 12        y        4 -0.18831738 0.1883174 #> 13        x        5  0.60524733 1.0354787 #> 14        m        5  0.05277591 0.3190880 #> 15        y        5 -0.16380032 0.1638003 plot(delta)"},{"path":"https://github.com/jeksterslab/cTMed/reference/Direct.html","id":null,"dir":"Reference","previous_headings":"","what":"Direct Effect of X on Y Over a Specific Time Interval — Direct","title":"Direct Effect of X on Y Over a Specific Time Interval — Direct","text":"function computes direct effect independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Direct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direct Effect of X on Y Over a Specific Time Interval — Direct","text":"","code":"Direct(phi, delta_t, from, to, med)"},{"path":"https://github.com/jeksterslab/cTMed/reference/Direct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direct Effect of X on Y Over a Specific Time Interval — Direct","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Direct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direct Effect of X on Y Over a Specific Time Interval — Direct","text":"Returns object class ctmedeffect list following elements: call Function call. args Function arguments. fun Function used (\"Direct\"). output direct effect.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Direct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Direct Effect of X on Y Over a Specific Time Interval — Direct","text":"direct effect independent variable \\(X\\) dependent variable \\(Y\\) relative mediator variables \\(\\mathbf{m}\\) given $$     \\mathrm{Direct}_{{\\Delta t}_{, j}}     =     \\exp     \\left(       \\Delta t       \\mathbf{D}       \\boldsymbol{\\Phi}       \\mathbf{D}     \\right)_{, j}   $$ \\(\\boldsymbol{\\Phi}\\) denotes drift matrix, \\(\\mathbf{D}\\) diagonal matrix diagonal elements corresponding mediator variables \\(\\mathbf{m}\\) set zero rest one, \\(\\) row index \\(Y\\) \\(\\boldsymbol{\\Phi}\\), \\(j\\) column index \\(X\\) \\(\\boldsymbol{\\Phi}\\), \\(\\Delta t\\) time interval.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Direct.html","id":"linear-stochastic-differential-equation-model","dir":"Reference","previous_headings":"","what":"Linear Stochastic Differential Equation Model","title":"Direct Effect of X on Y Over a Specific Time Interval — Direct","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right)   $$ \\(\\mathbf{y}_{, t}\\), \\(\\boldsymbol{\\eta}_{, t}\\), \\(\\boldsymbol{\\varepsilon}_{, t}\\) random variables \\(\\boldsymbol{\\nu}\\), \\(\\boldsymbol{\\Lambda}\\), \\(\\boldsymbol{\\Theta}\\) model parameters. \\(\\mathbf{y}_{, t}\\) represents vector observed random variables, \\(\\boldsymbol{\\eta}_{, t}\\) vector latent random variables, \\(\\boldsymbol{\\varepsilon}_{, t}\\) vector random measurement errors, time \\(t\\) individual \\(\\). \\(\\boldsymbol{\\nu}\\) denotes vector intercepts, \\(\\boldsymbol{\\Lambda}\\) matrix factor loadings, \\(\\boldsymbol{\\Theta}\\) covariance matrix \\(\\boldsymbol{\\varepsilon}\\). alternative representation measurement error given $$     \\boldsymbol{\\varepsilon}_{, t}     =     \\boldsymbol{\\Theta}^{\\frac{1}{2}}     \\mathbf{z}_{, t},     \\quad     \\mathrm{}     \\quad     \\mathbf{z}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\mathbf{}     \\right)   $$ \\(\\mathbf{z}_{, t}\\) vector independent standard normal random variables \\(     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)^{\\prime}     =     \\boldsymbol{\\Theta} .   \\) dynamic structure given $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\left(     \\boldsymbol{\\iota}     +     \\boldsymbol{\\Phi}     \\boldsymbol{\\eta}_{, t}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t}   $$ \\(\\boldsymbol{\\iota}\\) term unobserved constant time, \\(\\boldsymbol{\\Phi}\\) drift matrix represents rate change solution absence random fluctuations, \\(\\boldsymbol{\\Sigma}\\) matrix volatility randomness process, \\(\\mathrm{d}\\boldsymbol{W}\\) Wiener process Brownian motion, represents random fluctuations.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Direct.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Direct Effect of X on Y Over a Specific Time Interval — Direct","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/Direct.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Direct Effect of X on Y Over a Specific Time Interval — Direct","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Direct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direct Effect of X on Y Over a Specific Time Interval — Direct","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") delta_t <- 1 Direct(   phi = phi,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\" ) #> [1] -0.2675 phi <- matrix(   data = c(     -6, 5.5, 0, 0,     1.25, -2.5, 5.9, -7.3,     0, 0, -6, 2.5,     5, 0, 0, -6   ),   nrow = 4 ) colnames(phi) <- rownames(phi) <- paste0(\"y\", 1:4) Direct(   phi = phi,   delta_t = delta_t,   from = \"y2\",   to = \"y4\",   med = c(\"y1\", \"y3\") ) #> [1] -0.166"},{"path":"https://github.com/jeksterslab/cTMed/reference/DirectStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Direct Effect of X on Y Over a Specific Time Interval — DirectStd","title":"Standardized Direct Effect of X on Y Over a Specific Time Interval — DirectStd","text":"function computes standardized direct effect independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\) process noise covariance matrix \\(\\boldsymbol{\\Sigma}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DirectStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Direct Effect of X on Y Over a Specific Time Interval — DirectStd","text":"","code":"DirectStd(phi, sigma, delta_t, from, to, med)"},{"path":"https://github.com/jeksterslab/cTMed/reference/DirectStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Direct Effect of X on Y Over a Specific Time Interval — DirectStd","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. sigma Numeric matrix. process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DirectStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Direct Effect of X on Y Over a Specific Time Interval — DirectStd","text":"Returns object class ctmedeffect list following elements: call Function call. args Function arguments. fun Function used (\"DirectStd\"). output standardized direct effect.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DirectStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Direct Effect of X on Y Over a Specific Time Interval — DirectStd","text":"standardized direct effect independent variable \\(X\\) dependent variable \\(Y\\) relative mediator variables \\(\\mathbf{m}\\) given $$     \\mathrm{Direct}^{\\ast}_{{\\Delta t}_{, j}}     =     \\mathbf{S}     \\left(     \\exp     \\left(       \\Delta t       \\mathbf{D}       \\boldsymbol{\\Phi}       \\mathbf{D}     \\right)_{, j}     \\right)     \\mathbf{S}^{-1}   $$ \\(\\boldsymbol{\\Phi}\\) denotes drift matrix, \\(\\mathbf{D}\\) diagonal matrix diagonal elements corresponding mediator variables \\(\\mathbf{m}\\) set zero rest one, \\(\\) row index \\(Y\\) \\(\\boldsymbol{\\Phi}\\), \\(j\\) column index \\(X\\) \\(\\boldsymbol{\\Phi}\\), \\(\\mathbf{S}\\) diagonal matrix model-implied steady-state standard deviations diagonals, \\(\\Delta t\\) time interval.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DirectStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Direct Effect of X on Y Over a Specific Time Interval — DirectStd","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/DirectStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Direct Effect of X on Y Over a Specific Time Interval — DirectStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/DirectStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Direct Effect of X on Y Over a Specific Time Interval — DirectStd","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") sigma <- matrix(   data = c(     0.24455556, 0.02201587, -0.05004762,     0.02201587, 0.07067800, 0.01539456,     -0.05004762, 0.01539456, 0.07553061   ),   nrow = 3 ) delta_t <- 1 DirectStd(   phi = phi,   sigma = sigma,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\" ) #> [1] -0.2195"},{"path":"https://github.com/jeksterslab/cTMed/reference/Indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Indirect Effect of X on Y Through M Over a Specific Time Interval — Indirect","title":"Indirect Effect of X on Y Through M Over a Specific Time Interval — Indirect","text":"function computes indirect effect independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indirect Effect of X on Y Through M Over a Specific Time Interval — Indirect","text":"","code":"Indirect(phi, delta_t, from, to, med)"},{"path":"https://github.com/jeksterslab/cTMed/reference/Indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indirect Effect of X on Y Through M Over a Specific Time Interval — Indirect","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Indirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indirect Effect of X on Y Through M Over a Specific Time Interval — Indirect","text":"Returns object class ctmedeffect list following elements: call Function call. args Function arguments. fun Function used (\"Indirect\"). output indirect effect.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Indirect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indirect Effect of X on Y Through M Over a Specific Time Interval — Indirect","text":"indirect effect independent variable \\(X\\) dependent variable \\(Y\\) relative mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) given $$     \\mathrm{Indirect}_{{\\Delta t}_{, j}}     =     \\exp     \\left(       \\Delta t       \\boldsymbol{\\Phi}     \\right)_{, j} -     \\exp     \\left(       \\Delta t       \\mathbf{D}_{\\mathbf{m}}       \\boldsymbol{\\Phi}       \\mathbf{D}_{\\mathbf{m}}     \\right)_{, j}   $$ \\(\\boldsymbol{\\Phi}\\) denotes drift matrix, \\(\\mathbf{D}_{\\mathbf{m}}\\) matrix diagonal elements zeros diagonal elements zero index/indices mediator variables \\(\\mathbf{m}\\) one otherwise, \\(\\) row index \\(Y\\) \\(\\boldsymbol{\\Phi}\\), \\(j\\) column index \\(X\\) \\(\\boldsymbol{\\Phi}\\), \\(\\Delta t\\) time interval.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Indirect.html","id":"linear-stochastic-differential-equation-model","dir":"Reference","previous_headings":"","what":"Linear Stochastic Differential Equation Model","title":"Indirect Effect of X on Y Through M Over a Specific Time Interval — Indirect","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right)   $$ \\(\\mathbf{y}_{, t}\\), \\(\\boldsymbol{\\eta}_{, t}\\), \\(\\boldsymbol{\\varepsilon}_{, t}\\) random variables \\(\\boldsymbol{\\nu}\\), \\(\\boldsymbol{\\Lambda}\\), \\(\\boldsymbol{\\Theta}\\) model parameters. \\(\\mathbf{y}_{, t}\\) represents vector observed random variables, \\(\\boldsymbol{\\eta}_{, t}\\) vector latent random variables, \\(\\boldsymbol{\\varepsilon}_{, t}\\) vector random measurement errors, time \\(t\\) individual \\(\\). \\(\\boldsymbol{\\nu}\\) denotes vector intercepts, \\(\\boldsymbol{\\Lambda}\\) matrix factor loadings, \\(\\boldsymbol{\\Theta}\\) covariance matrix \\(\\boldsymbol{\\varepsilon}\\). alternative representation measurement error given $$     \\boldsymbol{\\varepsilon}_{, t}     =     \\boldsymbol{\\Theta}^{\\frac{1}{2}}     \\mathbf{z}_{, t},     \\quad     \\mathrm{}     \\quad     \\mathbf{z}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\mathbf{}     \\right)   $$ \\(\\mathbf{z}_{, t}\\) vector independent standard normal random variables \\(     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)^{\\prime}     =     \\boldsymbol{\\Theta} .   \\) dynamic structure given $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\left(     \\boldsymbol{\\iota}     +     \\boldsymbol{\\Phi}     \\boldsymbol{\\eta}_{, t}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t}   $$ \\(\\boldsymbol{\\iota}\\) term unobserved constant time, \\(\\boldsymbol{\\Phi}\\) drift matrix represents rate change solution absence random fluctuations, \\(\\boldsymbol{\\Sigma}\\) matrix volatility randomness process, \\(\\mathrm{d}\\boldsymbol{W}\\) Wiener process Brownian motion, represents random fluctuations.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Indirect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Indirect Effect of X on Y Through M Over a Specific Time Interval — Indirect","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/Indirect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indirect Effect of X on Y Through M Over a Specific Time Interval — Indirect","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indirect Effect of X on Y Through M Over a Specific Time Interval — Indirect","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") delta_t <- 1 Indirect(   phi = phi,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\" ) #> [1] 0.1674 phi <- matrix(   data = c(     -6, 5.5, 0, 0,     1.25, -2.5, 5.9, -7.3,     0, 0, -6, 2.5,     5, 0, 0, -6   ),   nrow = 4 ) colnames(phi) <- rownames(phi) <- paste0(\"y\", 1:4) Indirect(   phi = phi,   delta_t = delta_t,   from = \"y2\",   to = \"y4\",   med = c(\"y1\", \"y3\") ) #> [1] 0.2427"},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectCentral.html","id":null,"dir":"Reference","previous_headings":"","what":"Indirect Effect Centrality — IndirectCentral","title":"Indirect Effect Centrality — IndirectCentral","text":"Indirect Effect Centrality","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectCentral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indirect Effect Centrality — IndirectCentral","text":"","code":"IndirectCentral(phi, delta_t, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectCentral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indirect Effect Centrality — IndirectCentral","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. delta_t Vector positive numbers. Time interval (\\(\\Delta t\\)). tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectCentral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indirect Effect Centrality — IndirectCentral","text":"Returns object class ctmedmed list following elements: call Function call. args Function arguments. fun Function used (\"IndirectCentral\"). output matrix indirect effect centrality.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectCentral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indirect Effect Centrality — IndirectCentral","text":"Indirect effect centrality sum possible indirect effects different pairs variables specific variable serves mediator.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectCentral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Indirect Effect Centrality — IndirectCentral","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectCentral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indirect Effect Centrality — IndirectCentral","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectCentral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indirect Effect Centrality — IndirectCentral","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\")  # Specific time interval ---------------------------------------------------- IndirectCentral(   phi = phi,   delta_t = 1 ) #>  #> Indirect Effect Centrality #>  #>      interval x      m y #> [1,]        1 0 0.1674 0  # Range of time intervals --------------------------------------------------- indirect_central <- IndirectCentral(   phi = phi,   delta_t = 1:30 ) plot(indirect_central)   # Methods ------------------------------------------------------------------- # IndirectCentral has a number of methods including # print, summary, and plot indirect_central <- IndirectCentral(   phi = phi,   delta_t = 1:5 ) print(indirect_central) #>  #> Indirect Effect Centrality #>  #>      interval x      m y #> [1,]        1 0 0.1674 0 #> [2,]        2 0 0.4008 0 #> [3,]        3 0 0.5423 0 #> [4,]        4 0 0.5823 0 #> [5,]        5 0 0.5521 0 summary(indirect_central) #>      interval x      m y #> [1,]        1 0 0.1674 0 #> [2,]        2 0 0.4008 0 #> [3,]        3 0 0.5423 0 #> [4,]        4 0 0.5823 0 #> [5,]        5 0 0.5521 0 plot(indirect_central)"},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Indirect Effect of X on Y Through M Over a Specific Time Interval — IndirectStd","title":"Standardized Indirect Effect of X on Y Through M Over a Specific Time Interval — IndirectStd","text":"function computes standardized indirect effect independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\) process noise covariance matrix \\(\\boldsymbol{\\Sigma}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Indirect Effect of X on Y Through M Over a Specific Time Interval — IndirectStd","text":"","code":"IndirectStd(phi, sigma, delta_t, from, to, med)"},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Indirect Effect of X on Y Through M Over a Specific Time Interval — IndirectStd","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. sigma Numeric matrix. process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Indirect Effect of X on Y Through M Over a Specific Time Interval — IndirectStd","text":"Returns object class ctmedeffect list following elements: call Function call. args Function arguments. fun Function used (\"IndirectStd\"). output standardized indirect effect.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Indirect Effect of X on Y Through M Over a Specific Time Interval — IndirectStd","text":"standardized indirect effect independent variable \\(X\\) dependent variable \\(Y\\) relative mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) given $$     \\mathrm{Indirect}^{\\ast}_{{\\Delta t}_{, j}}     =     \\mathrm{Total}^{\\ast}_{\\Delta t} -     \\mathrm{Direct}^{\\ast}_{\\Delta t}   $$ \\(\\mathrm{Total}^{\\ast}_{\\Delta t}\\) \\(\\mathrm{Direct}^{\\ast}_{\\Delta t}\\) standardized total direct effects time interval \\(\\Delta t\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Indirect Effect of X on Y Through M Over a Specific Time Interval — IndirectStd","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Indirect Effect of X on Y Through M Over a Specific Time Interval — IndirectStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/IndirectStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Indirect Effect of X on Y Through M Over a Specific Time Interval — IndirectStd","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") sigma <- matrix(   data = c(     0.24455556, 0.02201587, -0.05004762,     0.02201587, 0.07067800, 0.01539456,     -0.05004762, 0.01539456, 0.07553061   ),   nrow = 3 ) delta_t <- 1 IndirectStd(   phi = phi,   sigma = sigma,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\" ) #> [1] 0.1374"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBeta","title":"Monte Carlo Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBeta","text":"function generates Monte Carlo method sampling distribution elements matrix lagged coefficients \\(\\boldsymbol{\\beta}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBeta","text":"","code":"MCBeta(   phi,   vcov_phi_vec,   delta_t,   R,   test_phi = TRUE,   ncores = NULL,   seed = NULL,   tol = 0.01 )"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBeta","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. vcov_phi_vec Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\). delta_t Numeric. Time interval (\\(\\Delta t\\)). R Positive integer. Number replications. test_phi Logical. test_phi = TRUE, function tests stability generated drift matrix \\(\\boldsymbol{\\Phi}\\). test returns FALSE, function generates new drift matrix \\(\\boldsymbol{\\Phi}\\) runs test recursively test returns TRUE. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. seed Random seed. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBeta","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"MCBeta\"). output list length equal length delta_t. element output list following elements: est Estimated elements matrix lagged coefficients. thetahatstar matrix Monte Carlo elements matrix lagged coefficients.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBeta","text":"See Total().","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBeta.html","id":"monte-carlo-method","dir":"Reference","previous_headings":"","what":"Monte Carlo Method","title":"Monte Carlo Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBeta","text":"Let \\(\\boldsymbol{\\theta}\\) \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\). Based asymptotic properties maximum likelihood estimators, can assume estimators normally distributed around population parameters. $$   \t\\hat{\\boldsymbol{\\theta}}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\boldsymbol{\\theta},   \t\\mathbb{V} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right)   $$ Using distributional assumption, sampling distribution \\(\\hat{\\boldsymbol{\\theta}}\\) refer \\(\\hat{\\boldsymbol{\\theta}}^{\\ast}\\) can generated replacing population parameters sample estimates, , $$   \t\\hat{\\boldsymbol{\\theta}}^{\\ast}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\hat{\\boldsymbol{\\theta}},   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right) .   $$ Let \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) parameter function estimated parameters. sampling distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , refer \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}}^{\\ast} \\right)\\) , can generated using simulated estimates calculate \\(\\mathbf{g}\\). standard deviations simulated estimates standard errors. Percentiles corresponding \\(100 \\left( 1 - \\alpha \\right) \\%\\) confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBeta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBeta","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBeta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBeta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBeta","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- MCBeta(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   R = 100L # use a large value for R in actual research ) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>             interval     est     se   R    2.5%   97.5% #> from x to x        1  0.6998 0.0395 100  0.6123  0.7653 #> from x to m        1  0.5000 0.0342 100  0.4372  0.5625 #> from x to y        1 -0.1000 0.0349 100 -0.1728 -0.0344 #> from m to x        1  0.0000 0.0443 100 -0.0815  0.0965 #> from m to m        1  0.5999 0.0341 100  0.5311  0.6641 #> from m to y        1  0.3998 0.0318 100  0.3332  0.4560 #> from y to x        1  0.0000 0.0441 100 -0.0972  0.0852 #> from y to m        1  0.0000 0.0310 100 -0.0565  0.0632 #> from y to y        1  0.5001 0.0309 100  0.4406  0.5652 #>   # Range of time intervals --------------------------------------------------- mc <- MCBeta(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   R = 100L # use a large value for R in actual research ) plot(mc)           # Methods ------------------------------------------------------------------- # MCBeta has a number of methods including # print, summary, confint, and plot print(mc) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>             interval     est     se   R    2.5%   97.5% #> from x to x        1  0.6998 0.0479 100  0.6217  0.7987 #> from x to m        1  0.5000 0.0372 100  0.4233  0.5623 #> from x to y        1 -0.1000 0.0283 100 -0.1523 -0.0412 #> from m to x        1  0.0000 0.0399 100 -0.0831  0.0687 #> from m to m        1  0.5999 0.0333 100  0.5361  0.6602 #> from m to y        1  0.3998 0.0258 100  0.3490  0.4411 #> from y to x        1  0.0000 0.0371 100 -0.0752  0.0699 #> from y to m        1  0.0000 0.0323 100 -0.0475  0.0713 #> from y to y        1  0.5001 0.0241 100  0.4652  0.5530 #>  #> $`2` #>             interval    est     se   R    2.5%  97.5% #> from x to x        2 0.4897 0.0574 100  0.4116 0.6226 #> from x to m        2 0.6499 0.0578 100  0.5460 0.7631 #> from x to y        2 0.0799 0.0318 100  0.0173 0.1382 #> from m to x        2 0.0000 0.0489 100 -0.0975 0.0837 #> from m to m        2 0.3599 0.0497 100  0.2771 0.4631 #> from m to y        2 0.4398 0.0289 100  0.3813 0.4882 #> from y to x        2 0.0000 0.0445 100 -0.0891 0.0853 #> from y to m        2 0.0000 0.0493 100 -0.0908 0.0957 #> from y to y        2 0.2501 0.0293 100  0.2080 0.3112 #>  #> $`3` #>             interval    est     se   R    2.5%  97.5% #> from x to x        3 0.3427 0.0579 100  0.2710 0.4796 #> from x to m        3 0.6347 0.0709 100  0.5261 0.7974 #> from x to y        3 0.2508 0.0341 100  0.1789 0.3160 #> from m to x        3 0.0000 0.0489 100 -0.0937 0.0783 #> from m to m        3 0.2159 0.0601 100  0.1125 0.3444 #> from m to y        3 0.3638 0.0295 100  0.3080 0.4138 #> from y to x        3 0.0000 0.0407 100 -0.0792 0.0781 #> from y to m        3 0.0000 0.0569 100 -0.1086 0.1075 #> from y to y        3 0.1251 0.0302 100  0.0864 0.1967 #>  #> $`4` #>             interval    est     se   R    2.5%  97.5% #> from x to x        4 0.2398 0.0572 100  0.1666 0.3709 #> from x to m        4 0.5521 0.0782 100  0.4547 0.7447 #> from x to y        4 0.3449 0.0396 100  0.2776 0.4253 #> from m to x        4 0.0000 0.0455 100 -0.0866 0.0807 #> from m to m        4 0.1295 0.0655 100  0.0130 0.2628 #> from m to y        4 0.2683 0.0329 100  0.2090 0.3389 #> from y to x        4 0.0000 0.0337 100 -0.0615 0.0661 #> from y to m        4 0.0000 0.0572 100 -0.1087 0.1105 #> from y to y        4 0.0625 0.0325 100  0.0135 0.1351 #>  #> $`5` #>             interval    est     se   R    2.5%  97.5% #> from x to x        5 0.1678 0.0568 100  0.0867 0.3132 #> from x to m        5 0.4511 0.0819 100  0.3539 0.6567 #> from x to y        5 0.3693 0.0454 100  0.3097 0.4771 #> from m to x        5 0.0000 0.0403 100 -0.0756 0.0787 #> from m to m        5 0.0777 0.0662 100 -0.0330 0.2049 #> from m to y        5 0.1859 0.0373 100  0.1250 0.2679 #> from y to x        5 0.0000 0.0268 100 -0.0462 0.0560 #> from y to m        5 0.0000 0.0528 100 -0.0974 0.1060 #> from y to y        5 0.0313 0.0350 100 -0.0252 0.0971 #>  summary(mc) #>         effect interval         est         se   R        2.5%       97.5% #> 1  from x to x        1  0.69977250 0.04786675 100  0.62172403  0.79874753 #> 2  from x to m        1  0.50003412 0.03718497 100  0.42325918  0.56229947 #> 3  from x to y        1 -0.10003837 0.02828969 100 -0.15232781 -0.04123191 #> 4  from m to x        1  0.00000000 0.03992663 100 -0.08309181  0.06870048 #> 5  from m to m        1  0.59989538 0.03326623 100  0.53611751  0.66024544 #> 6  from m to y        1  0.39983562 0.02577353 100  0.34904206  0.44107580 #> 7  from y to x        1  0.00000000 0.03707496 100 -0.07516818  0.06985211 #> 8  from y to m        1  0.00000000 0.03234207 100 -0.04753145  0.07133458 #> 9  from y to y        1  0.50007360 0.02411597 100  0.46515192  0.55299508 #> 10 from x to x        2  0.48968155 0.05741102 100  0.41161279  0.62262364 #> 11 from x to m        2  0.64987829 0.05776830 100  0.54595994  0.76312096 #> 12 from x to y        2  0.07990080 0.03177536 100  0.01734713  0.13816481 #> 13 from m to x        2  0.00000000 0.04893166 100 -0.09753023  0.08374131 #> 14 from m to m        2  0.35987447 0.04965256 100  0.27706960  0.46307954 #> 15 from m to y        2  0.43980678 0.02885193 100  0.38132743  0.48822358 #> 16 from y to x        2  0.00000000 0.04445760 100 -0.08913858  0.08529630 #> 17 from y to m        2  0.00000000 0.04933942 100 -0.09080343  0.09573818 #> 18 from y to y        2  0.25007360 0.02932592 100  0.20802246  0.31124751 #> 19 from x to x        3  0.34266568 0.05791955 100  0.27099116  0.47958487 #> 20 from x to m        3  0.63471647 0.07093977 100  0.52606339  0.79739417 #> 21 from x to y        3  0.25081383 0.03411898 100  0.17891544  0.31595326 #> 22 from m to x        3  0.00000000 0.04893190 100 -0.09374183  0.07830556 #> 23 from m to m        3  0.21588703 0.06011584 100  0.11251361  0.34437473 #> 24 from m to y        3  0.36382639 0.02947249 100  0.30801023  0.41379039 #> 25 from y to x        3  0.00000000 0.04071142 100 -0.07920504  0.07814819 #> 26 from y to m        3  0.00000000 0.05688617 100 -0.10862134  0.10752526 #> 27 from y to y        3  0.12505520 0.03022152 100  0.08639794  0.19667600 #> 28 from x to x        4  0.23978802 0.05722555 100  0.16662023  0.37091634 #> 29 from x to m        4  0.55210801 0.07815629 100  0.45470526  0.74465355 #> 30 from x to y        4  0.34492791 0.03955381 100  0.27762014  0.42528849 #> 31 from m to x        4  0.00000000 0.04549307 100 -0.08664498  0.08069059 #> 32 from m to m        4  0.12950963 0.06546897 100  0.01300602  0.26278517 #> 33 from m to y        4  0.26825930 0.03286230 100  0.20901912  0.33888337 #> 34 from y to x        4  0.00000000 0.03374871 100 -0.06149070  0.06614243 #> 35 from y to m        4  0.00000000 0.05716699 100 -0.10867847  0.11051060 #> 36 from y to y        4  0.06253681 0.03251678 100  0.01346188  0.13508616 #> 37 from x to x        5  0.16779706 0.05678611 100  0.08673995  0.31323136 #> 38 from x to m        5  0.45110924 0.08186486 100  0.35387853  0.65674061 #> 39 from x to y        5  0.36925379 0.04543535 100  0.30966378  0.47707320 #> 40 from m to x        5  0.00000000 0.04033134 100 -0.07559840  0.07873901 #> 41 from m to m        5  0.07769223 0.06621431 100 -0.03300829  0.20494763 #> 42 from m to y        5  0.18593196 0.03730317 100  0.12500037  0.26786178 #> 43 from y to x        5  0.00000000 0.02675113 100 -0.04617549  0.05602058 #> 44 from y to m        5  0.00000000 0.05283551 100 -0.09741901  0.10601744 #> 45 from y to y        5  0.03127301 0.03497054 100 -0.02520207  0.09709249 confint(mc, level = 0.95) #>         effect interval       2.5 %      97.5 % #> 1  from x to x        1  0.62172403  0.79874753 #> 2  from x to m        1  0.42325918  0.56229947 #> 3  from x to y        1 -0.15232781 -0.04123191 #> 4  from x to x        2  0.41161279  0.62262364 #> 5  from x to m        2  0.54595994  0.76312096 #> 6  from x to y        2  0.01734713  0.13816481 #> 7  from x to x        3  0.27099116  0.47958487 #> 8  from x to m        3  0.52606339  0.79739417 #> 9  from x to y        3  0.17891544  0.31595326 #> 10 from x to x        4  0.16662023  0.37091634 #> 11 from x to m        4  0.45470526  0.74465355 #> 12 from x to y        4  0.27762014  0.42528849 #> 13 from x to x        5  0.08673995  0.31323136 #> 14 from x to m        5  0.35387853  0.65674061 #> 15 from x to y        5  0.30966378  0.47707320 plot(mc)"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBetaStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBetaStd","title":"Monte Carlo Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBetaStd","text":"function generates Monte Carlo method sampling distribution elements standardized matrix lagged coefficients \\(\\boldsymbol{\\beta}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\) process noise covariance matrix \\(\\boldsymbol{\\Sigma}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBetaStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBetaStd","text":"","code":"MCBetaStd(   phi,   sigma,   vcov_theta,   delta_t,   R,   test_phi = TRUE,   ncores = NULL,   seed = NULL,   tol = 0.01 )"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBetaStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBetaStd","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. sigma Numeric matrix. process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). vcov_theta Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\) \\(\\mathrm{vech} \\left( \\boldsymbol{\\Sigma} \\right)\\) delta_t Numeric. Time interval (\\(\\Delta t\\)). R Positive integer. Number replications. test_phi Logical. test_phi = TRUE, function tests stability generated drift matrix \\(\\boldsymbol{\\Phi}\\). test returns FALSE, function generates new drift matrix \\(\\boldsymbol{\\Phi}\\) runs test recursively test returns TRUE. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. seed Random seed. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBetaStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBetaStd","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"MCBetaStd\"). output list length equal length delta_t. element output list following elements: est Estimated elements standardized matrix lagged coefficients. thetahatstar matrix Monte Carlo elements standardized matrix lagged coefficients.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBetaStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBetaStd","text":"See TotalStd().","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBetaStd.html","id":"monte-carlo-method","dir":"Reference","previous_headings":"","what":"Monte Carlo Method","title":"Monte Carlo Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBetaStd","text":"Let \\(\\boldsymbol{\\theta}\\) vector combines \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise \\(\\mathrm{vech} \\left( \\boldsymbol{\\Sigma} \\right)\\), , unique elements \\(\\boldsymbol{\\Sigma}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) vector combines \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\) \\(\\mathrm{vech} \\left( \\hat{\\boldsymbol{\\Sigma}} \\right)\\). Based asymptotic properties maximum likelihood estimators, can assume estimators normally distributed around population parameters. $$   \t\\hat{\\boldsymbol{\\theta}}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\boldsymbol{\\theta},   \t\\mathbb{V} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right)   $$ Using distributional assumption, sampling distribution \\(\\hat{\\boldsymbol{\\theta}}\\) refer \\(\\hat{\\boldsymbol{\\theta}}^{\\ast}\\) can generated replacing population parameters sample estimates, , $$   \t\\hat{\\boldsymbol{\\theta}}^{\\ast}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\hat{\\boldsymbol{\\theta}},   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right) .   $$ Let \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) parameter function estimated parameters. sampling distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , refer \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}}^{\\ast} \\right)\\) , can generated using simulated estimates calculate \\(\\mathbf{g}\\). standard deviations simulated estimates standard errors. Percentiles corresponding \\(100 \\left( 1 - \\alpha \\right) \\%\\) confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBetaStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBetaStd","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBetaStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBetaStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCBetaStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Sampling Distribution for the Elements of the Standardized Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — MCBetaStd","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") sigma <- matrix(   data = c(     0.24455556, 0.02201587, -0.05004762,     0.02201587, 0.07067800, 0.01539456,     -0.05004762, 0.01539456, 0.07553061   ),   nrow = 3 ) vcov_theta <- matrix(   data = c(     0.00843, 0.00040, -0.00151, -0.00600, -0.00033,     0.00110, 0.00324, 0.00020, -0.00061, -0.00115,     0.00011, 0.00015, 0.00001, -0.00002, -0.00001,     0.00040, 0.00374, 0.00016, -0.00022, -0.00273,     -0.00016, 0.00009, 0.00150, 0.00012, -0.00010,     -0.00026, 0.00002, 0.00012, 0.00004, -0.00001,     -0.00151, 0.00016, 0.00389, 0.00103, -0.00007,     -0.00283, -0.00050, 0.00000, 0.00156, 0.00021,     -0.00005, -0.00031, 0.00001, 0.00007, 0.00006,     -0.00600, -0.00022, 0.00103, 0.00644, 0.00031,     -0.00119, -0.00374, -0.00021, 0.00070, 0.00064,     -0.00015, -0.00005, 0.00000, 0.00003, -0.00001,     -0.00033, -0.00273, -0.00007, 0.00031, 0.00287,     0.00013, -0.00014, -0.00170, -0.00012, 0.00006,     0.00014, -0.00001, -0.00015, 0.00000, 0.00001,     0.00110, -0.00016, -0.00283, -0.00119, 0.00013,     0.00297, 0.00063, -0.00004, -0.00177, -0.00013,     0.00005, 0.00017, -0.00002, -0.00008, 0.00001,     0.00324, 0.00009, -0.00050, -0.00374, -0.00014,     0.00063, 0.00495, 0.00024, -0.00093, -0.00020,     0.00006, -0.00010, 0.00000, -0.00001, 0.00004,     0.00020, 0.00150, 0.00000, -0.00021, -0.00170,     -0.00004, 0.00024, 0.00214, 0.00012, -0.00002,     -0.00004, 0.00000, 0.00006, -0.00005, -0.00001,     -0.00061, 0.00012, 0.00156, 0.00070, -0.00012,     -0.00177, -0.00093, 0.00012, 0.00223, 0.00004,     -0.00002, -0.00003, 0.00001, 0.00003, -0.00013,     -0.00115, -0.00010, 0.00021, 0.00064, 0.00006,     -0.00013, -0.00020, -0.00002, 0.00004, 0.00057,     0.00001, -0.00009, 0.00000, 0.00000, 0.00001,     0.00011, -0.00026, -0.00005, -0.00015, 0.00014,     0.00005, 0.00006, -0.00004, -0.00002, 0.00001,     0.00012, 0.00001, 0.00000, -0.00002, 0.00000,     0.00015, 0.00002, -0.00031, -0.00005, -0.00001,     0.00017, -0.00010, 0.00000, -0.00003, -0.00009,     0.00001, 0.00014, 0.00000, 0.00000, -0.00005,     0.00001, 0.00012, 0.00001, 0.00000, -0.00015,     -0.00002, 0.00000, 0.00006, 0.00001, 0.00000,     0.00000, 0.00000, 0.00010, 0.00001, 0.00000,     -0.00002, 0.00004, 0.00007, 0.00003, 0.00000,     -0.00008, -0.00001, -0.00005, 0.00003, 0.00000,     -0.00002, 0.00000, 0.00001, 0.00005, 0.00001,     -0.00001, -0.00001, 0.00006, -0.00001, 0.00001,     0.00001, 0.00004, -0.00001, -0.00013, 0.00001,     0.00000, -0.00005, 0.00000, 0.00001, 0.00012   ),   nrow = 15 )  # Specific time interval ---------------------------------------------------- MCBetaStd(   phi = phi,   sigma = sigma,   vcov_theta = vcov_theta,   delta_t = 1,   R = 100L # use a large value for R in actual research ) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>             interval     est     se   R    2.5%   97.5% #> from x to x        1  0.6998 0.0493 100  0.5952  0.8043 #> from x to m        1  0.6176 0.0612 100  0.4981  0.7106 #> from x to y        1 -0.0821 0.0261 100 -0.1404 -0.0331 #> from m to x        1  0.0000 0.0313 100 -0.0618  0.0567 #> from m to m        1  0.5999 0.0307 100  0.5578  0.6694 #> from m to y        1  0.2656 0.0308 100  0.2087  0.3300 #> from y to x        1  0.0000 0.0462 100 -0.0991  0.0779 #> from y to m        1  0.0000 0.0439 100 -0.0987  0.0736 #> from y to y        1  0.5001 0.0286 100  0.4538  0.5538 #>   # Range of time intervals --------------------------------------------------- mc <- MCBetaStd(   phi = phi,   sigma = sigma,   vcov_theta = vcov_theta,   delta_t = 1:5,   R = 100L # use a large value for R in actual research ) plot(mc)           # Methods ------------------------------------------------------------------- # MCBetaStd has a number of methods including # print, summary, confint, and plot print(mc) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>             interval     est     se   R    2.5%   97.5% #> from x to x        1  0.6998 0.0458 100  0.6098  0.7961 #> from x to m        1  0.6176 0.0613 100  0.4931  0.7319 #> from x to y        1 -0.0821 0.0275 100 -0.1338 -0.0288 #> from m to x        1  0.0000 0.0341 100 -0.0723  0.0688 #> from m to m        1  0.5999 0.0323 100  0.5396  0.6545 #> from m to y        1  0.2656 0.0315 100  0.2007  0.3247 #> from y to x        1  0.0000 0.0557 100 -0.1036  0.1078 #> from y to m        1  0.0000 0.0478 100 -0.0850  0.1011 #> from y to y        1  0.5001 0.0265 100  0.4555  0.5554 #>  #> $`2` #>             interval    est     se   R    2.5%  97.5% #> from x to x        2 0.4897 0.0530 100  0.4098 0.6038 #> from x to m        2 0.8027 0.0902 100  0.6319 0.9957 #> from x to y        2 0.0656 0.0297 100  0.0149 0.1180 #> from m to x        2 0.0000 0.0394 100 -0.0783 0.0741 #> from m to m        2 0.3599 0.0482 100  0.2711 0.4316 #> from m to y        2 0.2922 0.0387 100  0.2172 0.3665 #> from y to x        2 0.0000 0.0672 100 -0.1265 0.1317 #> from y to m        2 0.0000 0.0775 100 -0.1528 0.1671 #> from y to y        2 0.2501 0.0307 100  0.1958 0.3056 #>  #> $`3` #>             interval    est     se   R    2.5%  97.5% #> from x to x        3 0.3427 0.0528 100  0.2622 0.4434 #> from x to m        3 0.7840 0.1032 100  0.5973 1.0142 #> from x to y        3 0.2058 0.0372 100  0.1319 0.2794 #> from m to x        3 0.0000 0.0382 100 -0.0780 0.0694 #> from m to m        3 0.2159 0.0565 100  0.1054 0.3108 #> from m to y        3 0.2417 0.0375 100  0.1862 0.3103 #> from y to x        3 0.0000 0.0617 100 -0.1219 0.1209 #> from y to m        3 0.0000 0.0940 100 -0.1821 0.1891 #> from y to y        3 0.1251 0.0288 100  0.0732 0.1724 #>  #> $`4` #>             interval    est     se   R    2.5%  97.5% #> from x to x        4 0.2398 0.0514 100  0.1597 0.3290 #> from x to m        4 0.6820 0.1061 100  0.4954 0.8820 #> from x to y        4 0.2830 0.0460 100  0.1993 0.3634 #> from m to x        4 0.0000 0.0354 100 -0.0625 0.0679 #> from m to m        4 0.1295 0.0593 100  0.0053 0.2421 #> from m to y        4 0.1782 0.0341 100  0.1274 0.2439 #> from y to x        4 0.0000 0.0511 100 -0.1044 0.0996 #> from y to m        4 0.0000 0.0976 100 -0.1917 0.1959 #> from y to y        4 0.0625 0.0304 100  0.0085 0.1241 #>  #> $`5` #>             interval    est     se   R    2.5%  97.5% #> from x to x        5 0.1678 0.0499 100  0.0819 0.2714 #> from x to m        5 0.5572 0.1036 100  0.3829 0.7479 #> from x to y        5 0.3030 0.0510 100  0.2116 0.3881 #> from m to x        5 0.0000 0.0318 100 -0.0477 0.0647 #> from m to m        5 0.0777 0.0586 100 -0.0316 0.2029 #> from m to y        5 0.1235 0.0307 100  0.0740 0.1951 #> from y to x        5 0.0000 0.0402 100 -0.0832 0.0813 #> from y to m        5 0.0000 0.0918 100 -0.1800 0.1870 #> from y to y        5 0.0313 0.0342 100 -0.0316 0.0922 #>  summary(mc) #>         effect interval         est         se   R         2.5%       97.5% #> 1  from x to x        1  0.69977250 0.04584153 100  0.609800263  0.79613691 #> 2  from x to m        1  0.61764568 0.06128700 100  0.493134448  0.73190335 #> 3  from x to y        1 -0.08208640 0.02753339 100 -0.133798007 -0.02879311 #> 4  from m to x        1  0.00000000 0.03412521 100 -0.072262263  0.06879701 #> 5  from m to m        1  0.59989538 0.03228086 100  0.539629131  0.65446006 #> 6  from m to y        1  0.26561115 0.03154811 100  0.200749567  0.32468789 #> 7  from y to x        1  0.00000000 0.05568807 100 -0.103611096  0.10779402 #> 8  from y to m        1  0.00000000 0.04780757 100 -0.085005220  0.10106734 #> 9  from y to y        1  0.50007360 0.02653763 100  0.455466431  0.55535984 #> 10 from x to x        2  0.48968155 0.05301609 100  0.409792609  0.60379349 #> 11 from x to m        2  0.80273425 0.09024416 100  0.631857358  0.99565077 #> 12 from x to y        2  0.06556253 0.02966750 100  0.014869973  0.11796559 #> 13 from m to x        2  0.00000000 0.03943653 100 -0.078342830  0.07406780 #> 14 from m to m        2  0.35987447 0.04819742 100  0.271065357  0.43159309 #> 15 from m to y        2  0.29216402 0.03872279 100  0.217216178  0.36645472 #> 16 from y to x        2  0.00000000 0.06721640 100 -0.126521672  0.13165555 #> 17 from y to m        2  0.00000000 0.07745612 100 -0.152797467  0.16707823 #> 18 from y to y        2  0.25007360 0.03074378 100  0.195824888  0.30557324 #> 19 from x to x        3  0.34266568 0.05281164 100  0.262187269  0.44344399 #> 20 from x to m        3  0.78400626 0.10316152 100  0.597309843  1.01424325 #> 21 from x to y        3  0.20580506 0.03715937 100  0.131872013  0.27939255 #> 22 from m to x        3  0.00000000 0.03816529 100 -0.077996854  0.06940816 #> 23 from m to m        3  0.21588703 0.05650342 100  0.105419527  0.31077230 #> 24 from m to y        3  0.24169019 0.03753118 100  0.186247593  0.31027158 #> 25 from y to x        3  0.00000000 0.06173344 100 -0.121879857  0.12085280 #> 26 from y to m        3  0.00000000 0.09402318 100 -0.182129428  0.18911386 #> 27 from y to y        3  0.12505520 0.02884224 100  0.073229218  0.17243310 #> 28 from x to x        4  0.23978802 0.05135378 100  0.159681273  0.32901570 #> 29 from x to m        4  0.68196771 0.10610700 100  0.495402110  0.88202337 #> 30 from x to y        4  0.28303029 0.04597555 100  0.199261822  0.36341765 #> 31 from m to x        4  0.00000000 0.03538665 100 -0.062480212  0.06791291 #> 32 from m to m        4  0.12950963 0.05928525 100  0.005256487  0.24206241 #> 33 from m to y        4  0.17820488 0.03411219 100  0.127381439  0.24389508 #> 34 from y to x        4  0.00000000 0.05111280 100 -0.104370894  0.09964893 #> 35 from y to m        4  0.00000000 0.09756195 100 -0.191655850  0.19588779 #> 36 from y to y        4  0.06253681 0.03037461 100  0.008546347  0.12408688 #> 37 from x to x        5  0.16779706 0.04985991 100  0.081882464  0.27142605 #> 38 from x to m        5  0.55721332 0.10364480 100  0.382853759  0.74789881 #> 39 from x to y        5  0.30299087 0.05102810 100  0.211624069  0.38812042 #> 40 from m to x        5  0.00000000 0.03177575 100 -0.047671178  0.06473371 #> 41 from m to m        5  0.07769223 0.05857726 100 -0.031648320  0.20294748 #> 42 from m to y        5  0.12351476 0.03068478 100  0.074014409  0.19505470 #> 43 from y to x        5  0.00000000 0.04023623 100 -0.083172625  0.08132209 #> 44 from y to m        5  0.00000000 0.09176820 100 -0.179987843  0.18703980 #> 45 from y to y        5  0.03127301 0.03419857 100 -0.031634742  0.09222349 confint(mc, level = 0.95) #>         effect interval       2.5 %      97.5 % #> 1  from x to x        1  0.60980026  0.79613691 #> 2  from x to m        1  0.49313445  0.73190335 #> 3  from x to y        1 -0.13379801 -0.02879311 #> 4  from x to x        2  0.40979261  0.60379349 #> 5  from x to m        2  0.63185736  0.99565077 #> 6  from x to y        2  0.01486997  0.11796559 #> 7  from x to x        3  0.26218727  0.44344399 #> 8  from x to m        3  0.59730984  1.01424325 #> 9  from x to y        3  0.13187201  0.27939255 #> 10 from x to x        4  0.15968127  0.32901570 #> 11 from x to m        4  0.49540211  0.88202337 #> 12 from x to y        4  0.19926182  0.36341765 #> 13 from x to x        5  0.08188246  0.27142605 #> 14 from x to m        5  0.38285376  0.74789881 #> 15 from x to y        5  0.21162407  0.38812042 plot(mc)"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCIndirectCentral.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Sampling Distribution of Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCIndirectCentral","title":"Monte Carlo Sampling Distribution of Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCIndirectCentral","text":"function generates Monte Carlo method sampling distribution indirect effect centrality particular time interval \\(\\Delta t\\) using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCIndirectCentral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Sampling Distribution of Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCIndirectCentral","text":"","code":"MCIndirectCentral(   phi,   vcov_phi_vec,   delta_t,   R,   test_phi = TRUE,   ncores = NULL,   seed = NULL,   tol = 0.01 )"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCIndirectCentral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Sampling Distribution of Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCIndirectCentral","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. vcov_phi_vec Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\). delta_t Numeric. Time interval (\\(\\Delta t\\)). R Positive integer. Number replications. test_phi Logical. test_phi = TRUE, function tests stability generated drift matrix \\(\\boldsymbol{\\Phi}\\). test returns FALSE, function generates new drift matrix \\(\\boldsymbol{\\Phi}\\) runs test recursively test returns TRUE. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. seed Random seed. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCIndirectCentral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Sampling Distribution of Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCIndirectCentral","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"MCIndirectCentral\"). output list length equal length delta_t. element output list following elements: est vector indirect effect centrality. thetahatstar matrix Monte Carlo indirect effect centrality.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCIndirectCentral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Sampling Distribution of Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCIndirectCentral","text":"See IndirectCentral() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCIndirectCentral.html","id":"monte-carlo-method","dir":"Reference","previous_headings":"","what":"Monte Carlo Method","title":"Monte Carlo Sampling Distribution of Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCIndirectCentral","text":"Let \\(\\boldsymbol{\\theta}\\) \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\). Based asymptotic properties maximum likelihood estimators, can assume estimators normally distributed around population parameters. $$   \t\\hat{\\boldsymbol{\\theta}}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\boldsymbol{\\theta},   \t\\mathbb{V} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right)   $$ Using distributional assumption, sampling distribution \\(\\hat{\\boldsymbol{\\theta}}\\) refer \\(\\hat{\\boldsymbol{\\theta}}^{\\ast}\\) can generated replacing population parameters sample estimates, , $$   \t\\hat{\\boldsymbol{\\theta}}^{\\ast}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\hat{\\boldsymbol{\\theta}},   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right) .   $$ Let \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) parameter function estimated parameters. sampling distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , refer \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}}^{\\ast} \\right)\\) , can generated using simulated estimates calculate \\(\\mathbf{g}\\). standard deviations simulated estimates standard errors. Percentiles corresponding \\(100 \\left( 1 - \\alpha \\right) \\%\\) confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCIndirectCentral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Sampling Distribution of Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCIndirectCentral","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MCIndirectCentral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Sampling Distribution of Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCIndirectCentral","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCIndirectCentral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Sampling Distribution of Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCIndirectCentral","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- MCIndirectCentral(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   R = 100L # use a large value for R in actual research ) #>  #> Indirect Effect Centrality #>  #> $`1` #>   interval    est     se   R    2.5%  97.5% #> x        1 0.0000 0.0203 100 -0.0444 0.0410 #> m        1 0.1674 0.0188 100  0.1305 0.1977 #> y        1 0.0000 0.0147 100 -0.0284 0.0314 #>   # Range of time intervals --------------------------------------------------- mc <- MCIndirectCentral(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   R = 100L # use a large value for R in actual research ) plot(mc)     # Methods ------------------------------------------------------------------- # MCIndirectCentral has a number of methods including # print, summary, confint, and plot print(mc) #>  #> Indirect Effect Centrality #>  #> $`1` #>   interval    est     se   R    2.5%  97.5% #> x        1 0.0000 0.0170 100 -0.0295 0.0308 #> m        1 0.1674 0.0180 100  0.1303 0.1963 #> y        1 0.0000 0.0118 100 -0.0230 0.0202 #>  #> $`2` #>   interval    est     se   R    2.5%  97.5% #> x        2 0.0000 0.0336 100 -0.0634 0.0634 #> m        2 0.4008 0.0469 100  0.3220 0.4827 #> y        2 0.0000 0.0278 100 -0.0514 0.0505 #>  #> $`3` #>   interval    est     se   R    2.5%  97.5% #> x        3 0.0000 0.0419 100 -0.0840 0.0831 #> m        3 0.5423 0.0720 100  0.4312 0.6818 #> y        3 0.0000 0.0437 100 -0.0825 0.0803 #>  #> $`4` #>   interval    est     se   R    2.5%  97.5% #> x        4 0.0000 0.0478 100 -0.0883 0.0984 #> m        4 0.5823 0.0886 100  0.4541 0.7423 #> y        4 0.0000 0.0600 100 -0.1076 0.1108 #>  #> $`5` #>   interval    est     se   R    2.5%  97.5% #> x        5 0.0000 0.0530 100 -0.0973 0.1178 #> m        5 0.5521 0.0962 100  0.4252 0.7513 #> y        5 0.0000 0.0752 100 -0.1344 0.1433 #>  summary(mc) #>    variable interval           est         se   R        2.5%      97.5% #> 1         x        1  0.000000e+00 0.01702750 100 -0.02946115 0.03078001 #> 2         m        1  1.674155e-01 0.01800778 100  0.13031839 0.19627655 #> 3         y        1  0.000000e+00 0.01178016 100 -0.02303384 0.02016918 #> 4         x        2  0.000000e+00 0.03357564 100 -0.06341286 0.06338823 #> 5         m        2  4.008043e-01 0.04693412 100  0.32201871 0.48272977 #> 6         y        2  0.000000e+00 0.02783521 100 -0.05143210 0.05046176 #> 7         x        3  0.000000e+00 0.04188272 100 -0.08401670 0.08306488 #> 8         m        3  5.422564e-01 0.07203112 100  0.43118030 0.68179332 #> 9         y        3 -3.330669e-16 0.04365485 100 -0.08247399 0.08026091 #> 10        x        4  0.000000e+00 0.04777883 100 -0.08825453 0.09838660 #> 11        m        4  5.823179e-01 0.08862058 100  0.45405261 0.74231732 #> 12        y        4  0.000000e+00 0.05995403 100 -0.10764967 0.11081483 #> 13        x        5  0.000000e+00 0.05297871 100 -0.09725421 0.11782926 #> 14        m        5  5.520985e-01 0.09617044 100  0.42524627 0.75130033 #> 15        y        5  0.000000e+00 0.07516320 100 -0.13443815 0.14325074 confint(mc, level = 0.95) #>    variable interval       2.5 %     97.5 % #> 1         x        1 -0.02946115 0.03078001 #> 2         m        1  0.13031839 0.19627655 #> 3         y        1 -0.02303384 0.02016918 #> 4         x        2 -0.06341286 0.06338823 #> 5         m        2  0.32201871 0.48272977 #> 6         y        2 -0.05143210 0.05046176 #> 7         x        3 -0.08401670 0.08306488 #> 8         m        3  0.43118030 0.68179332 #> 9         y        3 -0.08247399 0.08026091 #> 10        x        4 -0.08825453 0.09838660 #> 11        m        4  0.45405261 0.74231732 #> 12        y        4 -0.10764967 0.11081483 #> 13        x        5 -0.09725421 0.11782926 #> 14        m        5  0.42524627 0.75130033 #> 15        y        5 -0.13443815 0.14325074 plot(mc)"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMed.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMed","title":"Monte Carlo Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMed","text":"function generates Monte Carlo method sampling distribution total, direct indirect effects independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMed","text":"","code":"MCMed(   phi,   vcov_phi_vec,   delta_t,   from,   to,   med,   R,   test_phi = TRUE,   ncores = NULL,   seed = NULL,   tol = 0.01 )"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMed","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. vcov_phi_vec Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\). delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi. R Positive integer. Number replications. test_phi Logical. test_phi = TRUE, function tests stability generated drift matrix \\(\\boldsymbol{\\Phi}\\). test returns FALSE, function generates new drift matrix \\(\\boldsymbol{\\Phi}\\) runs test recursively test returns TRUE. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. seed Random seed. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMed","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"MCMed\"). output list length length(delta_t). element output list following elements: est vector total, direct, indirect effects. thetahatstar matrix Monte Carlo total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMed","text":"See Total(), Direct(), Indirect() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMed.html","id":"monte-carlo-method","dir":"Reference","previous_headings":"","what":"Monte Carlo Method","title":"Monte Carlo Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMed","text":"Let \\(\\boldsymbol{\\theta}\\) \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\). Based asymptotic properties maximum likelihood estimators, can assume estimators normally distributed around population parameters. $$   \t\\hat{\\boldsymbol{\\theta}}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\boldsymbol{\\theta},   \t\\mathbb{V} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right)   $$ Using distributional assumption, sampling distribution \\(\\hat{\\boldsymbol{\\theta}}\\) refer \\(\\hat{\\boldsymbol{\\theta}}^{\\ast}\\) can generated replacing population parameters sample estimates, , $$   \t\\hat{\\boldsymbol{\\theta}}^{\\ast}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\hat{\\boldsymbol{\\theta}},   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right) .   $$ Let \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) parameter function estimated parameters. sampling distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , refer \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}}^{\\ast} \\right)\\) , can generated using simulated estimates calculate \\(\\mathbf{g}\\). standard deviations simulated estimates standard errors. Percentiles corresponding \\(100 \\left( 1 - \\alpha \\right) \\%\\) confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMed","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Sampling Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMed","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- MCMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se   R    2.5%   97.5% #> total           1 -0.1000 0.0349 100 -0.1728 -0.0344 #> direct          1 -0.2675 0.0454 100 -0.3531 -0.1803 #> indirect        1  0.1674 0.0189 100  0.1310  0.1991 #>   # Range of time intervals --------------------------------------------------- mc <- MCMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) plot(mc)     # Methods ------------------------------------------------------------------- # MCMed has a number of methods including # print, summary, confint, and plot print(mc) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se   R    2.5%   97.5% #> total           1 -0.1000 0.0283 100 -0.1523 -0.0412 #> direct          1 -0.2675 0.0379 100 -0.3410 -0.1958 #> indirect        1  0.1674 0.0181 100  0.1303  0.1973 #>  #> $`2` #>          interval     est     se   R    2.5%   97.5% #> total           2  0.0799 0.0318 100  0.0173  0.1382 #> direct          2 -0.3209 0.0533 100 -0.4335 -0.2250 #> indirect        2  0.4008 0.0472 100  0.3209  0.4844 #>  #> $`3` #>          interval     est     se   R    2.5%   97.5% #> total           3  0.2508 0.0341 100  0.1789  0.3160 #> direct          3 -0.2914 0.0600 100 -0.4250 -0.1953 #> indirect        3  0.5423 0.0723 100  0.4313  0.6825 #>  #> $`4` #>          interval     est     se   R    2.5%   97.5% #> total           4  0.3449 0.0396 100  0.2776  0.4253 #> direct          4 -0.2374 0.0614 100 -0.3713 -0.1499 #> indirect        4  0.5823 0.0888 100  0.4543  0.7487 #>  #> $`5` #>          interval     est     se   R    2.5%   97.5% #> total           5  0.3693 0.0454 100  0.3097  0.4771 #> direct          5 -0.1828 0.0592 100 -0.3156 -0.1139 #> indirect        5  0.5521 0.0964 100  0.4232  0.7533 #>  summary(mc) #>      effect interval        est         se   R        2.5%       97.5% #> 1     total        1 -0.1000384 0.02828969 100 -0.15232781 -0.04123191 #> 2    direct        1 -0.2674539 0.03785126 100 -0.34098924 -0.19575030 #> 3  indirect        1  0.1674155 0.01813653 100  0.13034214  0.19730024 #> 4     total        2  0.0799008 0.03177536 100  0.01734713  0.13816481 #> 5    direct        2 -0.3209035 0.05331547 100 -0.43347383 -0.22496835 #> 6  indirect        2  0.4008043 0.04715986 100  0.32090375  0.48438931 #> 7     total        3  0.2508138 0.03411898 100  0.17891544  0.31595326 #> 8    direct        3 -0.2914426 0.06004235 100 -0.42496332 -0.19529856 #> 9  indirect        3  0.5422564 0.07226284 100  0.43134204  0.68245524 #> 10    total        4  0.3449279 0.03955381 100  0.27762014  0.42528849 #> 11   direct        4 -0.2373900 0.06142283 100 -0.37132486 -0.14987686 #> 12 indirect        4  0.5823179 0.08884600 100  0.45427525  0.74867661 #> 13    total        5  0.3692538 0.04543535 100  0.30966378  0.47707320 #> 14   direct        5 -0.1828447 0.05923691 100 -0.31560524 -0.11390776 #> 15 indirect        5  0.5520985 0.09636387 100  0.42321469  0.75325267 confint(mc, level = 0.95) #>      effect interval       2.5 %      97.5 % #> 1     total        1 -0.15232781 -0.04123191 #> 2    direct        1 -0.34098924 -0.19575030 #> 3  indirect        1  0.13034214  0.19730024 #> 4     total        2  0.01734713  0.13816481 #> 5    direct        2 -0.43347383 -0.22496835 #> 6  indirect        2  0.32090375  0.48438931 #> 7     total        3  0.17891544  0.31595326 #> 8    direct        3 -0.42496332 -0.19529856 #> 9  indirect        3  0.43134204  0.68245524 #> 10    total        4  0.27762014  0.42528849 #> 11   direct        4 -0.37132486 -0.14987686 #> 12 indirect        4  0.45427525  0.74867661 #> 13    total        5  0.30966378  0.47707320 #> 14   direct        5 -0.31560524 -0.11390776 #> 15 indirect        5  0.42321469  0.75325267"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMedStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMedStd","title":"Monte Carlo Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMedStd","text":"function generates Monte Carlo method sampling distribution standardized total, direct indirect effects independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\) process noise covariance matrix \\(\\boldsymbol{\\Sigma}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMedStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMedStd","text":"","code":"MCMedStd(   phi,   sigma,   vcov_theta,   delta_t,   from,   to,   med,   R,   test_phi = TRUE,   ncores = NULL,   seed = NULL,   tol = 0.01 )"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMedStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMedStd","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. sigma Numeric matrix. process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). vcov_theta Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\) \\(\\mathrm{vech} \\left( \\boldsymbol{\\Sigma} \\right)\\) delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi. R Positive integer. Number replications. test_phi Logical. test_phi = TRUE, function tests stability generated drift matrix \\(\\boldsymbol{\\Phi}\\). test returns FALSE, function generates new drift matrix \\(\\boldsymbol{\\Phi}\\) runs test recursively test returns TRUE. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. seed Random seed. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMedStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMedStd","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"MCMedStd\"). output list length length(delta_t). element output list following elements: est vector standardized total, direct, indirect effects. thetahatstar matrix Monte Carlo standardized total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMedStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMedStd","text":"See TotalStd(), DirectStd(), IndirectStd() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMedStd.html","id":"monte-carlo-method","dir":"Reference","previous_headings":"","what":"Monte Carlo Method","title":"Monte Carlo Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMedStd","text":"Let \\(\\boldsymbol{\\theta}\\) vector combines \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise \\(\\mathrm{vech} \\left( \\boldsymbol{\\Sigma} \\right)\\), , unique elements \\(\\boldsymbol{\\Sigma}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) vector combines \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\) \\(\\mathrm{vech} \\left( \\hat{\\boldsymbol{\\Sigma}} \\right)\\). Based asymptotic properties maximum likelihood estimators, can assume estimators normally distributed around population parameters. $$   \t\\hat{\\boldsymbol{\\theta}}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\boldsymbol{\\theta},   \t\\mathbb{V} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right)   $$ Using distributional assumption, sampling distribution \\(\\hat{\\boldsymbol{\\theta}}\\) refer \\(\\hat{\\boldsymbol{\\theta}}^{\\ast}\\) can generated replacing population parameters sample estimates, , $$   \t\\hat{\\boldsymbol{\\theta}}^{\\ast}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\hat{\\boldsymbol{\\theta}},   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right) .   $$ Let \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) parameter function estimated parameters. sampling distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , refer \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}}^{\\ast} \\right)\\) , can generated using simulated estimates calculate \\(\\mathbf{g}\\). standard deviations simulated estimates standard errors. Percentiles corresponding \\(100 \\left( 1 - \\alpha \\right) \\%\\) confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMedStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMedStd","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMedStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMedStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCMedStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Sampling Distribution of Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MCMedStd","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") sigma <- matrix(   data = c(     0.24455556, 0.02201587, -0.05004762,     0.02201587, 0.07067800, 0.01539456,     -0.05004762, 0.01539456, 0.07553061   ),   nrow = 3 ) vcov_theta <- matrix(   data = c(     0.00843, 0.00040, -0.00151, -0.00600, -0.00033,     0.00110, 0.00324, 0.00020, -0.00061, -0.00115,     0.00011, 0.00015, 0.00001, -0.00002, -0.00001,     0.00040, 0.00374, 0.00016, -0.00022, -0.00273,     -0.00016, 0.00009, 0.00150, 0.00012, -0.00010,     -0.00026, 0.00002, 0.00012, 0.00004, -0.00001,     -0.00151, 0.00016, 0.00389, 0.00103, -0.00007,     -0.00283, -0.00050, 0.00000, 0.00156, 0.00021,     -0.00005, -0.00031, 0.00001, 0.00007, 0.00006,     -0.00600, -0.00022, 0.00103, 0.00644, 0.00031,     -0.00119, -0.00374, -0.00021, 0.00070, 0.00064,     -0.00015, -0.00005, 0.00000, 0.00003, -0.00001,     -0.00033, -0.00273, -0.00007, 0.00031, 0.00287,     0.00013, -0.00014, -0.00170, -0.00012, 0.00006,     0.00014, -0.00001, -0.00015, 0.00000, 0.00001,     0.00110, -0.00016, -0.00283, -0.00119, 0.00013,     0.00297, 0.00063, -0.00004, -0.00177, -0.00013,     0.00005, 0.00017, -0.00002, -0.00008, 0.00001,     0.00324, 0.00009, -0.00050, -0.00374, -0.00014,     0.00063, 0.00495, 0.00024, -0.00093, -0.00020,     0.00006, -0.00010, 0.00000, -0.00001, 0.00004,     0.00020, 0.00150, 0.00000, -0.00021, -0.00170,     -0.00004, 0.00024, 0.00214, 0.00012, -0.00002,     -0.00004, 0.00000, 0.00006, -0.00005, -0.00001,     -0.00061, 0.00012, 0.00156, 0.00070, -0.00012,     -0.00177, -0.00093, 0.00012, 0.00223, 0.00004,     -0.00002, -0.00003, 0.00001, 0.00003, -0.00013,     -0.00115, -0.00010, 0.00021, 0.00064, 0.00006,     -0.00013, -0.00020, -0.00002, 0.00004, 0.00057,     0.00001, -0.00009, 0.00000, 0.00000, 0.00001,     0.00011, -0.00026, -0.00005, -0.00015, 0.00014,     0.00005, 0.00006, -0.00004, -0.00002, 0.00001,     0.00012, 0.00001, 0.00000, -0.00002, 0.00000,     0.00015, 0.00002, -0.00031, -0.00005, -0.00001,     0.00017, -0.00010, 0.00000, -0.00003, -0.00009,     0.00001, 0.00014, 0.00000, 0.00000, -0.00005,     0.00001, 0.00012, 0.00001, 0.00000, -0.00015,     -0.00002, 0.00000, 0.00006, 0.00001, 0.00000,     0.00000, 0.00000, 0.00010, 0.00001, 0.00000,     -0.00002, 0.00004, 0.00007, 0.00003, 0.00000,     -0.00008, -0.00001, -0.00005, 0.00003, 0.00000,     -0.00002, 0.00000, 0.00001, 0.00005, 0.00001,     -0.00001, -0.00001, 0.00006, -0.00001, 0.00001,     0.00001, 0.00004, -0.00001, -0.00013, 0.00001,     0.00000, -0.00005, 0.00000, 0.00001, 0.00012   ),   nrow = 15 )  # Specific time interval ---------------------------------------------------- MCMedStd(   phi = phi,   sigma = sigma,   vcov_theta = vcov_theta,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se   R    2.5%   97.5% #> total           1 -0.0821 0.0261 100 -0.1404 -0.0331 #> direct          1 -0.2195 0.0383 100 -0.2931 -0.1551 #> indirect        1  0.1374 0.0209 100  0.1006  0.1858 #>   # Range of time intervals --------------------------------------------------- mc <- MCMedStd(   phi = phi,   sigma = sigma,   vcov_theta = vcov_theta,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) plot(mc)     # Methods ------------------------------------------------------------------- # MCMedStd has a number of methods including # print, summary, confint, and plot print(mc) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se   R    2.5%   97.5% #> total           1 -0.0821 0.0275 100 -0.1338 -0.0288 #> direct          1 -0.2195 0.0404 100 -0.2897 -0.1462 #> indirect        1  0.1374 0.0202 100  0.0996  0.1721 #>  #> $`2` #>          interval     est     se   R    2.5%   97.5% #> total           2  0.0656 0.0297 100  0.0149  0.1180 #> direct          2 -0.2633 0.0525 100 -0.3610 -0.1727 #> indirect        2  0.3289 0.0507 100  0.2364  0.4170 #>  #> $`3` #>          interval     est     se   R    2.5%   97.5% #> total           3  0.2058 0.0372 100  0.1319  0.2794 #> direct          3 -0.2391 0.0544 100 -0.3433 -0.1509 #> indirect        3  0.4449 0.0741 100  0.3154  0.5872 #>  #> $`4` #>          interval     est     se   R    2.5%   97.5% #> total           4  0.2830 0.0460 100  0.1993  0.3634 #> direct          4 -0.1948 0.0522 100 -0.3128 -0.1180 #> indirect        4  0.4778 0.0870 100  0.3300  0.6436 #>  #> $`5` #>          interval    est     se   R    2.5%   97.5% #> total           5  0.303 0.0510 100  0.2116  0.3881 #> direct          5 -0.150 0.0482 100 -0.2672 -0.0853 #> indirect        5  0.453 0.0904 100  0.3052  0.6268 #>  summary(mc) #>      effect interval         est         se   R        2.5%       97.5% #> 1     total        1 -0.08208640 0.02753339 100 -0.13379801 -0.02879311 #> 2    direct        1 -0.21945905 0.04035590 100 -0.28969410 -0.14619124 #> 3  indirect        1  0.13737265 0.02018029 100  0.09955378  0.17213670 #> 4     total        2  0.06556253 0.02966750 100  0.01486997  0.11796559 #> 5    direct        2 -0.26331708 0.05250406 100 -0.36101238 -0.17268384 #> 6  indirect        2  0.32887961 0.05067038 100  0.23638678  0.41699956 #> 7     total        3  0.20580506 0.03715937 100  0.13187201  0.27939255 #> 8    direct        3 -0.23914297 0.05439742 100 -0.34334765 -0.15092387 #> 9  indirect        3  0.44494803 0.07413362 100  0.31539838  0.58722360 #> 10    total        4  0.28303029 0.04597555 100  0.19926182  0.36341765 #> 11   direct        4 -0.19479017 0.05218915 100 -0.31284240 -0.11796187 #> 12 indirect        4  0.47782046 0.08702753 100  0.33004458  0.64364837 #> 13    total        5  0.30299087 0.05102810 100  0.21162407  0.38812042 #> 14   direct        5 -0.15003307 0.04815561 100 -0.26716206 -0.08525410 #> 15 indirect        5  0.45302394 0.09037194 100  0.30520242  0.62677049 confint(mc, level = 0.95) #>      effect interval       2.5 %      97.5 % #> 1     total        1 -0.13379801 -0.02879311 #> 2    direct        1 -0.28969410 -0.14619124 #> 3  indirect        1  0.09955378  0.17213670 #> 4     total        2  0.01486997  0.11796559 #> 5    direct        2 -0.36101238 -0.17268384 #> 6  indirect        2  0.23638678  0.41699956 #> 7     total        3  0.13187201  0.27939255 #> 8    direct        3 -0.34334765 -0.15092387 #> 9  indirect        3  0.31539838  0.58722360 #> 10    total        4  0.19926182  0.36341765 #> 11   direct        4 -0.31284240 -0.11796187 #> 12 indirect        4  0.33004458  0.64364837 #> 13    total        5  0.21162407  0.38812042 #> 14   direct        5 -0.26716206 -0.08525410 #> 15 indirect        5  0.30520242  0.62677049"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhi.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Random Drift Matrices Using the Monte Carlo Method — MCPhi","title":"Generate Random Drift Matrices Using the Monte Carlo Method — MCPhi","text":"function generates random drift matrices \\(\\boldsymbol{\\Phi}\\) using Monte Carlo method.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Random Drift Matrices Using the Monte Carlo Method — MCPhi","text":"","code":"MCPhi(phi, vcov_phi_vec, R, test_phi = TRUE, ncores = NULL, seed = NULL)"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Random Drift Matrices Using the Monte Carlo Method — MCPhi","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. vcov_phi_vec Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\). R Positive integer. Number replications. test_phi Logical. test_phi = TRUE, function tests stability generated drift matrix \\(\\boldsymbol{\\Phi}\\). test returns FALSE, function generates new drift matrix \\(\\boldsymbol{\\Phi}\\) runs test recursively test returns TRUE. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. seed Random seed.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Random Drift Matrices Using the Monte Carlo Method — MCPhi","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"MCPhi\"). output list simulated drift matrices.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhi.html","id":"monte-carlo-method","dir":"Reference","previous_headings":"","what":"Monte Carlo Method","title":"Generate Random Drift Matrices Using the Monte Carlo Method — MCPhi","text":"Let \\(\\boldsymbol{\\theta}\\) \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\). Based asymptotic properties maximum likelihood estimators, can assume estimators normally distributed around population parameters. $$   \t\\hat{\\boldsymbol{\\theta}}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\boldsymbol{\\theta},   \t\\mathbb{V} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right)   $$ Using distributional assumption, sampling distribution \\(\\hat{\\boldsymbol{\\theta}}\\) refer \\(\\hat{\\boldsymbol{\\theta}}^{\\ast}\\) can generated replacing population parameters sample estimates, , $$   \t\\hat{\\boldsymbol{\\theta}}^{\\ast}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\hat{\\boldsymbol{\\theta}},   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right) .   $$","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Random Drift Matrices Using the Monte Carlo Method — MCPhi","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Random Drift Matrices Using the Monte Carlo Method — MCPhi","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") MCPhi(   phi = phi,   vcov_phi_vec = 0.1 * diag(9),   R = 100L # use a large value for R in actual research ) #> [[1]] #>         x       m       y #> x -0.3295  0.2220 -0.2679 #> m  0.7555 -0.8565  0.0091 #> y -0.4690  1.5626 -0.7618 #>  #> [[2]] #>         x       m       y #> x -0.3830  0.0943 -0.4144 #> m  0.9453 -0.4066 -0.3812 #> y -0.1887  0.7553 -0.8437 #>  #> [[3]] #>         x       m      y #> x -0.1077 -0.0344  0.001 #> m  0.4363 -0.7873 -0.033 #> y -0.9239  0.9293 -0.606 #>  #> [[4]] #>         x       m       y #> x -0.7750  0.1073 -0.1698 #> m  1.2028 -0.5626 -0.0798 #> y  0.0148  0.6496 -0.5988 #>  #> [[5]] #>         x       m       y #> x -1.0155  0.2169 -0.4148 #> m  0.8304 -0.3326 -0.1625 #> y -0.0059  0.3293 -0.4056 #>  #> [[6]] #>         x       m       y #> x -0.5023 -0.3002  0.2227 #> m  0.5239 -0.0857  0.3440 #> y -0.0757  0.5680 -0.9511 #>  #> [[7]] #>         x       m       y #> x -0.1279 -0.4010 -0.1586 #> m  0.7976 -0.4652 -0.6030 #> y -0.3153  0.3125 -0.7378 #>  #> [[8]] #>         x       m       y #> x -0.6284  0.2739 -0.1972 #> m  0.4140 -0.7338  0.1835 #> y -0.1817  0.6000 -0.6670 #>  #> [[9]] #>         x       m       y #> x -0.3203 -0.4097 -0.1738 #> m  1.0749 -0.4948  0.2990 #> y -0.4625  0.9025 -0.8753 #>  #> [[10]] #>         x       m       y #> x -0.4946 -0.6680  0.8914 #> m  0.4559 -0.7414 -0.3237 #> y  0.0138  0.7617 -0.7599 #>  #> [[11]] #>         x       m       y #> x -0.3574 -0.3296 -0.3109 #> m  0.9960 -1.0598  0.0318 #> y -0.6253  0.8023 -0.3250 #>  #> [[12]] #>         x       m       y #> x -0.2388  0.1046  0.1173 #> m  0.5637 -0.5110 -0.0937 #> y -0.4943  0.3738 -0.8324 #>  #> [[13]] #>         x       m       y #> x -0.4017 -0.1042 -0.1136 #> m  0.4225 -1.0385 -0.7173 #> y -0.2042  0.4482 -0.7084 #>  #> [[14]] #>         x       m       y #> x -0.5168 -0.1229  0.2009 #> m  0.4649 -0.5269  0.1268 #> y -0.4530  0.6824 -1.1855 #>  #> [[15]] #>         x       m       y #> x -0.4401  0.1808 -0.1407 #> m  0.5675 -0.7721 -0.0552 #> y  0.0013 -0.1627 -0.8033 #>  #> [[16]] #>         x      m       y #> x -0.7018 -0.287 -0.4060 #> m  0.4014 -0.926 -0.6191 #> y -0.4522  1.042 -0.9174 #>  #> [[17]] #>         x       m       y #> x -0.2428 -0.1850  0.3692 #> m  0.1528 -0.5686 -0.1734 #> y -0.1697  0.4695 -0.5461 #>  #> [[18]] #>         x       m       y #> x -0.8570 -0.0544 -0.0911 #> m  1.4080 -0.4738 -1.0594 #> y  0.0874  0.8196 -0.4478 #>  #> [[19]] #>         x       m       y #> x -0.4047 -0.2895  0.1201 #> m  0.7085 -0.7802  0.3837 #> y  0.3360  0.2906 -0.3345 #>  #> [[20]] #>         x       m       y #> x -0.1396 -0.0238 -0.1357 #> m  0.3961 -0.4810  0.0038 #> y  0.1203  0.4805 -0.1099 #>  #> [[21]] #>         x       m       y #> x -0.5919  0.0691 -0.0411 #> m  0.7065 -0.8078 -0.0403 #> y -0.7677  0.9824 -0.9226 #>  #> [[22]] #>         x       m       y #> x -0.3922 -0.0144 -0.1370 #> m  0.5602 -0.4864 -0.6544 #> y -0.7721  0.4842 -0.0734 #>  #> [[23]] #>         x       m       y #> x -0.0552 -0.2630 -0.2973 #> m  1.6914 -0.6528 -0.0127 #> y -0.4832  0.2784 -0.6221 #>  #> [[24]] #>         x       m       y #> x -0.4761 -0.1023  0.0572 #> m  1.0788 -0.6270 -0.1512 #> y -1.0433  0.8290 -1.1084 #>  #> [[25]] #>         x       m       y #> x -0.5386  0.3221  0.0621 #> m  0.4560 -0.7578  0.2615 #> y -0.5445 -0.2587 -0.8716 #>  #> [[26]] #>         x       m       y #> x -0.8226 -0.0375  0.1275 #> m  0.9053 -0.3728 -0.0042 #> y -0.1520  0.6408 -0.3339 #>  #> [[27]] #>         x       m       y #> x -0.3714 -0.2501  0.0273 #> m  0.3441 -0.5902  0.4339 #> y -0.1173  0.6587 -0.6179 #>  #> [[28]] #>         x       m       y #> x -0.2288  0.1370  0.0740 #> m  0.6924 -0.8384 -0.6592 #> y -0.6282  0.4929 -0.9160 #>  #> [[29]] #>         x       m       y #> x -0.9407  0.4237  0.1673 #> m  1.0778 -0.5615 -0.1271 #> y -0.1173  0.1810 -0.3245 #>  #> [[30]] #>         x       m       y #> x -0.4081  0.0028  0.0232 #> m  0.4974 -0.4713 -0.4130 #> y -0.4946  0.2607 -0.5754 #>  #> [[31]] #>         x       m       y #> x -0.1392 -0.4151  0.1329 #> m  0.4121 -0.3814 -0.0712 #> y -0.8051  0.4695 -0.5703 #>  #> [[32]] #>         x       m       y #> x -1.0668 -0.3412 -0.0488 #> m  1.5288 -0.5792 -0.6432 #> y -0.0236  0.6782 -0.9510 #>  #> [[33]] #>         x       m       y #> x -0.6313  0.1458  0.5649 #> m  1.0035 -1.0179 -0.0652 #> y -0.7079  0.5710 -0.9275 #>  #> [[34]] #>         x       m       y #> x -0.5981  0.5447  0.2370 #> m  0.5518 -0.8220  0.1444 #> y -0.2837  0.7441 -0.8026 #>  #> [[35]] #>         x       m       y #> x -0.3760 -0.6159 -0.1619 #> m  0.7455 -0.4486  0.3184 #> y -0.5399  0.8208 -0.9259 #>  #> [[36]] #>         x       m       y #> x -0.8211  0.3333  0.5403 #> m  0.4818 -0.6742  0.1147 #> y -0.4575  1.0438 -0.6069 #>  #> [[37]] #>         x       m       y #> x -0.0438 -0.1913 -0.2189 #> m  1.0121 -1.0879  0.4560 #> y -0.7420  0.9661 -0.4182 #>  #> [[38]] #>         x       m       y #> x -0.6305  0.0519 -0.3075 #> m  0.2891 -0.8919 -0.1079 #> y -0.5822  0.8868 -0.8725 #>  #> [[39]] #>         x       m       y #> x -0.9969  0.6508 -0.2677 #> m  0.4777 -0.5442 -0.0148 #> y -0.8395  0.8875 -1.0651 #>  #> [[40]] #>         x       m       y #> x -0.4153 -0.3777  0.0552 #> m  0.6768 -0.7006 -0.3646 #> y -0.5796  0.6035 -0.3262 #>  #> [[41]] #>         x       m       y #> x -0.4109 -0.2373 -0.0544 #> m  0.5736 -0.9596 -0.2123 #> y -0.3284  1.0132 -0.3790 #>  #> [[42]] #>         x       m       y #> x -0.1467 -0.3364 -0.4359 #> m  0.2769 -0.4348  0.0457 #> y -0.5458  0.6445 -0.6675 #>  #> [[43]] #>         x       m       y #> x -0.3225  0.0097  0.4471 #> m  0.2850 -0.5174  0.2141 #> y -1.0253  1.4949 -0.8394 #>  #> [[44]] #>         x       m       y #> x -0.7559 -0.1536  0.4511 #> m  0.9942 -0.9598  0.5648 #> y -0.4914  0.5642 -1.0631 #>  #> [[45]] #>         x       m       y #> x -0.1769  0.0374 -0.4160 #> m  0.9637 -0.4728 -0.2756 #> y -0.6885  0.3754 -0.5568 #>  #> [[46]] #>         x       m       y #> x -0.3169 -0.1641  0.0323 #> m  1.2726 -0.4854  0.2306 #> y -0.9982  0.6590 -0.7262 #>  #> [[47]] #>         x       m       y #> x -0.5678  0.2690  0.0708 #> m  0.4662 -0.5777  0.0837 #> y -0.5875  0.0619 -0.9957 #>  #> [[48]] #>         x       m       y #> x -0.9053 -0.4573 -0.0542 #> m  0.6444 -0.5776 -0.2122 #> y -0.0040  0.9637 -0.3440 #>  #> [[49]] #>         x       m       y #> x -0.3641  0.2027  0.0351 #> m  0.7360 -0.7475 -0.3221 #> y -0.4191  0.3433 -1.0359 #>  #> [[50]] #>         x       m       y #> x -0.1074 -0.1336 -0.3040 #> m  1.0164 -0.4057 -0.1125 #> y -0.5545  1.0478 -1.0712 #>  #> [[51]] #>         x       m       y #> x -0.3634 -0.0708 -0.3003 #> m  0.9753 -0.7200  1.1534 #> y -0.4025  0.9655 -0.8761 #>  #> [[52]] #>         x       m       y #> x -0.4116  0.1819  0.0896 #> m  0.2703 -0.4336  0.1018 #> y -0.5597  0.6048 -0.6692 #>  #> [[53]] #>         x       m       y #> x -0.9718 -0.1154 -0.1710 #> m  1.2792 -0.6169 -0.1020 #> y -0.5817  0.8355 -0.3922 #>  #> [[54]] #>         x       m       y #> x -0.3671 -0.0507  0.2011 #> m  0.4971 -0.9741 -0.2671 #> y -0.3027  1.1691 -0.6000 #>  #> [[55]] #>         x       m       y #> x -0.9081 -0.2732 -0.1377 #> m  0.7826 -0.2509  0.0539 #> y -0.4285  0.7691 -0.6318 #>  #> [[56]] #>         x       m       y #> x -0.6330 -0.1352  0.4032 #> m  1.3981 -0.4071 -0.4848 #> y -0.0628  0.8709 -0.6484 #>  #> [[57]] #>         x       m       y #> x -0.5716 -0.2904 -0.9815 #> m  0.6002 -0.5104  0.3351 #> y -0.5145  0.9666 -0.5926 #>  #> [[58]] #>         x       m       y #> x -0.0853 -0.1908  0.5859 #> m -0.0739 -0.7610 -0.2784 #> y -1.0674  0.6428 -0.8445 #>  #> [[59]] #>         x       m       y #> x -0.3777  0.0656  0.1128 #> m  0.8989 -0.5156 -0.4871 #> y -0.4501  0.3930 -0.4726 #>  #> [[60]] #>         x       m       y #> x -1.1444  0.2666 -0.0877 #> m  0.2862 -0.3202 -0.2117 #> y -0.5150  1.3012 -0.5467 #>  #> [[61]] #>         x       m       y #> x -0.5269  0.0676 -0.0710 #> m  0.7264 -1.0256  0.0231 #> y -0.0178  0.4719 -0.4232 #>  #> [[62]] #>         x       m       y #> x -0.2998 -0.1015  0.1827 #> m  0.4915 -0.6801  0.3549 #> y -0.0945  0.9665 -0.9195 #>  #> [[63]] #>         x       m       y #> x -0.0936 -0.1392  0.3097 #> m  1.0521 -0.4798 -0.4324 #> y -0.5027  0.6471 -0.7498 #>  #> [[64]] #>         x       m       y #> x -0.6689 -0.0929 -0.2490 #> m  1.0424 -0.1300  0.1806 #> y -0.9117  1.0659 -1.1202 #>  #> [[65]] #>         x       m       y #> x -0.4898 -0.1196  0.4541 #> m  0.6970 -0.1351 -0.3419 #> y -0.3528  0.1951 -0.7034 #>  #> [[66]] #>         x       m       y #> x -0.2360 -0.0164 -0.3757 #> m  0.9830 -0.6066 -0.2857 #> y -0.1591  0.7775 -1.0288 #>  #> [[67]] #>         x       m       y #> x -0.6339  0.0342  0.0401 #> m  0.8270 -1.0489  0.4998 #> y  0.0652  0.5969 -0.5418 #>  #> [[68]] #>         x       m       y #> x -0.5422 -0.0616  0.0014 #> m  0.6718 -0.3817  0.4155 #> y -0.7427  0.3234 -0.9757 #>  #> [[69]] #>         x       m       y #> x -0.0403 -0.0506 -0.5266 #> m  0.7176 -0.8780 -0.1823 #> y -0.4755  1.0920 -0.7177 #>  #> [[70]] #>         x       m       y #> x -0.4184  0.0873  0.2936 #> m  0.5819 -0.5672 -0.2931 #> y -0.5228  0.6846 -1.1257 #>  #> [[71]] #>         x       m       y #> x -0.6265  0.2090 -0.1042 #> m  0.7528 -0.9778  0.0057 #> y -0.5539  0.7630 -0.0298 #>  #> [[72]] #>         x       m       y #> x -0.3142 -0.4175 -0.3436 #> m  0.6047 -0.6731  0.4674 #> y -0.0897  0.5923 -1.0471 #>  #> [[73]] #>         x       m       y #> x -0.7625 -0.1079 -0.1096 #> m  0.5141 -0.8554  0.3487 #> y -0.6520  0.6899 -1.4064 #>  #> [[74]] #>         x       m       y #> x -0.3623 -0.2808 -0.0804 #> m  0.8808 -0.4030  0.1781 #> y -0.6301  0.8759 -1.0519 #>  #> [[75]] #>         x       m       y #> x -0.5995 -0.4198 -0.5094 #> m  0.6576 -0.2874  0.3968 #> y -0.2405  0.7774 -0.6126 #>  #> [[76]] #>         x       m       y #> x -0.2502  0.0400 -0.2393 #> m  1.0703 -0.0552 -0.2317 #> y -0.2040  0.5293 -0.4795 #>  #> [[77]] #>         x       m       y #> x -0.3583  0.4105 -0.3260 #> m  0.4468 -0.7572 -0.4285 #> y  0.0135  0.4630 -0.4630 #>  #> [[78]] #>         x       m       y #> x -0.6778  0.0109 -0.5704 #> m  0.8244 -0.3219 -0.1490 #> y -0.5195  0.4863 -1.0459 #>  #> [[79]] #>         x       m       y #> x -0.1261 -0.2689  0.1719 #> m  1.2347 -0.8141 -0.5353 #> y -0.5857  1.1799 -0.7561 #>  #> [[80]] #>         x       m       y #> x -0.2520 -0.4989  0.4904 #> m  0.5242 -0.4786 -0.2059 #> y -0.3187  0.9093 -0.7219 #>  #> [[81]] #>         x       m       y #> x -0.4483  0.5324 -0.0998 #> m  0.1837 -0.3331  0.2339 #> y -0.3454  0.9350 -1.0312 #>  #> [[82]] #>         x       m       y #> x -0.4740  0.4396 -0.0832 #> m  0.6544 -0.7612  0.3754 #> y -0.2096  0.5643 -0.9836 #>  #> [[83]] #>         x       m       y #> x -0.8703 -0.2334  0.4392 #> m  1.4877 -0.6639 -0.1450 #> y -0.2625  0.8243 -0.8017 #>  #> [[84]] #>         x       m       y #> x -0.1962 -0.3202  0.0654 #> m  1.3910 -0.3775 -0.3593 #> y -0.5640  0.3310 -0.3806 #>  #> [[85]] #>         x       m       y #> x -0.3905 -0.2777 -0.3170 #> m  0.3367 -0.6976  0.0301 #> y  0.6498  0.8609 -0.6813 #>  #> [[86]] #>         x       m       y #> x -0.6248 -0.4520  0.2134 #> m  0.8028 -0.2845  0.0879 #> y -0.9383  0.9861 -0.6502 #>  #> [[87]] #>         x       m       y #> x -0.1593 -0.5304 -0.0042 #> m  0.9188 -0.6926 -0.0764 #> y -0.2094  0.5743 -0.4895 #>  #> [[88]] #>         x       m       y #> x -0.4309 -0.1042 -0.0629 #> m  0.7116 -0.6306  0.1055 #> y -0.4704  0.3523 -0.9833 #>  #> [[89]] #>         x       m       y #> x -0.1073  0.0902  0.3519 #> m  0.0455 -0.5125  0.2619 #> y -0.4501  0.8671 -0.6955 #>  #> [[90]] #>         x       m       y #> x -0.1855 -0.1612 -0.1172 #> m  0.9788 -0.8409 -0.3104 #> y -0.5546  0.6565 -0.6502 #>  #> [[91]] #>         x       m       y #> x -0.2742 -0.0278 -0.0435 #> m  0.3944 -0.2534 -0.2422 #> y  0.6082  0.6999 -0.5411 #>  #> [[92]] #>         x       m       y #> x -0.8169  0.2507  0.1256 #> m  0.2168 -0.8083  0.4825 #> y  0.0757  0.5949 -0.5242 #>  #> [[93]] #>         x       m       y #> x -0.3167  0.0613 -0.1022 #> m  0.6812 -0.6474 -0.5121 #> y -0.3802  0.8593 -0.4606 #>  #> [[94]] #>         x       m       y #> x -0.4927  0.0970  0.1964 #> m  0.6259 -0.5075  0.2843 #> y -0.2871  0.1613 -1.0010 #>  #> [[95]] #>         x       m       y #> x -0.2908 -0.0831 -0.3284 #> m  0.7124 -0.3808  0.0491 #> y -0.4735  0.7616 -0.4224 #>  #> [[96]] #>         x       m       y #> x -0.2382 -0.0210  0.2435 #> m  0.8107 -0.9013  0.0443 #> y -0.5787  0.8863 -1.0013 #>  #> [[97]] #>         x       m       y #> x -0.3714 -0.2303 -0.3200 #> m  1.2856 -0.9282  0.2868 #> y -0.1415  1.1378 -0.8186 #>  #> [[98]] #>         x       m       y #> x -0.2475 -0.4155  0.3497 #> m  0.6953 -0.4973  0.1498 #> y -0.3532  0.7291 -0.4281 #>  #> [[99]] #>         x       m       y #> x -0.2293 -0.2961  0.2112 #> m  0.6084 -0.7606  0.1396 #> y -0.7304  0.3160 -0.4800 #>  #> [[100]] #>         x       m       y #> x -0.5496 -0.0348  0.0700 #> m  0.9226 -0.5533 -0.0088 #> y -0.5031  0.8429 -0.5873 #>  phi <- matrix(   data = c(     -6, 5.5, 0, 0,     1.25, -2.5, 5.9, -7.3,     0, 0, -6, 2.5,     5, 0, 0, -6   ),   nrow = 4 ) colnames(phi) <- rownames(phi) <- paste0(\"y\", 1:4) MCPhi(   phi = phi,   vcov_phi_vec = 0.1 * diag(16),   R = 100L, # use a large value for R in actual research   test_phi = FALSE ) #> [[1]] #>         y1      y2      y3      y4 #> y1 -5.7668  0.9230  0.2233  4.2634 #> y2  5.6636 -2.6310  0.5893  0.1656 #> y3  0.1348  5.7811 -6.3375 -0.0939 #> y4  0.3147 -7.4983  2.6865 -6.3097 #>  #> [[2]] #>         y1      y2      y3      y4 #> y1 -5.6895  1.3958 -0.1064  4.9329 #> y2  5.6879 -2.2832 -0.0758 -0.3114 #> y3 -0.5317  5.7714 -5.9755 -0.0333 #> y4 -0.2057 -7.3658  2.2075 -5.4863 #>  #> [[3]] #>         y1      y2      y3      y4 #> y1 -5.9580  1.5836  0.3723  4.6407 #> y2  5.5283 -2.0794  0.2199  0.0805 #> y3 -0.5804  5.7189 -6.2748  0.1087 #> y4 -0.1854 -7.1197  2.6285 -6.3340 #>  #> [[4]] #>         y1      y2      y3      y4 #> y1 -5.6135  1.3059 -0.1520  3.7929 #> y2  6.2636 -3.0146  0.5791 -0.4636 #> y3  0.1067  5.7501 -5.8046 -0.4455 #> y4  0.3517 -7.0425  2.5319 -5.9514 #>  #> [[5]] #>         y1      y2      y3      y4 #> y1 -6.1717  1.0766 -0.3349  4.7839 #> y2  5.3780 -2.5961 -0.5326 -0.2039 #> y3 -0.3308  6.3404 -6.2413  0.6843 #> y4  0.1681 -7.0827  2.7400 -6.0146 #>  #> [[6]] #>         y1      y2      y3      y4 #> y1 -5.3812  1.2558  0.6623  5.2363 #> y2  5.0359 -3.1022  0.0187 -0.0110 #> y3  0.4751  6.0529 -6.0927 -0.3454 #> y4  0.3612 -7.0734  2.4150 -6.4608 #>  #> [[7]] #>         y1      y2      y3      y4 #> y1 -6.0145  0.9127 -0.1050  5.0986 #> y2  5.7418 -2.8818 -0.3098  0.1868 #> y3  0.0207  5.8365 -5.9757 -0.1299 #> y4  0.2673 -7.3022  2.9458 -6.2110 #>  #> [[8]] #>         y1      y2      y3      y4 #> y1 -5.8044  1.0844  0.1378  4.9405 #> y2  5.5657 -2.3141 -0.4056 -0.3457 #> y3  0.2661  5.9458 -5.6681 -0.1354 #> y4 -0.5021 -7.0220  2.6626 -5.6208 #>  #> [[9]] #>         y1      y2      y3      y4 #> y1 -6.5522  1.3479  0.3668  4.7705 #> y2  5.4461 -2.9554 -0.1138  0.2969 #> y3 -0.2456  5.4209 -5.9634 -0.1664 #> y4  0.2009 -6.9219  2.9102 -6.1279 #>  #> [[10]] #>         y1      y2      y3      y4 #> y1 -5.9269  1.3184  0.0610  4.7207 #> y2  5.7802 -2.7238 -0.0001 -0.1507 #> y3  0.6121  5.6427 -6.2988 -0.3708 #> y4 -0.2834 -7.9467  2.7768 -5.6733 #>  #> [[11]] #>         y1      y2      y3      y4 #> y1 -6.0108  1.6800 -0.2495  4.5300 #> y2  5.3815 -2.8865 -0.1977  0.1310 #> y3  0.3771  5.5380 -5.5998  0.0828 #> y4 -0.2887 -6.5693  2.5902 -6.1295 #>  #> [[12]] #>         y1      y2      y3      y4 #> y1 -5.8948  2.1404  0.5304  4.8120 #> y2  5.2657 -2.7172  0.2243  0.2726 #> y3  0.3392  6.2523 -6.4579  0.5665 #> y4 -0.0974 -7.1006  3.0208 -5.9235 #>  #> [[13]] #>         y1      y2      y3      y4 #> y1 -6.3194  1.2196  0.2219  4.5833 #> y2  5.6737 -2.2696  0.5674 -0.1532 #> y3 -0.6263  5.6929 -6.1867  0.5924 #> y4  0.5117 -6.6057  2.8267 -5.7002 #>  #> [[14]] #>         y1      y2      y3      y4 #> y1 -5.4823  1.1359 -0.5189  4.7700 #> y2  6.0158 -2.4379  0.1708 -0.3368 #> y3  0.2634  6.1350 -6.1545 -0.1257 #> y4  0.2983 -7.1599  2.4814 -5.8683 #>  #> [[15]] #>         y1      y2      y3      y4 #> y1 -6.6469  1.6101  0.0410  4.7742 #> y2  5.3425 -2.5490  0.2587 -0.0487 #> y3 -0.0882  6.2703 -5.8678  0.1974 #> y4  0.3573 -7.0197  2.0987 -5.7518 #>  #> [[16]] #>         y1      y2      y3      y4 #> y1 -6.1222  1.2925 -0.0562  4.6711 #> y2  5.6139 -2.3581 -0.0177 -0.3112 #> y3  0.0130  5.6994 -6.3263  0.4808 #> y4  0.3061 -7.7456  2.2897 -6.1503 #>  #> [[17]] #>         y1      y2      y3      y4 #> y1 -5.9608  1.4888  0.0045  5.1459 #> y2  5.5950 -1.9211 -0.1746 -0.2890 #> y3  0.0078  5.8701 -5.8714 -0.1302 #> y4 -0.4365 -7.1767  2.8803 -5.8976 #>  #> [[18]] #>         y1      y2      y3      y4 #> y1 -5.8132  1.1155 -0.2077  4.7644 #> y2  5.5631 -2.8843 -0.0421 -0.3663 #> y3  0.5158  5.6960 -6.5660 -0.7380 #> y4 -0.0856 -7.5594  2.2929 -6.0541 #>  #> [[19]] #>         y1      y2      y3      y4 #> y1 -5.8361  1.6981 -0.2099  5.1071 #> y2  5.8118 -2.6273  0.1838  0.2969 #> y3  0.2353  6.0135 -6.2679  0.1417 #> y4  0.2306 -6.8748  2.5869 -5.7116 #>  #> [[20]] #>         y1      y2      y3      y4 #> y1 -6.1133  1.2747  0.2049  4.9287 #> y2  5.3474 -2.4081  0.1822 -0.0050 #> y3  0.0505  6.2017 -5.5979  0.1538 #> y4  0.6316 -7.7229  2.5705 -5.7057 #>  #> [[21]] #>         y1      y2      y3      y4 #> y1 -6.3539  1.4517 -0.0312  5.0953 #> y2  5.1892 -2.3262 -0.4178  0.0068 #> y3 -0.3209  5.9855 -6.0231  0.0657 #> y4  0.0838 -7.5616  2.6139 -5.8151 #>  #> [[22]] #>         y1      y2      y3      y4 #> y1 -5.3427  1.6514  0.3106  4.5388 #> y2  5.6862 -2.8037 -0.0708 -0.7003 #> y3  0.0372  5.6301 -6.3433  0.0265 #> y4  0.1000 -7.7933  2.7021 -6.1851 #>  #> [[23]] #>         y1      y2      y3      y4 #> y1 -5.6847  1.0275  0.5207  4.9294 #> y2  5.9071 -2.4629 -0.2393  0.4546 #> y3  0.5209  5.9664 -5.9180 -0.1018 #> y4  0.1192 -8.2784  2.4460 -5.6730 #>  #> [[24]] #>         y1      y2      y3      y4 #> y1 -6.0209  1.0396 -0.1932  4.5331 #> y2  5.1288 -2.1827 -0.0835  0.2775 #> y3  0.0706  6.0495 -6.0031 -0.1035 #> y4 -0.3772 -7.1062  2.0684 -6.1947 #>  #> [[25]] #>         y1      y2      y3      y4 #> y1 -5.7677  1.2751  0.1769  5.0236 #> y2  5.6191 -1.9918  0.0119  0.4368 #> y3 -0.2083  5.3403 -6.4606  0.2666 #> y4 -0.4714 -7.6268  2.8729 -6.0815 #>  #> [[26]] #>         y1      y2      y3      y4 #> y1 -6.1515  1.4525  0.2027  4.6271 #> y2  5.4472 -2.8296  0.0494 -0.0455 #> y3 -0.4805  5.5610 -6.6059 -0.7099 #> y4  0.5108 -7.5901  2.7159 -5.6216 #>  #> [[27]] #>         y1      y2      y3      y4 #> y1 -6.0670  1.3287 -0.0973  5.0208 #> y2  6.2865 -2.8627 -0.1693 -0.5216 #> y3 -0.0158  5.6777 -5.7077  0.2599 #> y4  0.0596 -6.6147  3.0623 -5.9546 #>  #> [[28]] #>         y1      y2      y3      y4 #> y1 -5.2771  1.3007  0.3736  4.5974 #> y2  5.7214 -3.1083  0.4978 -0.1548 #> y3  0.2311  5.4551 -5.7353 -0.0374 #> y4  0.2129 -7.3875  2.9406 -6.6204 #>  #> [[29]] #>         y1      y2      y3      y4 #> y1 -6.3433  0.8689  0.0856  5.2539 #> y2  5.4734 -2.3393  0.2726  0.2675 #> y3 -0.0526  5.7604 -6.0303 -0.0223 #> y4 -0.2449 -6.5926  2.7770 -6.1566 #>  #> [[30]] #>         y1      y2      y3      y4 #> y1 -5.7536  1.3618  0.3328  4.9249 #> y2  5.3979 -2.3363 -0.0817  0.4274 #> y3  0.0238  5.7449 -5.6317 -0.1724 #> y4 -0.1627 -7.4029  2.1575 -6.6403 #>  #> [[31]] #>         y1      y2      y3      y4 #> y1 -6.2718  1.3489  0.3620  4.9804 #> y2  6.0443 -2.5327 -0.1802 -0.5506 #> y3  0.0275  6.1188 -6.0708 -0.0636 #> y4 -0.3418 -7.5190  2.5217 -6.1727 #>  #> [[32]] #>         y1      y2      y3      y4 #> y1 -6.2242  1.4407 -0.0388  4.9602 #> y2  5.8011 -2.4977 -0.1438  0.0753 #> y3 -0.4079  6.0727 -6.0324 -0.3399 #> y4 -0.5544 -7.0974  2.2145 -5.9584 #>  #> [[33]] #>         y1      y2      y3      y4 #> y1 -6.3039  0.8956 -0.1184  5.5026 #> y2  5.4044 -2.6264 -0.2561  0.0758 #> y3  0.0288  5.4258 -6.5411 -0.0384 #> y4 -0.0572 -7.4542  2.8864 -5.9262 #>  #> [[34]] #>         y1      y2      y3      y4 #> y1 -5.9672  1.1480 -0.0393  4.6688 #> y2  5.8418 -2.6531 -0.0048  0.4096 #> y3  0.3215  5.8236 -5.6790 -0.2734 #> y4  0.2377 -7.5154  2.2944 -6.6422 #>  #> [[35]] #>         y1      y2      y3      y4 #> y1 -5.7728  1.5450 -0.0139  5.5630 #> y2  5.7372 -2.1377  0.2431 -0.2941 #> y3 -0.2750  6.4422 -6.5744 -0.3441 #> y4 -0.3499 -7.4563  2.3695 -5.8145 #>  #> [[36]] #>         y1      y2      y3      y4 #> y1 -6.1589  1.1369 -0.1308  5.0856 #> y2  5.7150 -2.2752 -0.0253  0.8980 #> y3 -0.0521  6.1190 -5.9389 -0.0729 #> y4  0.3482 -6.6299  2.1511 -5.9658 #>  #> [[37]] #>         y1      y2      y3      y4 #> y1 -5.8945  0.9853  0.6941  4.9666 #> y2  5.1616 -3.0345  0.0107 -0.0917 #> y3  0.0343  5.8754 -5.5661  0.3381 #> y4  0.4594 -6.6046  2.0610 -5.9833 #>  #> [[38]] #>         y1      y2      y3      y4 #> y1 -6.0137  1.4075 -0.2587  4.7113 #> y2  5.1521 -2.3546 -0.1579  0.0894 #> y3 -0.0882  5.7019 -6.4509 -0.1253 #> y4 -0.4616 -7.0690  2.6749 -5.9659 #>  #> [[39]] #>         y1      y2      y3      y4 #> y1 -5.2570  1.5659  0.1064  4.6079 #> y2  5.4045 -2.2201 -0.2555 -0.0682 #> y3 -0.0509  5.8983 -6.4767  0.3584 #> y4 -0.3301 -7.8675  2.8030 -6.2076 #>  #> [[40]] #>         y1      y2      y3      y4 #> y1 -5.9080  1.3928 -0.1253  5.3514 #> y2  5.3735 -2.3501 -0.2915  0.0394 #> y3 -0.0680  5.8674 -6.0316 -0.0848 #> y4 -0.0270 -7.7892  2.2404 -6.3040 #>  #> [[41]] #>         y1      y2      y3      y4 #> y1 -6.4446  1.3247 -0.2761  4.5362 #> y2  5.7358 -2.1600 -0.5047 -0.6031 #> y3 -0.6084  5.5772 -5.6569  0.6039 #> y4  0.8787 -7.6333  2.4308 -5.5574 #>  #> [[42]] #>         y1      y2      y3      y4 #> y1 -5.8593  1.2839 -0.0032  4.7804 #> y2  5.8267 -2.5814 -0.0681  0.4127 #> y3  0.6440  5.9321 -5.8832 -0.1229 #> y4  0.1774 -6.8543  3.1020 -6.5602 #>  #> [[43]] #>         y1      y2      y3      y4 #> y1 -6.0673  0.8908  0.2522  5.3146 #> y2  5.5606 -2.4939  0.3249  0.3578 #> y3 -0.1531  5.7704 -5.2237  0.3980 #> y4  0.4033 -7.0085  2.2838 -6.7198 #>  #> [[44]] #>         y1      y2      y3      y4 #> y1 -5.8124  1.4435  0.0103  4.2477 #> y2  5.6099 -2.7047 -0.6513  0.4689 #> y3  0.0544  5.4757 -5.8748  0.2879 #> y4 -0.0655 -7.3180  3.0642 -5.7631 #>  #> [[45]] #>         y1      y2      y3      y4 #> y1 -5.9015  1.1435 -0.1690  4.9738 #> y2  4.9948 -2.8262  0.2239  0.0506 #> y3 -0.3837  6.4569 -6.3387  0.3022 #> y4  0.1928 -7.3322  2.5901 -6.3325 #>  #> [[46]] #>         y1      y2      y3      y4 #> y1 -6.0980  1.2951 -0.3674  4.6936 #> y2  5.5459 -3.1702  0.4847 -0.3380 #> y3 -0.1205  5.2876 -6.0921 -0.2235 #> y4 -0.1159 -7.3589  2.1731 -5.7440 #>  #> [[47]] #>         y1      y2      y3      y4 #> y1 -5.3795  0.6644  0.2127  4.3846 #> y2  5.3361 -2.5810  0.0289  0.3402 #> y3 -0.2481  5.8775 -4.8334  0.2223 #> y4 -0.4489 -7.3971  1.9999 -5.7160 #>  #> [[48]] #>         y1      y2      y3      y4 #> y1 -6.5926  1.3679 -0.0816  5.4116 #> y2  5.7363 -2.3326 -0.0569 -0.0734 #> y3 -0.5427  5.6793 -5.9737  0.0655 #> y4 -0.7339 -7.1181  2.5202 -5.7012 #>  #> [[49]] #>         y1      y2      y3      y4 #> y1 -5.7572  1.9445 -0.1988  4.9842 #> y2  5.6896 -2.7707  0.1606  0.0311 #> y3  0.3578  5.9488 -6.1304 -0.7058 #> y4 -0.0977 -7.0141  2.5897 -5.4540 #>  #> [[50]] #>         y1      y2      y3      y4 #> y1 -6.2746  1.0570  0.1394  4.9125 #> y2  5.6567 -2.6995  0.1489 -0.0157 #> y3  0.2149  6.1102 -6.1968  0.8091 #> y4  0.1977 -6.8883  2.3872 -5.8547 #>  #> [[51]] #>         y1      y2      y3      y4 #> y1 -5.9523  1.4773  0.4845  5.3901 #> y2  5.4737 -2.3223  0.4638 -0.0051 #> y3  0.1663  5.7208 -5.7078 -0.2873 #> y4 -0.2619 -7.5732  2.6116 -5.6516 #>  #> [[52]] #>         y1      y2      y3      y4 #> y1 -5.9569  1.1484  0.1413  4.9625 #> y2  5.4961 -1.9196 -0.2147  0.0860 #> y3  0.0434  5.1711 -6.0091 -0.4300 #> y4  0.0989 -6.9923  2.4675 -6.2801 #>  #> [[53]] #>         y1      y2      y3      y4 #> y1 -5.9964  1.5948  0.1424  4.8919 #> y2  4.9500 -2.3143 -0.2004  0.0746 #> y3  0.0413  6.1239 -6.1581  0.5520 #> y4 -0.1606 -6.6052  3.0729 -5.6252 #>  #> [[54]] #>         y1      y2      y3      y4 #> y1 -6.0056  0.5813  0.2066  4.1852 #> y2  5.6146 -2.5315 -0.2098  0.5014 #> y3 -0.0282  6.0132 -5.9744 -0.2524 #> y4  0.1977 -7.1909  2.0617 -5.5994 #>  #> [[55]] #>         y1      y2      y3      y4 #> y1 -6.2481  1.2533  0.0911  4.8759 #> y2  5.3307 -2.3027 -0.1617  0.5334 #> y3  0.1470  5.6411 -5.5382 -0.0052 #> y4  0.2635 -7.2861  2.4187 -6.3106 #>  #> [[56]] #>         y1      y2      y3      y4 #> y1 -5.9427  1.2370 -0.4303  4.2867 #> y2  5.4646 -2.7914  0.7996 -0.1051 #> y3  0.1021  6.0495 -5.6497 -0.1754 #> y4  0.2555 -7.3638  2.6484 -6.1278 #>  #> [[57]] #>         y1      y2      y3      y4 #> y1 -5.8707  1.4799  0.4191  5.0782 #> y2  5.6182 -2.4580 -0.0108 -0.2805 #> y3 -0.7355  5.7616 -6.2561 -0.4730 #> y4  0.0598 -7.7258  2.6587 -5.9206 #>  #> [[58]] #>         y1      y2      y3      y4 #> y1 -5.8946  1.0787 -0.4839  5.0753 #> y2  5.6657 -2.6659 -0.3270  0.1845 #> y3 -0.1998  5.6498 -5.6949  0.2662 #> y4 -0.2045 -7.1635  2.2299 -5.7683 #>  #> [[59]] #>         y1      y2      y3      y4 #> y1 -6.4531  0.9740  0.0054  4.9008 #> y2  5.8377 -2.9909 -0.2070 -0.4158 #> y3 -0.2417  5.5451 -5.8743  0.2004 #> y4 -0.5901 -7.1767  2.3551 -5.7033 #>  #> [[60]] #>         y1      y2      y3      y4 #> y1 -5.4631  1.0113  0.0522  5.1682 #> y2  4.9342 -2.6603 -0.3605  0.2755 #> y3 -0.4089  6.0702 -5.9465 -0.1638 #> y4 -0.2940 -7.0916  2.4145 -5.0471 #>  #> [[61]] #>         y1      y2      y3      y4 #> y1 -5.9779  1.0796  0.0267  4.8381 #> y2  5.4393 -2.5748  0.3063 -0.0395 #> y3 -0.2208  6.2879 -6.1863 -0.2941 #> y4  0.1071 -7.5201  1.8880 -6.3136 #>  #> [[62]] #>         y1      y2      y3      y4 #> y1 -5.6482  1.3129 -0.1826  4.8776 #> y2  6.0977 -1.9955 -0.5990  0.3349 #> y3 -0.3539  6.5941 -6.0968 -0.2040 #> y4  0.3579 -7.3144  2.8496 -5.5229 #>  #> [[63]] #>         y1      y2      y3      y4 #> y1 -5.6285  0.8844  0.2849  4.8488 #> y2  5.2297 -2.4012  0.0733  0.2061 #> y3  0.1713  5.3912 -6.4161  0.1879 #> y4  0.1810 -7.3348  2.8551 -6.0188 #>  #> [[64]] #>         y1      y2      y3      y4 #> y1 -5.5283  0.8311  0.1781  4.4061 #> y2  4.9419 -2.6348 -0.7101 -0.2532 #> y3 -0.0070  5.5456 -6.0511  0.0560 #> y4  0.5372 -8.1754  2.2046 -6.1299 #>  #> [[65]] #>         y1      y2      y3      y4 #> y1 -6.6001  1.6824 -0.0380  5.2231 #> y2  5.4676 -2.1973  0.5336  0.0204 #> y3  0.6301  5.1240 -5.9167  0.0347 #> y4 -0.0134 -7.2489  2.4992 -5.5505 #>  #> [[66]] #>         y1      y2      y3      y4 #> y1 -5.7521  0.7159 -0.2507  4.9922 #> y2  5.8027 -1.9508  0.5002  0.0441 #> y3  0.0835  6.1362 -5.8951 -0.1631 #> y4 -0.6097 -7.3279  2.7955 -6.1510 #>  #> [[67]] #>         y1      y2      y3      y4 #> y1 -6.6907  1.1029 -0.2930  5.1709 #> y2  4.9118 -2.5787 -0.0594  0.8663 #> y3  0.2808  6.0329 -6.1878  0.7187 #> y4 -0.0158 -7.4357  2.5586 -6.2412 #>  #> [[68]] #>         y1      y2      y3      y4 #> y1 -5.7003  1.5561  0.0553  5.6792 #> y2  5.4253 -2.8970  0.0461 -0.1316 #> y3 -1.0162  6.0995 -5.8691  0.1358 #> y4  0.5630 -7.3931  2.1565 -5.9070 #>  #> [[69]] #>         y1      y2      y3      y4 #> y1 -5.6939  1.5281  0.1444  4.8940 #> y2  5.6035 -2.9275  0.0641 -0.6012 #> y3 -0.0134  6.0038 -6.3259 -0.1658 #> y4  0.2364 -7.3385  2.3606 -5.9478 #>  #> [[70]] #>         y1      y2      y3      y4 #> y1 -5.9643  1.3434 -0.1344  5.0722 #> y2  5.1277 -2.5828 -0.1238  0.1204 #> y3  0.0389  5.8466 -6.0228  0.2002 #> y4  0.0429 -6.9442  2.5921 -6.1923 #>  #> [[71]] #>         y1      y2      y3      y4 #> y1 -5.9243  0.8865  0.0999  4.8679 #> y2  5.2796 -2.5638 -0.2983  0.1686 #> y3  0.0906  6.0471 -6.3269 -0.2134 #> y4 -0.5054 -7.1232  2.6130 -5.6755 #>  #> [[72]] #>         y1      y2      y3      y4 #> y1 -5.9200  1.2293 -0.0611  5.4255 #> y2  5.9229 -2.6953  0.1815  0.0032 #> y3 -0.2596  5.8636 -5.5987 -0.0868 #> y4  0.1786 -7.3480  2.7143 -5.7337 #>  #> [[73]] #>         y1      y2      y3      y4 #> y1 -6.4274  0.4931  0.2368  4.5700 #> y2  5.4101 -2.5940  0.3928  0.0951 #> y3  0.3073  5.5423 -6.2832  0.0019 #> y4 -0.6478 -7.5113  2.2986 -6.1988 #>  #> [[74]] #>         y1      y2      y3      y4 #> y1 -5.9378  1.2743 -0.1804  4.5888 #> y2  5.4514 -2.3675 -0.1271  0.2928 #> y3 -0.4136  5.6969 -5.6865  0.2059 #> y4  0.0874 -7.0510  2.6019 -6.0188 #>  #> [[75]] #>         y1      y2      y3      y4 #> y1 -6.5136  1.5369  0.0256  4.9086 #> y2  5.5642 -2.3868 -0.3224  0.1919 #> y3  0.1486  5.7668 -5.8998  0.1100 #> y4 -0.2103 -7.1476  2.6062 -5.8118 #>  #> [[76]] #>         y1      y2      y3      y4 #> y1 -6.7212  0.6250  0.0904  5.0172 #> y2  5.5723 -2.5360  0.1952  0.3232 #> y3 -0.3055  5.5932 -5.8743 -0.4162 #> y4  0.0984 -6.7820  2.4282 -5.8759 #>  #> [[77]] #>         y1      y2      y3      y4 #> y1 -6.2910  1.2902 -0.2498  5.4488 #> y2  5.1756 -2.4222  0.1451  0.1266 #> y3 -0.2061  5.6235 -6.2612  0.0346 #> y4 -0.3544 -6.9230  2.5766 -6.5837 #>  #> [[78]] #>         y1      y2      y3      y4 #> y1 -6.0322  0.9669 -0.3262  4.9366 #> y2  5.2301 -2.4229 -0.2520 -0.0096 #> y3  0.0000  5.7709 -6.3113 -0.2493 #> y4  0.0267 -7.0330  2.7660 -5.3736 #>  #> [[79]] #>         y1      y2      y3      y4 #> y1 -5.6171  1.3802  0.3513  5.4468 #> y2  5.5958 -2.1119 -0.3488  0.0908 #> y3  0.2067  5.6944 -5.7429  0.1289 #> y4 -0.1186 -7.4404  2.6279 -6.0663 #>  #> [[80]] #>         y1      y2      y3      y4 #> y1 -5.8217  1.6960 -0.1393  4.8420 #> y2  5.1737 -2.6817 -0.1878 -0.4379 #> y3 -0.0756  5.6943 -5.8635  0.0060 #> y4 -0.0536 -7.0538  3.0298 -5.6860 #>  #> [[81]] #>         y1      y2      y3      y4 #> y1 -5.9432  1.9662  0.1804  4.8325 #> y2  5.4171 -2.0434 -0.2288  0.0017 #> y3 -0.2531  6.1313 -5.6265  0.1767 #> y4  0.4081 -7.4475  2.6137 -5.4631 #>  #> [[82]] #>         y1      y2      y3      y4 #> y1 -6.1795  1.2062 -0.7283  4.5316 #> y2  6.0215 -2.4095 -0.5060  0.2728 #> y3 -0.0582  5.9522 -5.6993  0.7224 #> y4  0.1006 -7.1613  2.6657 -5.4758 #>  #> [[83]] #>         y1      y2      y3      y4 #> y1 -5.8417  1.2243  0.6788  5.1682 #> y2  5.4315 -2.4744 -0.2423  0.0133 #> y3 -0.3892  6.0071 -5.9319  0.2591 #> y4 -0.4600 -6.9390  2.4152 -5.9745 #>  #> [[84]] #>         y1      y2      y3      y4 #> y1 -6.2975  1.2838  0.2249  4.9901 #> y2  5.5440 -2.2441 -0.3645  0.2449 #> y3  0.1365  5.8487 -5.8212 -0.2674 #> y4 -0.0015 -7.1486  2.5200 -5.7578 #>  #> [[85]] #>         y1      y2      y3      y4 #> y1 -5.6978  1.4122  0.1484  4.5891 #> y2  5.4030 -2.3363  0.2806 -0.3610 #> y3 -0.1147  6.0320 -6.1666 -0.0848 #> y4 -0.1262 -7.8710  2.7927 -6.3336 #>  #> [[86]] #>         y1      y2      y3      y4 #> y1 -5.8476  0.9337  0.4785  5.2861 #> y2  5.3785 -3.1134  0.0101 -0.4904 #> y3 -0.6114  5.9998 -5.9727 -0.4166 #> y4  0.1387 -7.1715  2.9339 -5.7481 #>  #> [[87]] #>         y1      y2      y3      y4 #> y1 -5.8597  1.8850 -0.4586  4.9502 #> y2  5.4700 -2.7928  0.2341 -0.4140 #> y3  0.3105  5.9415 -6.0601 -0.5847 #> y4 -0.1970 -7.9899  2.2574 -6.3043 #>  #> [[88]] #>         y1      y2      y3      y4 #> y1 -6.3161  1.2327  0.0271  5.3631 #> y2  5.6828 -2.7258 -0.2832 -0.0979 #> y3 -0.2076  6.2184 -5.7706  0.4866 #> y4  0.3190 -7.3725  2.5438 -6.2305 #>  #> [[89]] #>         y1      y2      y3      y4 #> y1 -6.0877  1.2029  0.0267  5.0569 #> y2  5.2536 -2.4098  0.2891 -0.3400 #> y3 -0.0267  5.9468 -5.7560 -0.1364 #> y4 -0.4393 -7.5338  2.6983 -5.8723 #>  #> [[90]] #>         y1      y2      y3      y4 #> y1 -6.0322  1.4432 -0.0431  4.9221 #> y2  5.4464 -3.0324 -0.0247  0.0904 #> y3  0.3685  6.4214 -6.1455  0.2421 #> y4 -0.6743 -7.0642  2.5569 -5.7589 #>  #> [[91]] #>         y1      y2      y3      y4 #> y1 -6.0988  0.9930 -0.3469  4.7260 #> y2  5.3874 -3.0435  0.1365  0.5614 #> y3  0.1051  6.4381 -6.1544 -0.0754 #> y4  0.1931 -6.9494  1.8696 -6.0270 #>  #> [[92]] #>         y1      y2      y3      y4 #> y1 -5.5037  1.4817 -0.1673  4.8613 #> y2  5.2454 -1.6787  0.3387  0.1379 #> y3 -0.1108  5.8373 -6.0303 -0.0616 #> y4  0.2594 -7.3990  2.2196 -5.9596 #>  #> [[93]] #>         y1      y2      y3      y4 #> y1 -6.1597  0.9582  0.2737  5.4425 #> y2  5.6030 -2.1250 -0.4149  0.7565 #> y3 -0.3107  6.0609 -6.5682 -0.5186 #> y4  0.3355 -7.2279  2.7876 -5.9105 #>  #> [[94]] #>         y1      y2      y3      y4 #> y1 -5.8317  1.7254  0.3621  5.2930 #> y2  5.3161 -3.1388  0.0509  0.3506 #> y3 -0.1596  5.9242 -6.1536  0.3438 #> y4  0.0367 -6.7521  2.0423 -5.5868 #>  #> [[95]] #>         y1      y2      y3      y4 #> y1 -6.3414  1.2384  0.2634  5.4223 #> y2  5.2255 -2.3949 -0.5253  0.3888 #> y3 -0.1683  6.2406 -5.7544  0.2706 #> y4 -0.6913 -7.2530  2.0293 -5.5734 #>  #> [[96]] #>         y1      y2      y3      y4 #> y1 -5.5362  1.4831  0.1228  4.8351 #> y2  5.2138 -2.0728  0.5201 -0.0191 #> y3  0.0749  5.9327 -6.1675  0.2317 #> y4 -0.0376 -7.4086  2.4437 -5.9435 #>  #> [[97]] #>         y1      y2      y3      y4 #> y1 -5.5899  1.5127 -0.1531  5.1957 #> y2  5.2358 -1.6921  0.1887  0.1824 #> y3  0.3952  5.7920 -6.2844 -0.1212 #> y4 -0.3621 -6.9405  2.5557 -5.7922 #>  #> [[98]] #>         y1      y2      y3      y4 #> y1 -6.2095  1.4307 -0.0805  4.8610 #> y2  4.8708 -2.7822  0.1615 -0.0977 #> y3  0.1431  5.2626 -5.4246  0.3084 #> y4 -0.2285 -7.5144  2.0456 -5.5210 #>  #> [[99]] #>         y1      y2      y3      y4 #> y1 -5.7127  1.1469  0.1237  4.6626 #> y2  4.8916 -2.1677 -0.3059  0.2355 #> y3  0.0269  5.7291 -6.4156 -0.1528 #> y4  0.1273 -7.3281  1.8487 -5.8212 #>  #> [[100]] #>         y1      y2      y3      y4 #> y1 -5.4156  1.6693 -0.5459  5.0552 #> y2  5.5648 -2.6804 -0.7217 -0.1677 #> y3 -0.1679  5.6439 -5.7622 -0.8209 #> y4  0.0468 -7.1060  2.5218 -5.8344 #>"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhiSigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Random Drift Matrices and Process Noise Covariance Matrices Using the Monte Carlo Method — MCPhiSigma","title":"Generate Random Drift Matrices and Process Noise Covariance Matrices Using the Monte Carlo Method — MCPhiSigma","text":"function generates random drift matrices \\(\\boldsymbol{\\Phi}\\) process noise covariabces matrices \\(\\boldsymbol{\\Sigma}\\) using Monte Carlo method.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhiSigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Random Drift Matrices and Process Noise Covariance Matrices Using the Monte Carlo Method — MCPhiSigma","text":"","code":"MCPhiSigma(   phi,   sigma,   vcov_theta,   R,   test_phi = TRUE,   ncores = NULL,   seed = NULL )"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhiSigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Random Drift Matrices and Process Noise Covariance Matrices Using the Monte Carlo Method — MCPhiSigma","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. sigma Numeric matrix. process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). vcov_theta Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\) \\(\\mathrm{vech} \\left( \\boldsymbol{\\Sigma} \\right)\\) R Positive integer. Number replications. test_phi Logical. test_phi = TRUE, function tests stability generated drift matrix \\(\\boldsymbol{\\Phi}\\). test returns FALSE, function generates new drift matrix \\(\\boldsymbol{\\Phi}\\) runs test recursively test returns TRUE. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. seed Random seed.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhiSigma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Random Drift Matrices and Process Noise Covariance Matrices Using the Monte Carlo Method — MCPhiSigma","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"MCPhiSigma\"). output list simulated drift matrices.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhiSigma.html","id":"monte-carlo-method","dir":"Reference","previous_headings":"","what":"Monte Carlo Method","title":"Generate Random Drift Matrices and Process Noise Covariance Matrices Using the Monte Carlo Method — MCPhiSigma","text":"Let \\(\\boldsymbol{\\theta}\\) vector combines \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise \\(\\mathrm{vech} \\left( \\boldsymbol{\\Sigma} \\right)\\), , unique elements \\(\\boldsymbol{\\Sigma}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) vector combines \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\) \\(\\mathrm{vech} \\left( \\hat{\\boldsymbol{\\Sigma}} \\right)\\). Based asymptotic properties maximum likelihood estimators, can assume estimators normally distributed around population parameters. $$   \t\\hat{\\boldsymbol{\\theta}}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\boldsymbol{\\theta},   \t\\mathbb{V} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right)   $$ Using distributional assumption, sampling distribution \\(\\hat{\\boldsymbol{\\theta}}\\) refer \\(\\hat{\\boldsymbol{\\theta}}^{\\ast}\\) can generated replacing population parameters sample estimates, , $$   \t\\hat{\\boldsymbol{\\theta}}^{\\ast}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\hat{\\boldsymbol{\\theta}},   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right) .   $$","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhiSigma.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Random Drift Matrices and Process Noise Covariance Matrices Using the Monte Carlo Method — MCPhiSigma","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCPhiSigma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Random Drift Matrices and Process Noise Covariance Matrices Using the Monte Carlo Method — MCPhiSigma","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") sigma <- matrix(   data = c(     0.24455556, 0.02201587, -0.05004762,     0.02201587, 0.07067800, 0.01539456,     -0.05004762, 0.01539456, 0.07553061   ),   nrow = 3 ) MCPhiSigma(   phi = phi,   sigma = sigma,   vcov_theta = 0.1 * diag(15),   R = 100L # use a large value for R in actual research ) #> [[1]] #> [[1]][[1]] #>         x       m       y #> x -0.0957  0.0263 -0.1507 #> m  0.8653 -0.9254  0.4226 #> y -0.3456  0.3478 -0.5309 #>  #> [[1]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.2084 -0.3647 -0.0479 #> [2,] -0.3647  0.6456  0.1214 #> [3,] -0.0479  0.1214  0.2013 #>  #>  #> [[2]] #> [[2]][[1]] #>         x       m       y #> x -0.5278 -0.3347 -0.2763 #> m  1.0161 -0.9849  0.2003 #> y -0.2007  0.6946 -0.6920 #>  #> [[2]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.2782 -0.0617 -0.3256 #> [2,] -0.0617  0.0901  0.2183 #> [3,] -0.3256  0.2183  0.6601 #>  #>  #> [[3]] #> [[3]][[1]] #>         x       m       y #> x -0.4018 -0.1907 -0.0677 #> m  0.7344 -1.3231 -0.3393 #> y  0.0472  0.5430 -0.3117 #>  #> [[3]][[2]] #>        [,1]    [,2]    [,3] #> [1,] 0.4038  0.1140  0.0883 #> [2,] 0.1140  0.1321 -0.1766 #> [3,] 0.0883 -0.1766  0.4256 #>  #>  #> [[4]] #> [[4]][[1]] #>         x       m       y #> x -0.5798  0.1835  0.2893 #> m  0.6420 -0.4850  0.2752 #> y -0.6472  0.4132 -0.3708 #>  #> [[4]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.3617  0.1826 -0.1071 #> [2,]  0.1826  0.0922 -0.0521 #> [3,] -0.1071 -0.0521  0.2382 #>  #>  #> [[5]] #> [[5]][[1]] #>         x       m       y #> x -0.5308 -0.2971  0.4638 #> m  1.0700 -0.6486 -0.6680 #> y -0.6323  0.4139 -0.9234 #>  #> [[5]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.6437  0.5209 -0.2458 #> [2,]  0.5209  0.4242 -0.1904 #> [3,] -0.2458 -0.1904  0.1198 #>  #>  #> [[6]] #> [[6]][[1]] #>         x       m       y #> x -0.5323  0.0733  0.3680 #> m  0.4414 -0.8219  0.6145 #> y -0.9988  0.7608 -0.5748 #>  #> [[6]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.0384 -0.0341  0.0446 #> [2,] -0.0341  0.1952 -0.2344 #> [3,]  0.0446 -0.2344  0.2820 #>  #>  #> [[7]] #> [[7]][[1]] #>         x       m       y #> x -0.4964 -0.3485 -0.5275 #> m  0.8803 -0.2652 -0.2808 #> y -0.4947  0.6248 -0.8066 #>  #> [[7]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.0219  0.0470 -0.0699 #> [2,]  0.0470  0.1010 -0.1503 #> [3,] -0.0699 -0.1503  0.2237 #>  #>  #> [[8]] #> [[8]][[1]] #>         x       m       y #> x -0.3729  0.1268 -0.0831 #> m  0.7244 -1.0035 -0.2035 #> y -0.2491  0.4263 -0.2417 #>  #> [[8]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.7350 -0.1220 -0.5629 #> [2,] -0.1220  0.0203  0.0935 #> [3,] -0.5629  0.0935  0.4311 #>  #>  #> [[9]] #> [[9]][[1]] #>         x      m       y #> x -0.7018 -0.287 -0.4060 #> m  0.4014 -0.926 -0.6191 #> y -0.4522  1.042 -0.9174 #>  #> [[9]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.1100 0.0805 0.1586 #> [2,] 0.0805 0.1239 0.2240 #> [3,] 0.1586 0.2240 0.4082 #>  #>  #> [[10]] #> [[10]][[1]] #>         x       m       y #> x -0.7130 -0.0718  0.2803 #> m  0.6654 -0.3968 -0.1850 #> y  0.1915  0.1108 -0.7506 #>  #> [[10]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.2025  0.2538 -0.0539 #> [2,]  0.2538  0.3182 -0.0676 #> [3,] -0.0539 -0.0676  0.0143 #>  #>  #> [[11]] #> [[11]][[1]] #>         x       m       y #> x -0.3922 -0.0144 -0.1370 #> m  0.5602 -0.4864 -0.6544 #> y -0.7721  0.4842 -0.0734 #>  #> [[11]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.6277 0.1112 0.4736 #> [2,] 0.1112 0.1715 0.0026 #> [3,] 0.4736 0.0026 0.4009 #>  #>  #> [[12]] #> [[12]][[1]] #>         x       m       y #> x -0.6543  0.1989 -0.5933 #> m  0.7583 -0.6301 -0.1023 #> y -0.3791  1.0368 -0.8090 #>  #> [[12]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.3449  0.0936 -0.1936 #> [2,]  0.0936  0.1728 -0.3292 #> [3,] -0.1936 -0.3292  0.6279 #>  #>  #> [[13]] #> [[13]][[1]] #>         x       m       y #> x -0.6089  0.2607 -0.2650 #> m  0.2459 -0.5695  0.0963 #> y -0.8200  0.4991 -0.8746 #>  #> [[13]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.0530 -0.1447  0.1748 #> [2,] -0.1447  0.3952 -0.4775 #> [3,]  0.1748 -0.4775  0.5768 #>  #>  #> [[14]] #> [[14]][[1]] #>         x       m       y #> x -0.9407  0.4237  0.1673 #> m  1.0778 -0.5615 -0.1271 #> y -0.1173  0.1810 -0.3245 #>  #> [[14]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4544 -0.0291 -0.2844 #> [2,] -0.0291  0.0261  0.0182 #> [3,] -0.2844  0.0182  0.1780 #>  #>  #> [[15]] #> [[15]][[1]] #>         x       m       y #> x -0.7717 -0.2800  0.1728 #> m  0.4799 -0.4767 -0.3760 #> y -0.1823  1.2392 -1.0738 #>  #> [[15]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.5964 0.4158 0.3092 #> [2,] 0.4158 0.3037 0.1452 #> [3,] 0.3092 0.1452 0.5176 #>  #>  #> [[16]] #> [[16]][[1]] #>         x       m       y #> x -0.6313  0.1458  0.5649 #> m  1.0035 -1.0179 -0.0652 #> y -0.7079  0.5710 -0.9275 #>  #> [[16]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.0950 -0.2015 -0.1425 #> [2,] -0.2015  0.4275  0.3022 #> [3,] -0.1425  0.3022  0.2137 #>  #>  #> [[17]] #> [[17]][[1]] #>         x       m       y #> x -0.6305  0.0519 -0.3075 #> m  0.2891 -0.8919 -0.1079 #> y -0.5822  0.8868 -0.8725 #>  #> [[17]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.6199 -0.4343 -0.4270 #> [2,] -0.4343  0.3042  0.2992 #> [3,] -0.4270  0.2992  0.2942 #>  #>  #> [[18]] #> [[18]][[1]] #>         x       m       y #> x -0.4866 -0.1255  0.3668 #> m  0.3933 -0.4558  0.3564 #> y -0.6396  0.3644 -0.4484 #>  #> [[18]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4905 -0.4313  0.2472 #> [2,] -0.4313  0.3793 -0.2173 #> [3,]  0.2472 -0.2173  0.1246 #>  #>  #> [[19]] #> [[19]][[1]] #>         x       m       y #> x -0.2808  0.0457  0.0345 #> m  0.6865 -0.4855 -0.4860 #> y -0.8859  0.3376 -1.2683 #>  #> [[19]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.4990 0.0736 0.3997 #> [2,] 0.0736 0.5316 0.1545 #> [3,] 0.3997 0.1545 0.3377 #>  #>  #> [[20]] #> [[20]][[1]] #>         x       m       y #> x -0.7559 -0.1536  0.4511 #> m  0.9942 -0.9598  0.5648 #> y -0.4914  0.5642 -1.0631 #>  #> [[20]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.5334 0.1472 0.1451 #> [2,] 0.1472 0.0407 0.0434 #> [3,] 0.1451 0.0434 0.1142 #>  #>  #> [[21]] #> [[21]][[1]] #>         x       m       y #> x -0.7730 -0.1430 -0.5482 #> m  0.4954 -0.4709 -0.1641 #> y -0.3138  1.2306 -0.6674 #>  #> [[21]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.1942 0.0945 0.1136 #> [2,] 0.0945 0.1199 0.0997 #> [3,] 0.1136 0.0997 0.0931 #>  #>  #> [[22]] #> [[22]][[1]] #>         x       m       y #> x -0.4945 -0.6671 -0.3027 #> m  1.0400 -0.4402  0.5274 #> y -0.5167  0.8127 -1.0204 #>  #> [[22]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.2571 0.2225 0.0012 #> [2,] 0.2225 0.2074 0.0620 #> [3,] 0.0012 0.0620 0.2486 #>  #>  #> [[23]] #> [[23]][[1]] #>         x       m       y #> x -0.2055 -0.1266 -0.0666 #> m  0.9118 -0.0650  0.2347 #> y -0.9983  0.2717 -0.7472 #>  #> [[23]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.2463 0.2005 0.1557 #> [2,] 0.2005 0.1994 0.0751 #> [3,] 0.1557 0.0751 0.1725 #>  #>  #> [[24]] #> [[24]][[1]] #>         x       m       y #> x -0.5935 -0.3221  0.2496 #> m  0.3853 -0.8539  0.2454 #> y -0.4149  0.2561 -0.7975 #>  #> [[24]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.2061 0.0352 0.0933 #> [2,] 0.0352 0.0060 0.0159 #> [3,] 0.0933 0.0159 0.0422 #>  #>  #> [[25]] #> [[25]][[1]] #>         x       m       y #> x -0.3634 -0.0708 -0.3003 #> m  0.9753 -0.7200  1.1534 #> y -0.4025  0.9655 -0.8761 #>  #> [[25]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.3494  0.3209 -0.1330 #> [2,]  0.3209  0.2948 -0.1221 #> [3,] -0.1330 -0.1221  0.0506 #>  #>  #> [[26]] #> [[26]][[1]] #>         x       m       y #> x -0.8219 -0.2116 -0.0700 #> m  0.4884 -0.5324  0.4498 #> y -0.3297  0.5871 -0.7476 #>  #> [[26]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.0223 -0.0503  0.0619 #> [2,] -0.0503  0.1531 -0.1182 #> [3,]  0.0619 -0.1182  0.1828 #>  #>  #> [[27]] #> [[27]][[1]] #>         x       m       y #> x -0.3332 -0.0772 -0.0003 #> m  0.5535 -0.0950 -0.1349 #> y -0.4507  0.7802 -0.5585 #>  #> [[27]][[2]] #>         [,1]    [,2]   [,3] #> [1,]  0.8069 -0.0618 0.1021 #> [2,] -0.0618  0.0854 0.1171 #> [3,]  0.1021  0.1171 0.2064 #>  #>  #> [[28]] #> [[28]][[1]] #>         x       m       y #> x -0.4629 -0.1020 -0.3401 #> m  0.8775 -0.2102 -0.4043 #> y -0.6210  0.5264 -0.9892 #>  #> [[28]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.1603 -0.0459 -0.2213 #> [2,] -0.0459  0.0131  0.0633 #> [3,] -0.2213  0.0633  0.3055 #>  #>  #> [[29]] #> [[29]][[1]] #>         x       m       y #> x -0.3671 -0.0507  0.2011 #> m  0.4971 -0.9741 -0.2671 #> y -0.3027  1.1691 -0.6000 #>  #> [[29]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.6322  0.1248 -0.1469 #> [2,]  0.1248  0.0247 -0.0290 #> [3,] -0.1469 -0.0290  0.0342 #>  #>  #> [[30]] #> [[30]][[1]] #>         x       m       y #> x -0.2002  0.1459 -0.2178 #> m  0.1059 -0.4572 -0.0207 #> y -0.2826  1.2068 -0.9261 #>  #> [[30]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  1.0116 -0.0162 -0.1021 #> [2,] -0.0162  0.0003  0.0016 #> [3,] -0.1021  0.0016  0.0103 #>  #>  #> [[31]] #> [[31]][[1]] #>         x       m       y #> x -0.5716 -0.2904 -0.9815 #> m  0.6002 -0.5104  0.3351 #> y -0.5145  0.9666 -0.5926 #>  #> [[31]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.5471  0.1585 -0.4529 #> [2,]  0.1585  0.0459 -0.1312 #> [3,] -0.4529 -0.1312  0.3749 #>  #>  #> [[32]] #> [[32]][[1]] #>         x       m       y #> x -0.7341 -0.0446 -0.5146 #> m  1.0279 -0.0788 -0.2571 #> y -0.6199  0.7966 -0.7640 #>  #> [[32]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4086  0.2762 -0.4548 #> [2,]  0.2762  0.1867 -0.3074 #> [3,] -0.4548 -0.3074  0.5061 #>  #>  #> [[33]] #> [[33]][[1]] #>         x       m       y #> x -0.0936 -0.1392  0.3097 #> m  1.0521 -0.4798 -0.4324 #> y -0.5027  0.6471 -0.7498 #>  #> [[33]][[2]] #>        [,1]    [,2]    [,3] #> [1,] 0.5477  0.2456  0.1058 #> [2,] 0.2456  0.3927 -0.0594 #> [3,] 0.1058 -0.0594  0.0609 #>  #>  #> [[34]] #> [[34]][[1]] #>         x       m       y #> x -0.0528 -0.0732 -0.4617 #> m  0.8469 -0.8229 -0.0929 #> y -0.2442  1.0004 -0.3120 #>  #> [[34]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.5940 -0.1519  0.1558 #> [2,] -0.1519  0.0918 -0.1974 #> [3,]  0.1558 -0.1974  0.5098 #>  #>  #> [[35]] #> [[35]][[1]] #>         x       m       y #> x -0.6377  0.0118 -0.2127 #> m  0.4611 -0.0850  0.0130 #> y -0.4858  0.9554 -0.8258 #>  #> [[35]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.1715  0.1234 -0.1656 #> [2,]  0.1234  0.4647 -0.5007 #> [3,] -0.1656 -0.5007  0.5472 #>  #>  #> [[36]] #> [[36]][[1]] #>         x       m       y #> x -0.3556 -0.0205 -0.0255 #> m  1.1865 -0.1943 -0.0506 #> y -0.7327  0.6756 -1.0600 #>  #> [[36]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.7062 -0.3264 -0.0720 #> [2,] -0.3264  0.3677 -0.2076 #> [3,] -0.0720 -0.2076  0.2748 #>  #>  #> [[37]] #> [[37]][[1]] #>         x       m       y #> x -0.4298 -0.0444 -0.4327 #> m  0.8583 -0.2174  0.1232 #> y -0.5062  0.4359 -0.9625 #>  #> [[37]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.2513 -0.0211  0.1160 #> [2,] -0.0211  0.0018 -0.0098 #> [3,]  0.1160 -0.0098  0.0536 #>  #>  #> [[38]] #> [[38]][[1]] #>         x       m       y #> x -0.7014  0.3487 -0.0053 #> m  0.7319 -1.2244  0.1098 #> y -0.5596  0.4242 -0.8731 #>  #> [[38]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.0633 0.0811 0.0452 #> [2,] 0.0811 0.1040 0.0579 #> [3,] 0.0452 0.0579 0.0323 #>  #>  #> [[39]] #> [[39]][[1]] #>         x       m       y #> x -0.5995 -0.4198 -0.5094 #> m  0.6576 -0.2874  0.3968 #> y -0.2405  0.7774 -0.6126 #>  #> [[39]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.5414 0.1288 0.2492 #> [2,] 0.1288 0.3167 0.0554 #> [3,] 0.2492 0.0554 0.5313 #>  #>  #> [[40]] #> [[40]][[1]] #>         x       m       y #> x -0.8816 -0.1537  0.1903 #> m  0.6856 -0.5012  0.0072 #> y -0.1474  1.2228 -1.0138 #>  #> [[40]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.2999 -0.0386 -0.0075 #> [2,] -0.0386  0.3005 -0.0819 #> [3,] -0.0075 -0.0819  0.0234 #>  #>  #> [[41]] #> [[41]][[1]] #>         x       m       y #> x -0.3246 -0.2059 -0.0913 #> m  0.9513 -0.5399 -0.5873 #> y  0.0404  1.3811 -0.5884 #>  #> [[41]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.7772 0.2049 0.1479 #> [2,] 0.2049 0.0884 0.0603 #> [3,] 0.1479 0.0603 0.0414 #>  #>  #> [[42]] #> [[42]][[1]] #>         x       m       y #> x -0.4740  0.4396 -0.0832 #> m  0.6544 -0.7612  0.3754 #> y -0.2096  0.5643 -0.9836 #>  #> [[42]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.4298 0.2421 0.1416 #> [2,] 0.2421 0.1725 0.2533 #> [3,] 0.1416 0.2533 0.8802 #>  #>  #> [[43]] #> [[43]][[1]] #>         x       m       y #> x -0.1173 -0.0902  0.1875 #> m  1.1948 -1.0243 -0.2334 #> y -0.7911  1.4457 -0.8459 #>  #> [[43]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4451  0.3015 -0.2017 #> [2,]  0.3015  0.2045 -0.1427 #> [3,] -0.2017 -0.1427  0.2367 #>  #>  #> [[44]] #> [[44]][[1]] #>         x       m       y #> x -0.4710 -0.3980  0.3124 #> m  0.4508 -0.4456 -0.1643 #> y -0.3165  0.3697 -0.7265 #>  #> [[44]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4850  0.4859 -0.0714 #> [2,]  0.4859  0.4867 -0.0716 #> [3,] -0.0714 -0.0716  0.0105 #>  #>  #> [[45]] #> [[45]][[1]] #>         x       m       y #> x -0.4309 -0.1042 -0.0629 #> m  0.7116 -0.6306  0.1055 #> y -0.4704  0.3523 -0.9833 #>  #> [[45]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.3105  0.0843 -0.3497 #> [2,]  0.0843  0.1367 -0.0448 #> [3,] -0.3497 -0.0448  0.4159 #>  #>  #> [[46]] #> [[46]][[1]] #>         x       m       y #> x -0.0051 -0.2148 -0.0709 #> m  1.0329 -0.1408  0.0182 #> y -0.4525  0.5266 -0.7625 #>  #> [[46]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.2581  0.1793 -0.3177 #> [2,]  0.1793  0.1246 -0.2207 #> [3,] -0.3177 -0.2207  0.3910 #>  #>  #> [[47]] #> [[47]][[1]] #>         x       m       y #> x -0.4616 -0.0725  0.0428 #> m  0.6098 -0.6282  0.5300 #> y -0.7799  0.4186 -0.9579 #>  #> [[47]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.1560 -0.0425  0.0423 #> [2,] -0.0425  0.3610 -0.2309 #> [3,]  0.0423 -0.2309  0.6432 #>  #>  #> [[48]] #> [[48]][[1]] #>         x       m       y #> x -0.1502 -0.0957 -0.0033 #> m  0.3819 -0.4073 -0.2677 #> y  0.3205  1.1344 -0.9660 #>  #> [[48]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.9879 -0.1351  0.1604 #> [2,] -0.1351  0.1350 -0.0800 #> [3,]  0.1604 -0.0800  0.0550 #>  #>  #> [[49]] #> [[49]][[1]] #>         x       m       y #> x -0.3805  0.0326  0.2706 #> m  0.6879 -0.8394 -0.3294 #> y -0.3198  0.7781 -0.3086 #>  #> [[49]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.1539  0.2687 -0.1492 #> [2,]  0.2687  0.6435 -0.4119 #> [3,] -0.1492 -0.4119  0.2760 #>  #>  #> [[50]] #> [[50]][[1]] #>         x       m       y #> x -0.2143  0.0397 -0.3903 #> m  0.4640 -0.6397  0.1573 #> y -0.3312  0.7080 -0.4495 #>  #> [[50]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.3515 -0.2139 -0.1041 #> [2,] -0.2139  0.3212 -0.1573 #> [3,] -0.1041 -0.1573  0.2857 #>  #>  #> [[51]] #> [[51]][[1]] #>         x       m       y #> x -0.2475 -0.4155  0.3497 #> m  0.6953 -0.4973  0.1498 #> y -0.3532  0.7291 -0.4281 #>  #> [[51]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4008  0.1479 -0.1788 #> [2,]  0.1479  0.0546 -0.0660 #> [3,] -0.1788 -0.0660  0.0797 #>  #>  #> [[52]] #> [[52]][[1]] #>         x       m       y #> x -0.1458  0.1409 -0.0531 #> m  0.9106 -0.7036 -0.0348 #> y -0.2370  0.8806 -0.7353 #>  #> [[52]][[2]] #>         [,1]   [,2]    [,3] #> [1,]  0.3600 0.0878 -0.0557 #> [2,]  0.0878 0.1881  0.2124 #> [3,] -0.0557 0.2124  0.3151 #>  #>  #> [[53]] #> [[53]][[1]] #>         x       m       y #> x -0.2222 -0.1310  0.2233 #> m  1.0857 -0.6299  0.5893 #> y -0.7770  0.5307 -1.0305 #>  #> [[53]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.6087 -0.4546  0.1737 #> [2,] -0.4546  0.3573 -0.2092 #> [3,]  0.1737 -0.2092  0.4051 #>  #>  #> [[54]] #> [[54]][[1]] #>         x       m       y #> x -0.8887  0.2168 -0.1064 #> m  0.5653 -0.6396 -0.0758 #> y -0.3042  0.6632 -0.6685 #>  #> [[54]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.1005 -0.1568 -0.1958 #> [2,] -0.1568  0.2448  0.3056 #> [3,] -0.1958  0.3056  0.3816 #>  #>  #> [[55]] #> [[55]][[1]] #>         x       m       y #> x -0.9374  0.4206  0.3723 #> m  0.5856 -0.6921  0.2199 #> y -0.1164  0.9093 -0.9678 #>  #> [[55]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4113 -0.2727  0.0610 #> [2,] -0.2727  0.2883 -0.2670 #> [3,]  0.0610 -0.2670  0.4866 #>  #>  #> [[56]] #> [[56]][[1]] #>         x       m       y #> x -0.2503 -0.5146 -0.1520 #> m  1.1227 -0.6609  0.5791 #> y -0.3941  0.9865 -0.4976 #>  #> [[56]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.7958 -0.5671 -0.3135 #> [2,] -0.5671  0.4042  0.2234 #> [3,] -0.3135  0.2234  0.1235 #>  #>  #> [[57]] #> [[57]][[1]] #>         x       m       y #> x -0.6878 -0.0961 -0.3349 #> m  0.9391 -0.0706 -0.5326 #> y -0.6234  0.9463 -0.9343 #>  #> [[57]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4845 -0.1940 -0.2539 #> [2,] -0.1940  0.7550  0.0008 #> [3,] -0.2539  0.0008  0.6943 #>  #>  #> [[58]] #> [[58]][[1]] #>         x       m       y #> x -0.3363 -0.3818 -0.1050 #> m  1.0383 -0.5745 -0.3098 #> y -0.7873  0.7268 -0.6687 #>  #> [[58]][[2]] #>        [,1]    [,2]    [,3] #> [1,] 0.6970  0.0902  0.1216 #> [2,] 0.0902  0.0818 -0.1256 #> [3,] 0.1216 -0.1256  0.3059 #>  #>  #> [[59]] #> [[59]][[1]] #>         x       m       y #> x -0.6026 -0.4554  0.3668 #> m  0.9719 -0.9901 -0.1138 #> y -0.3521  1.1071 -0.6564 #>  #> [[59]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.6601 -0.1795  0.2528 #> [2,] -0.1795  0.0515 -0.0812 #> [3,]  0.2528 -0.0812  0.1553 #>  #>  #> [[60]] #> [[60]][[1]] #>         x       m       y #> x -0.3440  0.1419 -0.0562 #> m  1.0771 -0.7116 -0.0177 #> y -0.4075  0.2834 -1.0193 #>  #> [[60]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.2470 -0.2132 -0.1865 #> [2,] -0.2132  0.5927 -0.0580 #> [3,] -0.1865 -0.0580  0.2582 #>  #>  #> [[61]] #> [[61]][[1]] #>         x       m       y #> x -0.3492  0.5789  0.0045 #> m  0.3345 -0.5409 -0.1746 #> y -0.2112  0.8523 -0.5644 #>  #> [[61]][[2]] #>         [,1]   [,2]    [,3] #> [1,]  0.6503 0.1099 -0.3057 #> [2,]  0.1099 0.0724  0.0418 #> [3,] -0.3057 0.0418  0.3061 #>  #>  #> [[62]] #> [[62]][[1]] #>         x       m       y #> x -0.1217 -0.1273 -0.2099 #> m  1.0016 -0.3975  0.1838 #> y -0.0019  1.1542 -0.9609 #>  #> [[62]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.3483 0.1607 0.1890 #> [2,] 0.1607 0.2717 0.1950 #> [3,] 0.1890 0.1950 0.1614 #>  #>  #> [[63]] #> [[63]][[1]] #>         x       m       y #> x -0.6779  0.1738 -0.0312 #> m  0.8548 -0.4255 -0.4178 #> y -0.2483  0.4674 -0.7161 #>  #> [[63]][[2]] #>         [,1]   [,2]    [,3] #> [1,]  0.3584 0.1173 -0.0433 #> [2,]  0.1173 0.1364  0.2003 #> [3,] -0.0433 0.2003  0.7328 #>  #>  #> [[64]] #> [[64]][[1]] #>         x       m       y #> x -0.3198 -0.3037  0.3106 #> m  0.8710 -0.7809 -0.0708 #> y -0.0486  0.2357 -1.0363 #>  #> [[64]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.6845 -0.2377 -0.5361 #> [2,] -0.2377  0.2679  0.0118 #> [3,] -0.5361  0.0118  0.5839 #>  #>  #> [[65]] #> [[65]][[1]] #>         x       m       y #> x -0.2864  0.3173 -0.1932 #> m  0.3938 -0.3615 -0.0835 #> y -0.6604  0.9228 -0.6961 #>  #> [[65]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.1552 -0.1702  0.1947 #> [2,] -0.1702  0.1876 -0.2055 #> [3,]  0.1947 -0.2055  0.3110 #>  #>  #> [[66]] #> [[66]][[1]] #>         x       m       y #> x -0.5653  0.5082  0.1769 #> m  0.2996 -1.0707  0.0119 #> y -0.4249  0.4022 -1.1536 #>  #> [[66]][[2]] #>        [,1]    [,2]    [,3] #> [1,] 0.6602  0.0318  0.2916 #> [2,] 0.0318  0.3417 -0.0354 #> [3,] 0.2916 -0.0354  0.1360 #>  #>  #> [[67]] #> [[67]][[1]] #>         x       m       y #> x -0.8375 -0.3296  0.2027 #> m  1.2818 -0.8500  0.0494 #> y -0.2475  0.4389 -1.2989 #>  #> [[67]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4990 -0.1841 -0.1650 #> [2,] -0.1841  0.0816  0.0937 #> [3,] -0.1650  0.0937  0.1334 #>  #>  #> [[68]] #> [[68]][[1]] #>         x       m       y #> x -0.3728 -0.3627 -0.0973 #> m  0.8306 -0.7333 -0.1693 #> y -0.3713  1.4143 -0.4007 #>  #> [[68]][[2]] #>         [,1]   [,2]    [,3] #> [1,]  0.8069 0.0429 -0.5716 #> [2,]  0.0429 0.3306  0.0608 #> [3,] -0.5716 0.0608  0.7985 #>  #>  #> [[69]] #> [[69]][[1]] #>         x       m       y #> x -0.1259 -0.6083  0.3736 #> m  0.9839 -0.9559  0.4978 #> y -0.3993  0.6415 -0.4283 #>  #> [[69]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.7396 -0.2474 -0.0459 #> [2,] -0.2474  0.3590 -0.2160 #> [3,] -0.0459 -0.2160  0.1966 #>  #>  #> [[70]] #> [[70]][[1]] #>         x       m       y #> x -0.3332  0.1637  0.3328 #> m  0.6083 -0.6661 -0.0817 #> y -0.3382  0.6261 -0.3247 #>  #> [[70]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.0999 -0.1531  0.1656 #> [2,] -0.1531  0.2345 -0.2537 #> [3,]  0.1656 -0.2537  0.2745 #>  #>  #> [[71]] #> [[71]][[1]] #>         x       m       y #> x -0.3295 -0.0327  0.3620 #> m  0.4292 -0.2922 -0.1802 #> y -0.3511  0.5100 -0.7638 #>  #> [[71]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4526  0.0713 -0.3305 #> [2,]  0.0713  0.0325 -0.0575 #> [3,] -0.3305 -0.0575  0.2428 #>  #>  #> [[72]] #> [[72]][[1]] #>         x       m       y #> x -0.7649  0.0023 -0.0388 #> m  0.2166 -0.3383 -0.1438 #> y -0.2593  0.9316 -0.7254 #>  #> [[72]][[2]] #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    0    0    0 #> [3,]    0    0    0 #>  #>  #> [[73]] #> [[73]][[1]] #>         x       m       y #> x -0.3282 -0.1264 -0.1184 #> m  0.7138 -0.9852 -0.2561 #> y -0.8044  0.5748 -1.2341 #>  #> [[73]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.6982 0.4062 0.0483 #> [2,] 0.4062 0.2404 0.0496 #> [3,] 0.0483 0.0496 0.1159 #>  #>  #> [[74]] #> [[74]][[1]] #>         x       m       y #> x -0.0355 -0.1531 -0.0393 #> m  1.0087 -0.5874 -0.0048 #> y -0.5520  0.5136 -0.3720 #>  #> [[74]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.1988 -0.2241  0.3197 #> [2,] -0.2241  0.2527 -0.3605 #> [3,]  0.3197 -0.3605  0.5142 #>  #>  #> [[75]] #> [[75]][[1]] #>         x       m       y #> x -0.4091  0.2248 -0.1308 #> m  1.1192 -0.2920 -0.0253 #> y -0.5631  1.3991 -0.6319 #>  #> [[75]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.3777 0.0686 0.4435 #> [2,] 0.0686 0.0125 0.0806 #> [3,] 0.4435 0.0806 0.5207 #>  #>  #> [[76]] #> [[76]][[1]] #>         x       m       y #> x -0.4452  0.1454 -0.2587 #> m  0.3094 -0.7091 -0.1579 #> y -0.2925  0.9600 -1.1439 #>  #> [[76]][[2]] #>         [,1]    [,2]   [,3] #> [1,]  0.4494 -0.2002 0.0348 #> [2,] -0.2002  0.0929 0.0395 #> [3,]  0.0348  0.0395 0.8192 #>  #>  #> [[77]] #> [[77]][[1]] #>         x       m       y #> x -0.4079  0.2799  0.1064 #> m  0.4409 -0.5127 -0.2555 #> y -0.1341  0.1615 -1.1697 #>  #> [[77]][[2]] #>        [,1]    [,2]    [,3] #> [1,]  0.566 -0.3470 -0.0920 #> [2,] -0.347  0.4580 -0.1594 #> [3,] -0.092 -0.1594  0.2049 #>  #>  #> [[78]] #> [[78]][[1]] #>         x       m       y #> x -0.4250  0.1499 -0.1253 #> m  0.7440 -0.5436 -0.2915 #> y -0.3072  0.2398 -0.7246 #>  #> [[78]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.1668  0.1920 -0.0725 #> [2,]  0.1920  0.2210 -0.0835 #> [3,] -0.0725 -0.0835  0.0315 #>  #>  #> [[79]] #> [[79]][[1]] #>         x       m       y #> x -0.9654  0.3400 -0.2761 #> m  1.6497 -0.8338 -0.5047 #> y -0.3753  0.3957 -0.3499 #>  #> [[79]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4109 -0.4424 -0.4244 #> [2,] -0.4424  0.6746  0.4574 #> [3,] -0.4244  0.4574  0.4383 #>  #>  #> [[80]] #> [[80]][[1]] #>         x       m       y #> x -0.3026 -0.2047  0.0103 #> m  0.7055 -0.9353 -0.6513 #> y -0.2565  0.7110 -0.5678 #>  #> [[80]][[2]] #>         [,1]    [,2]   [,3] #> [1,]  0.9495 -0.5654 0.2685 #> [2,] -0.5654  0.5518 0.0761 #> [3,]  0.2685  0.0761 0.3347 #>  #>  #> [[81]] #> [[81]][[1]] #>         x       m       y #> x -0.4775 -0.6702 -0.3674 #> m  0.6551 -1.1234  0.4847 #> y -0.4049  0.6701 -0.7851 #>  #> [[81]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.1560 -0.1204 -0.3361 #> [2,] -0.1204  0.0929  0.2594 #> [3,] -0.3361  0.2594  0.7243 #>  #>  #> [[82]] #> [[82]][[1]] #>         x       m       y #> x -0.8997  0.1674 -0.0816 #> m  0.0371 -0.7317 -0.0569 #> y -0.3321  0.9109 -0.6667 #>  #> [[82]][[2]] #>         [,1]   [,2]    [,3] #> [1,]  0.3845 0.2797 -0.0336 #> [2,]  0.2797 0.3338  0.1989 #> [3,] -0.0336 0.1989  0.3856 #>  #>  #> [[83]] #> [[83]][[1]] #>         x       m       y #> x -0.1421 -0.1995  0.1394 #> m  0.9687 -0.3008  0.1489 #> y -0.6430  1.1407 -0.8898 #>  #> [[83]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.1318 -0.0655 -0.0658 #> [2,] -0.0655  0.8798  0.1607 #> [3,] -0.0658  0.1607  0.1233 #>  #>  #> [[84]] #> [[84]][[1]] #>         x       m       y #> x -0.3852 -0.0315  0.2066 #> m  0.9687 -0.3978 -0.2098 #> y -1.1187  0.8381 -0.6674 #>  #> [[84]][[2]] #>         [,1]    [,2]   [,3] #> [1,]  0.3246 -0.2849 0.0603 #> [2,] -0.2849  0.3160 0.0328 #> [3,]  0.0603  0.0328 0.1225 #>  #>  #> [[85]] #> [[85]][[1]] #>         x       m       y #> x -1.0925  0.0420  0.4191 #> m  0.8308 -0.6494 -0.0108 #> y -0.2201  0.3032 -0.9491 #>  #> [[85]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4257  0.0134 -0.3028 #> [2,]  0.0134  0.0004 -0.0095 #> [3,] -0.3028 -0.0095  0.2154 #>  #>  #> [[86]] #> [[86]][[1]] #>         x       m       y #> x -0.5568 -0.1659 -0.4839 #> m  0.5665 -0.7612 -0.3270 #> y -0.6213  0.8655 -0.3879 #>  #> [[86]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.0339 0.1125 0.0390 #> [2,] 0.1125 0.3731 0.1294 #> [3,] 0.0390 0.1294 0.0449 #>  #>  #> [[87]] #> [[87]][[1]] #>         x       m       y #> x -0.5987 -0.4909  0.0054 #> m  0.1809 -0.8659 -0.2070 #> y -0.7260  0.8523 -0.5673 #>  #> [[87]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.2267 -0.1144 -0.3784 #> [2,] -0.1144  0.2820  0.2866 #> [3,] -0.3784  0.2866  0.6725 #>  #>  #> [[88]] #> [[88]][[1]] #>         x       m       y #> x -0.7659 -0.1603  0.0522 #> m  0.4770 -0.3408 -0.3605 #> y -0.6887  0.9374 -0.6395 #>  #> [[88]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.1592 0.1971 0.2191 #> [2,] 0.1971 0.4384 0.4851 #> [3,] 0.2191 0.4851 0.5368 #>  #>  #> [[89]] #> [[89]][[1]] #>         x       m       y #> x -0.5778 -0.0748  0.0267 #> m  0.8781 -0.1231  0.3063 #> y -0.6204  0.5089 -0.8793 #>  #> [[89]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.0008  0.0072 -0.0189 #> [2,]  0.0072  0.0689 -0.1809 #> [3,] -0.0189 -0.1809  0.4748 #>  #>  #> [[90]] #> [[90]][[1]] #>         x       m       y #> x -0.1857  0.0988  0.2849 #> m  0.9520 -1.0198  0.0733 #> y -0.8156  0.6942 -1.1091 #>  #> [[90]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.5997 -0.1292  0.1560 #> [2,] -0.1292  0.2586 -0.0034 #> [3,]  0.1560 -0.0034  0.5472 #>  #>  #> [[91]] #> [[91]][[1]] #>         x       m       y #> x -0.3640 -0.1348  0.1781 #> m  1.3082 -0.8654 -0.7101 #> y -0.8689 -0.1464 -0.7441 #>  #> [[91]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.2796 -0.3091 -0.0428 #> [2,] -0.3091  0.3419  0.0474 #> [3,] -0.0428  0.0474  0.0066 #>  #>  #> [[92]] #> [[92]][[1]] #>         x       m       y #> x -0.0762 -0.0787 -0.2930 #> m  0.7552 -0.3781 -0.0594 #> y -0.5971  0.5933 -0.8808 #>  #> [[92]][[2]] #>        [,1]    [,2]    [,3] #> [1,] 0.5715  0.1102  0.5575 #> [2,] 0.1102  0.8148 -0.1461 #> [3,] 0.5575 -0.1461  0.6248 #>  #>  #> [[93]] #> [[93]][[1]] #>         x       m       y #> x -1.3732 -0.3970  0.0553 #> m  1.3340 -0.3115  0.0461 #> y -0.1439  0.6359 -0.5621 #>  #> [[93]][[2]] #>         [,1]   [,2]    [,3] #> [1,]  0.3154 0.3700 -0.0793 #> [2,]  0.3700 0.4711  0.0266 #> [3,] -0.0793 0.0266  0.4070 #>  #>  #> [[94]] #> [[94]][[1]] #>         x       m       y #> x -0.3704 -0.4275  0.1444 #> m  1.0074 -0.4072  0.0641 #> y -0.1719  0.6905 -1.0189 #>  #> [[94]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.3796 -0.0664 -0.3805 #> [2,] -0.0664  0.0116  0.0666 #> [3,] -0.3805  0.0666  0.3815 #>  #>  #> [[95]] #> [[95]][[1]] #>         x       m       y #> x -0.3181 -0.0828 -0.1344 #> m  0.8139 -0.5644 -0.1238 #> y -0.3566  1.0848 -0.7158 #>  #> [[95]][[2]] #>        [,1]    [,2]    [,3] #> [1,] 0.3378  0.0921  0.0676 #> [2,] 0.0921  0.2749 -0.1716 #> [3,] 0.0676 -0.1716  0.1582 #>  #>  #> [[96]] #> [[96]][[1]] #>         x       m       y #> x -0.2664 -0.0638  0.0999 #> m  0.2656 -0.3639 -0.2983 #> y -0.8135  0.9058 -1.0199 #>  #> [[96]][[2]] #>         [,1]    [,2]   [,3] #> [1,]  0.3741 -0.0441 0.0745 #> [2,] -0.0441  0.1206 0.1639 #> [3,]  0.0745  0.1639 0.2732 #>  #>  #> [[97]] #> [[97]][[1]] #>         x       m       y #> x -0.6166 -0.1953 -0.0611 #> m  0.9496 -0.5474  0.1815 #> y -0.4707  0.6810 -0.2917 #>  #> [[97]][[2]] #>        [,1]   [,2]   [,3] #> [1,] 0.5194 0.3316 0.0633 #> [2,] 0.3316 0.2116 0.0404 #> [3,] 0.0633 0.0404 0.0077 #>  #>  #> [[98]] #> [[98]][[1]] #>         x       m       y #> x -0.0497 -0.0940  0.2368 #> m  0.1232 -0.8687  0.3928 #> y -1.2069  0.5177 -0.9762 #>  #> [[98]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.2133 -0.2306  0.0941 #> [2,] -0.2306  0.2577 -0.1322 #> [3,]  0.0941 -0.1322  0.1518 #>  #>  #> [[99]] #> [[99]][[1]] #>         x       m       y #> x -0.7706  0.1325 -0.1804 #> m  0.8584 -0.7141 -0.1271 #> y -0.4257  0.9780 -0.3795 #>  #> [[99]][[2]] #>         [,1]    [,2]    [,3] #> [1,]  0.4109 -0.3524  0.0863 #> [2,] -0.3524  0.3022 -0.0740 #> [3,]  0.0863 -0.0740  0.0181 #>  #>  #> [[100]] #> [[100]][[1]] #>         x       m       y #> x -0.2084  0.1132  0.0256 #> m  0.5607 -0.6442 -0.3224 #> y -0.1631  0.8814 -0.5928 #>  #> [[100]][[2]] #>         [,1]    [,2]   [,3] #> [1,]  0.3654 -0.0459 0.0433 #> [2,] -0.0459  0.2185 0.0453 #> [3,]  0.0433  0.0453 0.0173 #>  #>"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCTotalCentral.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Sampling Distribution of Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCTotalCentral","title":"Monte Carlo Sampling Distribution of Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCTotalCentral","text":"function generates Monte Carlo method sampling distribution total effect centrality particular time interval \\(\\Delta t\\) using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCTotalCentral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Sampling Distribution of Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCTotalCentral","text":"","code":"MCTotalCentral(   phi,   vcov_phi_vec,   delta_t,   R,   test_phi = TRUE,   ncores = NULL,   seed = NULL,   tol = 0.01 )"},{"path":"https://github.com/jeksterslab/cTMed/reference/MCTotalCentral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Sampling Distribution of Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCTotalCentral","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. vcov_phi_vec Numeric matrix. sampling variance-covariance matrix \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\). delta_t Numeric. Time interval (\\(\\Delta t\\)). R Positive integer. Number replications. test_phi Logical. test_phi = TRUE, function tests stability generated drift matrix \\(\\boldsymbol{\\Phi}\\). test returns FALSE, function generates new drift matrix \\(\\boldsymbol{\\Phi}\\) runs test recursively test returns TRUE. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. seed Random seed. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCTotalCentral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Sampling Distribution of Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCTotalCentral","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"MCTotalCentral\"). output list length equal length delta_t. element output list following elements: est vector total effect centrality. thetahatstar matrix Monte Carlo total effect centrality.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCTotalCentral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Sampling Distribution of Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCTotalCentral","text":"See TotalCentral() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCTotalCentral.html","id":"monte-carlo-method","dir":"Reference","previous_headings":"","what":"Monte Carlo Method","title":"Monte Carlo Sampling Distribution of Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCTotalCentral","text":"Let \\(\\boldsymbol{\\theta}\\) \\(\\mathrm{vec} \\left( \\boldsymbol{\\Phi} \\right)\\), , elements \\(\\boldsymbol{\\Phi}\\) matrix vector form sorted column-wise. Let \\(\\hat{\\boldsymbol{\\theta}}\\) \\(\\mathrm{vec} \\left( \\hat{\\boldsymbol{\\Phi}} \\right)\\). Based asymptotic properties maximum likelihood estimators, can assume estimators normally distributed around population parameters. $$   \t\\hat{\\boldsymbol{\\theta}}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\boldsymbol{\\theta},   \t\\mathbb{V} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right)   $$ Using distributional assumption, sampling distribution \\(\\hat{\\boldsymbol{\\theta}}\\) refer \\(\\hat{\\boldsymbol{\\theta}}^{\\ast}\\) can generated replacing population parameters sample estimates, , $$   \t\\hat{\\boldsymbol{\\theta}}^{\\ast}   \t\\sim   \t\\mathcal{N}   \t\\left(   \t\\hat{\\boldsymbol{\\theta}},   \t\\hat{\\mathbb{V}} \\left( \\hat{\\boldsymbol{\\theta}} \\right)   \t\\right) .   $$ Let \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) parameter function estimated parameters. sampling distribution \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}} \\right)\\) , refer \\(\\mathbf{g} \\left( \\hat{\\boldsymbol{\\theta}}^{\\ast} \\right)\\) , can generated using simulated estimates calculate \\(\\mathbf{g}\\). standard deviations simulated estimates standard errors. Percentiles corresponding \\(100 \\left( 1 - \\alpha \\right) \\%\\) confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCTotalCentral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monte Carlo Sampling Distribution of Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCTotalCentral","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MCTotalCentral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Sampling Distribution of Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCTotalCentral","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MCTotalCentral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Sampling Distribution of Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — MCTotalCentral","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- MCTotalCentral(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   R = 100L # use a large value for R in actual research ) #>  #> Total Effect Centrality #>  #> $`1` #>   interval    est     se   R    2.5%  97.5% #> x        1 0.4000 0.0504 100  0.3120 0.4933 #> m        1 0.3998 0.0387 100  0.3248 0.4864 #> y        1 0.0000 0.0677 100 -0.1541 0.1267 #>   # Range of time intervals --------------------------------------------------- mc <- MCTotalCentral(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   R = 100L # use a large value for R in actual research ) plot(mc)     # Methods ------------------------------------------------------------------- # MCTotalCentral has a number of methods including # print, summary, confint, and plot print(mc) #>  #> Total Effect Centrality #>  #> $`1` #>   interval    est     se   R    2.5%  97.5% #> x        1 0.4000 0.0475 100  0.3141 0.4843 #> m        1 0.3998 0.0381 100  0.3314 0.4624 #> y        1 0.0000 0.0625 100 -0.1182 0.1155 #>  #> $`2` #>   interval    est     se   R    2.5%  97.5% #> x        2 0.7298 0.0704 100  0.6076 0.8530 #> m        2 0.4398 0.0491 100  0.3576 0.5192 #> y        2 0.0000 0.0896 100 -0.1725 0.1691 #>  #> $`3` #>   interval    est     se   R    2.5%  97.5% #> x        3 0.8855 0.0906 100  0.7359 1.0799 #> m        3 0.3638 0.0579 100  0.2628 0.4749 #> y        3 0.0000 0.0955 100 -0.1838 0.1845 #>  #> $`4` #>   interval    est     se   R    2.5%  97.5% #> x        4 0.8970 0.1071 100  0.7547 1.1632 #> m        4 0.2683 0.0650 100  0.1591 0.3984 #> y        4 0.0000 0.0899 100 -0.1697 0.1785 #>  #> $`5` #>   interval    est     se   R    2.5%  97.5% #> x        5 0.8204 0.1187 100  0.6741 1.1338 #> m        5 0.1859 0.0688 100  0.0697 0.3298 #> y        5 0.0000 0.0790 100 -0.1432 0.1646 #>  summary(mc) #>    variable interval       est         se   R        2.5%     97.5% #> 1         x        1 0.3999957 0.04745723 100  0.31412650 0.4843171 #> 2         m        1 0.3998356 0.03807419 100  0.33138049 0.4623786 #> 3         y        1 0.0000000 0.06250114 100 -0.11821793 0.1155126 #> 4         x        2 0.7297791 0.07038259 100  0.60757052 0.8530343 #> 5         m        2 0.4398068 0.04914723 100  0.35761705 0.5191776 #> 6         y        2 0.0000000 0.08955308 100 -0.17249164 0.1691486 #> 7         x        3 0.8855303 0.09062810 100  0.73593322 1.0798544 #> 8         m        3 0.3638264 0.05794766 100  0.26284313 0.4749294 #> 9         y        3 0.0000000 0.09545987 100 -0.18381950 0.1845389 #> 10        x        4 0.8970359 0.10710058 100  0.75473326 1.1631643 #> 11        m        4 0.2682593 0.06496555 100  0.15905938 0.3984167 #> 12        y        4 0.0000000 0.08985966 100 -0.16970990 0.1784859 #> 13        x        5 0.8203630 0.11870978 100  0.67414893 1.1337760 #> 14        m        5 0.1859320 0.06881133 100  0.06968015 0.3298242 #> 15        y        5 0.0000000 0.07903072 100 -0.14315100 0.1645563 confint(mc, level = 0.95) #>    variable interval       2.5 %    97.5 % #> 1         x        1  0.31412650 0.4843171 #> 2         m        1  0.33138049 0.4623786 #> 3         y        1 -0.11821793 0.1155126 #> 4         x        2  0.60757052 0.8530343 #> 5         m        2  0.35761705 0.5191776 #> 6         y        2 -0.17249164 0.1691486 #> 7         x        3  0.73593322 1.0798544 #> 8         m        3  0.26284313 0.4749294 #> 9         y        3 -0.18381950 0.1845389 #> 10        x        4  0.75473326 1.1631643 #> 11        m        4  0.15905938 0.3984167 #> 12        y        4 -0.16970990 0.1784859 #> 13        x        5  0.67414893 1.1337760 #> 14        m        5  0.06968015 0.3298242 #> 15        y        5 -0.14315100 0.1645563 plot(mc)"},{"path":"https://github.com/jeksterslab/cTMed/reference/Med.html","id":null,"dir":"Reference","previous_headings":"","what":"Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — Med","title":"Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — Med","text":"function computes total, direct, indirect effects independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Med.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — Med","text":"","code":"Med(phi, delta_t, from, to, med, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/Med.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — Med","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. delta_t Vector positive numbers. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Med.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — Med","text":"Returns object class ctmedmed list following elements: call Function call. args Function arguments. fun Function used (\"Med\"). output matrix total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Med.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — Med","text":"See Total(), Direct(), Indirect() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Med.html","id":"linear-stochastic-differential-equation-model","dir":"Reference","previous_headings":"","what":"Linear Stochastic Differential Equation Model","title":"Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — Med","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right)   $$ \\(\\mathbf{y}_{, t}\\), \\(\\boldsymbol{\\eta}_{, t}\\), \\(\\boldsymbol{\\varepsilon}_{, t}\\) random variables \\(\\boldsymbol{\\nu}\\), \\(\\boldsymbol{\\Lambda}\\), \\(\\boldsymbol{\\Theta}\\) model parameters. \\(\\mathbf{y}_{, t}\\) represents vector observed random variables, \\(\\boldsymbol{\\eta}_{, t}\\) vector latent random variables, \\(\\boldsymbol{\\varepsilon}_{, t}\\) vector random measurement errors, time \\(t\\) individual \\(\\). \\(\\boldsymbol{\\nu}\\) denotes vector intercepts, \\(\\boldsymbol{\\Lambda}\\) matrix factor loadings, \\(\\boldsymbol{\\Theta}\\) covariance matrix \\(\\boldsymbol{\\varepsilon}\\). alternative representation measurement error given $$     \\boldsymbol{\\varepsilon}_{, t}     =     \\boldsymbol{\\Theta}^{\\frac{1}{2}}     \\mathbf{z}_{, t},     \\quad     \\mathrm{}     \\quad     \\mathbf{z}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\mathbf{}     \\right)   $$ \\(\\mathbf{z}_{, t}\\) vector independent standard normal random variables \\(     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)^{\\prime}     =     \\boldsymbol{\\Theta} .   \\) dynamic structure given $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\left(     \\boldsymbol{\\iota}     +     \\boldsymbol{\\Phi}     \\boldsymbol{\\eta}_{, t}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t}   $$ \\(\\boldsymbol{\\iota}\\) term unobserved constant time, \\(\\boldsymbol{\\Phi}\\) drift matrix represents rate change solution absence random fluctuations, \\(\\boldsymbol{\\Sigma}\\) matrix volatility randomness process, \\(\\mathrm{d}\\boldsymbol{W}\\) Wiener process Brownian motion, represents random fluctuations.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Med.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — Med","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/Med.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — Med","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Med.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — Med","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\")  # Specific time interval ---------------------------------------------------- Med(   phi = phi,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) #>  #> Total, Direct, and Indirect Effects #>  #>      interval total  direct indirect #> [1,]        1  -0.1 -0.2675   0.1674  # Range of time intervals --------------------------------------------------- med <- Med(   phi = phi,   delta_t = 1:30,   from = \"x\",   to = \"y\",   med = \"m\" ) plot(med)   # Methods ------------------------------------------------------------------- # Med has a number of methods including # print, summary, and plot med <- Med(   phi = phi,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) print(med) #>  #> Total, Direct, and Indirect Effects #>  #>      interval   total  direct indirect #> [1,]        1 -0.1000 -0.2675   0.1674 #> [2,]        2  0.0799 -0.3209   0.4008 #> [3,]        3  0.2508 -0.2914   0.5423 #> [4,]        4  0.3449 -0.2374   0.5823 #> [5,]        5  0.3693 -0.1828   0.5521 summary(med) #>      interval   total  direct indirect #> [1,]        1 -0.1000 -0.2675   0.1674 #> [2,]        2  0.0799 -0.3209   0.4008 #> [3,]        3  0.2508 -0.2914   0.5423 #> [4,]        4  0.3449 -0.2374   0.5823 #> [5,]        5  0.3693 -0.1828   0.5521 plot(med)"},{"path":"https://github.com/jeksterslab/cTMed/reference/MedStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MedStd","title":"Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MedStd","text":"function computes standardized total, direct, indirect effects independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\) process noise covariance matrix \\(\\boldsymbol{\\Sigma}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MedStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MedStd","text":"","code":"MedStd(phi, sigma, delta_t, from, to, med, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/MedStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MedStd","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. sigma Numeric matrix. process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MedStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MedStd","text":"Returns object class ctmedmed list following elements: call Function call. args Function arguments. fun Function used (\"MedStd\"). output standardized matrix total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MedStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MedStd","text":"See TotalStd(), DirectStd(), IndirectStd() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MedStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MedStd","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/MedStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MedStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/MedStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — MedStd","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") sigma <- matrix(   data = c(     0.24455556, 0.02201587, -0.05004762,     0.02201587, 0.07067800, 0.01539456,     -0.05004762, 0.01539456, 0.07553061   ),   nrow = 3 )  # Specific time interval ---------------------------------------------------- MedStd(   phi = phi,   sigma = sigma,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) #>  #> Total, Direct, and Indirect Effects #>  #>      interval   total  direct indirect #> [1,]        1 -0.0821 -0.2195   0.1374  # Range of time intervals --------------------------------------------------- med <- MedStd(   phi = phi,   sigma = sigma,   delta_t = 1:30,   from = \"x\",   to = \"y\",   med = \"m\" ) plot(med)   # Methods ------------------------------------------------------------------- # MedStd has a number of methods including # print, summary, and plot med <- MedStd(   phi = phi,   sigma = sigma,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) print(med) #>  #> Total, Direct, and Indirect Effects #>  #>      interval   total  direct indirect #> [1,]        1 -0.0821 -0.2195   0.1374 #> [2,]        2  0.0656 -0.2633   0.3289 #> [3,]        3  0.2058 -0.2391   0.4449 #> [4,]        4  0.2830 -0.1948   0.4778 #> [5,]        5  0.3030 -0.1500   0.4530 summary(med) #>      interval   total  direct indirect #> [1,]        1 -0.0821 -0.2195   0.1374 #> [2,]        2  0.0656 -0.2633   0.3289 #> [3,]        3  0.2058 -0.2391   0.4449 #> [4,]        4  0.2830 -0.1948   0.4778 #> [5,]        5  0.3030 -0.1500   0.4530 plot(med)"},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorBeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — PosteriorBeta","title":"Posterior Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — PosteriorBeta","text":"function generates posterior sampling distribution elements matrix lagged coefficients \\(\\boldsymbol{\\beta}\\) specific time interval \\(\\Delta t\\) range time intervals using first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorBeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — PosteriorBeta","text":"","code":"PosteriorBeta(phi, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorBeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — PosteriorBeta","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorBeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — PosteriorBeta","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"PosteriorBeta\"). output list length equal length delta_t. element output list following elements: est vector total, direct, indirect effects. thetahatstar matrix Monte Carlo total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorBeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — PosteriorBeta","text":"See Total().","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorBeta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Posterior Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — PosteriorBeta","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorBeta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Posterior Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — PosteriorBeta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorBeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Sampling Distribution for the Elements of the Matrix of Lagged Coefficients Over a Specific Time Interval or a Range of Time Intervals — PosteriorBeta","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  phi <- MCPhi(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   R = 1000L )$output  # Specific time interval ---------------------------------------------------- PosteriorBeta(   phi = phi,   delta_t = 1 ) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>             interval     est     se    R    2.5%   97.5% #> from x to x        1  0.6998 0.0463 1000  0.6151  0.7991 #> from x to m        1  0.4977 0.0345 1000  0.4344  0.5679 #> from x to y        1 -0.1005 0.0307 1000 -0.1602 -0.0410 #> from m to x        1  0.0021 0.0439 1000 -0.0829  0.0894 #> from m to m        1  0.6013 0.0322 1000  0.5393  0.6640 #> from m to y        1  0.3994 0.0283 1000  0.3447  0.4551 #> from y to x        1  0.0009 0.0427 1000 -0.0843  0.0824 #> from y to m        1  0.0000 0.0307 1000 -0.0589  0.0598 #> from y to y        1  0.4997 0.0265 1000  0.4500  0.5523 #>   # Range of time intervals --------------------------------------------------- posterior <- PosteriorBeta(   phi = phi,   delta_t = 1:5 ) plot(posterior)           # Methods ------------------------------------------------------------------- # PosteriorBeta has a number of methods including # print, summary, confint, and plot print(posterior) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>             interval     est     se    R    2.5%   97.5% #> from x to x        1  0.6998 0.0463 1000  0.6151  0.7991 #> from x to m        1  0.4977 0.0345 1000  0.4344  0.5679 #> from x to y        1 -0.1005 0.0307 1000 -0.1602 -0.0410 #> from m to x        1  0.0021 0.0439 1000 -0.0829  0.0894 #> from m to m        1  0.6013 0.0322 1000  0.5393  0.6640 #> from m to y        1  0.3994 0.0283 1000  0.3447  0.4551 #> from y to x        1  0.0009 0.0427 1000 -0.0843  0.0824 #> from y to m        1  0.0000 0.0307 1000 -0.0589  0.0598 #> from y to y        1  0.4997 0.0265 1000  0.4500  0.5523 #>  #> $`2` #>             interval    est     se    R    2.5%  97.5% #> from x to x        2 0.4907 0.0543 1000  0.3994 0.6117 #> from x to m        2 0.6476 0.0525 1000  0.5522 0.7579 #> from x to y        2 0.0783 0.0347 1000  0.0050 0.1411 #> from m to x        2 0.0031 0.0515 1000 -0.0970 0.1046 #> from m to m        2 0.3626 0.0493 1000  0.2690 0.4606 #> from m to y        2 0.4395 0.0332 1000  0.3789 0.5078 #> from y to x        2 0.0011 0.0516 1000 -0.1025 0.0999 #> from y to m        2 0.0004 0.0497 1000 -0.1008 0.0965 #> from y to y        2 0.2496 0.0306 1000  0.1939 0.3104 #>  #> $`3` #>             interval    est     se    R    2.5%  97.5% #> from x to x        3 0.3448 0.0547 1000  0.2528 0.4631 #> from x to m        3 0.6336 0.0647 1000  0.5207 0.7680 #> from x to y        3 0.2484 0.0356 1000  0.1777 0.3183 #> from m to x        3 0.0034 0.0500 1000 -0.0930 0.1029 #> from m to m        3 0.2195 0.0594 1000  0.1071 0.3407 #> from m to y        3 0.3641 0.0335 1000  0.3028 0.4321 #> from y to x        3 0.0010 0.0473 1000 -0.0955 0.0913 #> from y to m        3 0.0008 0.0598 1000 -0.1181 0.1113 #> from y to y        3 0.1248 0.0288 1000  0.0711 0.1838 #>  #> $`4` #>             interval    est     se    R    2.5%  97.5% #> from x to x        4 0.2428 0.0539 1000  0.1526 0.3541 #> from x to m        4 0.5526 0.0716 1000  0.4337 0.7058 #> from x to y        4 0.3425 0.0398 1000  0.2701 0.4224 #> from m to x        4 0.0031 0.0461 1000 -0.0876 0.0980 #> from m to m        4 0.1337 0.0636 1000  0.0143 0.2657 #> from m to y        4 0.2693 0.0351 1000  0.2060 0.3392 #> from y to x        4 0.0008 0.0391 1000 -0.0804 0.0731 #> from y to m        4 0.0009 0.0617 1000 -0.1224 0.1118 #> from y to y        4 0.0626 0.0304 1000  0.0032 0.1251 #>  #> $`5` #>             interval    est     se    R    2.5%  97.5% #> from x to x        5 0.1714 0.0531 1000  0.0838 0.2841 #> from x to m        5 0.4531 0.0749 1000  0.3274 0.6108 #> from x to y        5 0.3674 0.0449 1000  0.2855 0.4639 #> from m to x        5 0.0027 0.0411 1000 -0.0776 0.0890 #> from m to m        5 0.0819 0.0635 1000 -0.0414 0.2158 #> from m to y        5 0.1876 0.0374 1000  0.1198 0.2662 #> from y to x        5 0.0006 0.0307 1000 -0.0638 0.0584 #> from y to m        5 0.0010 0.0577 1000 -0.1192 0.1073 #> from y to y        5 0.0316 0.0342 1000 -0.0349 0.0988 #>  summary(posterior) #>         effect interval           est         se    R         2.5%       97.5% #> 1  from x to x        1  0.6997747580 0.04630881 1000  0.615077559  0.79909237 #> 2  from x to m        1  0.4977235070 0.03450318 1000  0.434406622  0.56791660 #> 3  from x to y        1 -0.1004675237 0.03073191 1000 -0.160219435 -0.04098514 #> 4  from m to x        1  0.0021286527 0.04386103 1000 -0.082852223  0.08944692 #> 5  from m to m        1  0.6012676812 0.03216130 1000  0.539291917  0.66398633 #> 6  from m to y        1  0.3993665208 0.02830867 1000  0.344729306  0.45514405 #> 7  from y to x        1  0.0008925094 0.04274947 1000 -0.084349428  0.08239238 #> 8  from y to m        1 -0.0000227856 0.03074610 1000 -0.058850419  0.05980749 #> 9  from y to y        1  0.4997169263 0.02648556 1000  0.449984999  0.55228822 #> 10 from x to x        2  0.4906545242 0.05433336 1000  0.399419871  0.61173690 #> 11 from x to m        2  0.6475616948 0.05246535 1000  0.552153140  0.75786017 #> 12 from x to y        2  0.0782641460 0.03474429 1000  0.004972431  0.14110172 #> 13 from m to x        2  0.0031259059 0.05150021 1000 -0.096990937  0.10462061 #> 14 from m to m        2  0.3625732052 0.04926183 1000  0.268958333  0.46063125 #> 15 from m to y        2  0.4394825317 0.03317360 1000  0.378918829  0.50781142 #> 16 from y to x        2  0.0010705091 0.05162416 1000 -0.102532405  0.09989007 #> 17 from y to m        2  0.0004191363 0.04967283 1000 -0.100770484  0.09654877 #> 18 from y to y        2  0.2496182384 0.03064911 1000  0.193901260  0.31038246 #> 19 from x to x        3  0.3447959364 0.05467864 1000  0.252788824  0.46310472 #> 20 from x to m        3  0.6335664259 0.06465743 1000  0.520666214  0.76798977 #> 21 from x to y        3  0.2484295345 0.03560143 1000  0.177739549  0.31828824 #> 22 from m to x        3  0.0033514648 0.04999419 1000 -0.093038023  0.10287867 #> 23 from m to m        3  0.2195493733 0.05938397 1000  0.107093500  0.34066995 #> 24 from m to y        3  0.3641024074 0.03347521 1000  0.302822411  0.43209314 #> 25 from y to x        3  0.0009727941 0.04734722 1000 -0.095547013  0.09128994 #> 26 from y to m        3  0.0007791430 0.05982904 1000 -0.118056515  0.11127119 #> 27 from y to y        3  0.1247982965 0.02882179 1000  0.071081827  0.18383621 #> 28 from x to x        4  0.2428498616 0.05389348 1000  0.152597586  0.35410705 #> 29 from x to m        4  0.5525503979 0.07158618 1000  0.433719879  0.70584106 #> 30 from x to y        4  0.3425288687 0.03976568 1000  0.270116254  0.42244066 #> 31 from m to x        4  0.0031375797 0.04613214 1000 -0.087630063  0.09803768 #> 32 from m to m        4  0.1336677491 0.06360383 1000  0.014283419  0.26572962 #> 33 from m to y        4  0.2692920919 0.03513585 1000  0.205977318  0.33924884 #> 34 from y to x        4  0.0007937789 0.03909627 1000 -0.080439385  0.07313009 #> 35 from y to m        4  0.0009498124 0.06166868 1000 -0.122390771  0.11181218 #> 36 from y to y        4  0.0625772505 0.03044208 1000  0.003215126  0.12507286 #> 37 from x to x        5  0.1714221013 0.05311600 1000  0.083759930  0.28405495 #> 38 from x to m        5  0.4530949765 0.07494278 1000  0.327425315  0.61079299 #> 39 from x to y        5  0.3674390791 0.04490339 1000  0.285480283  0.46391752 #> 40 from m to x        5  0.0027204770 0.04113404 1000 -0.077637039  0.08897828 #> 41 from m to m        5  0.0819256088 0.06349271 1000 -0.041364783  0.21579696 #> 42 from m to y        5  0.1876370155 0.03736094 1000  0.119828254  0.26616449 #> 43 from y to x        5  0.0006133391 0.03067619 1000 -0.063841060  0.05843968 #> 44 from y to m        5  0.0009647481 0.05769467 1000 -0.119229212  0.10730828 #> 45 from y to y        5  0.0315704856 0.03418778 1000 -0.034923849  0.09883701 confint(posterior, level = 0.95) #>         effect interval        2.5 %      97.5 % #> 1  from x to x        1  0.615077559  0.79909237 #> 2  from x to m        1  0.434406622  0.56791660 #> 3  from x to y        1 -0.160219435 -0.04098514 #> 4  from x to x        2  0.399419871  0.61173690 #> 5  from x to m        2  0.552153140  0.75786017 #> 6  from x to y        2  0.004972431  0.14110172 #> 7  from x to x        3  0.252788824  0.46310472 #> 8  from x to m        3  0.520666214  0.76798977 #> 9  from x to y        3  0.177739549  0.31828824 #> 10 from x to x        4  0.152597586  0.35410705 #> 11 from x to m        4  0.433719879  0.70584106 #> 12 from x to y        4  0.270116254  0.42244066 #> 13 from x to x        5  0.083759930  0.28405495 #> 14 from x to m        5  0.327425315  0.61079299 #> 15 from x to y        5  0.285480283  0.46391752 plot(posterior)"},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorIndirectCentral.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Distribution of the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorIndirectCentral","title":"Posterior Distribution of the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorIndirectCentral","text":"function generates posterior distribution indirect effect centrality specific time interval \\(\\Delta t\\) range time intervals using posterior distribution first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorIndirectCentral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Distribution of the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorIndirectCentral","text":"","code":"PosteriorIndirectCentral(phi, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorIndirectCentral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Distribution of the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorIndirectCentral","text":"phi List numeric matrices. element list sample posterior distribution drift matrix (\\(\\boldsymbol{\\Phi}\\)). matrix row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorIndirectCentral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Distribution of the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorIndirectCentral","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"PosteriorIndirectCentral\"). output list length equal length delta_t. element output list following elements: est Mean posterior distribution total, direct, indirect effects. thetahatstar Posterior distribution total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorIndirectCentral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior Distribution of the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorIndirectCentral","text":"See TotalCentral() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorIndirectCentral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Posterior Distribution of the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorIndirectCentral","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorIndirectCentral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Posterior Distribution of the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorIndirectCentral","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorIndirectCentral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Distribution of the Indirect Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorIndirectCentral","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  phi <- MCPhi(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   R = 1000L )$output  # Specific time interval ---------------------------------------------------- PosteriorIndirectCentral(   phi = phi,   delta_t = 1 ) #>  #> Indirect Effect Centrality #>  #> $`1` #>   interval    est     se    R    2.5%  97.5% #> x        1 0.0010 0.0196 1000 -0.0365 0.0408 #> m        1 0.1673 0.0174 1000  0.1356 0.2031 #> y        1 0.0007 0.0138 1000 -0.0259 0.0293 #>   # Range of time intervals --------------------------------------------------- posterior <- PosteriorIndirectCentral(   phi = phi,   delta_t = 1:5 )  # Methods ------------------------------------------------------------------- # PosteriorIndirectCentral has a number of methods including # print, summary, confint, and plot print(posterior) #>  #> Indirect Effect Centrality #>  #> $`1` #>   interval    est     se    R    2.5%  97.5% #> x        1 0.0010 0.0196 1000 -0.0365 0.0408 #> m        1 0.1673 0.0174 1000  0.1356 0.2031 #> y        1 0.0007 0.0138 1000 -0.0259 0.0293 #>  #> $`2` #>   interval    est     se    R    2.5%  97.5% #> x        2 0.0016 0.0384 1000 -0.0729 0.0768 #> m        2 0.4015 0.0463 1000  0.3144 0.4969 #> y        2 0.0018 0.0319 1000 -0.0579 0.0654 #>  #> $`3` #>   interval    est     se    R    2.5%  97.5% #> x        3 0.0011 0.0468 1000 -0.0900 0.0927 #> m        3 0.5453 0.0712 1000  0.4159 0.6905 #> y        3 0.0020 0.0482 1000 -0.0916 0.0989 #>  #> $`4` #>   interval    est     se    R    2.5%  97.5% #> x        4 0.0001 0.0519 1000 -0.1003 0.1026 #> m        4 0.5887 0.0865 1000  0.4366 0.7730 #> y        4 0.0016 0.0643 1000 -0.1276 0.1303 #>  #> $`5` #>   interval     est     se    R    2.5%  97.5% #> x        5 -0.0005 0.0563 1000 -0.1091 0.1095 #> m        5  0.5618 0.0922 1000  0.4060 0.7622 #> y        5  0.0010 0.0794 1000 -0.1603 0.1584 #>  summary(posterior) #>    variable interval           est         se    R        2.5%      97.5% #> 1         x        1  9.788989e-04 0.01963524 1000 -0.03647796 0.04076700 #> 2         m        1  1.672889e-01 0.01742462 1000  0.13564951 0.20305417 #> 3         y        1  7.418121e-04 0.01377097 1000 -0.02593465 0.02930916 #> 4         x        2  1.617078e-03 0.03840207 1000 -0.07287037 0.07677278 #> 5         m        2  4.014789e-01 0.04628090 1000  0.31443159 0.49687180 #> 6         y        2  1.778912e-03 0.03188078 1000 -0.05793438 0.06544479 #> 7         x        3  1.052455e-03 0.04682777 1000 -0.09002373 0.09270965 #> 8         m        3  5.453302e-01 0.07116259 1000  0.41588177 0.69045225 #> 9         y        3  2.041489e-03 0.04815189 1000 -0.09164859 0.09891248 #> 10        x        4  8.969429e-05 0.05193365 1000 -0.10030898 0.10255031 #> 11        m        4  5.886870e-01 0.08649085 1000  0.43655572 0.77296511 #> 12        y        4  1.641055e-03 0.06426294 1000 -0.12757086 0.13034183 #> 13        x        5 -4.715698e-04 0.05628920 1000 -0.10912895 0.10945063 #> 14        m        5  5.617592e-01 0.09215539 1000  0.40597962 0.76217923 #> 15        y        5  9.847401e-04 0.07942688 1000 -0.16027596 0.15841405 confint(posterior, level = 0.95) #>    variable interval       2.5 %     97.5 % #> 1         x        1 -0.03647796 0.04076700 #> 2         m        1  0.13564951 0.20305417 #> 3         y        1 -0.02593465 0.02930916 #> 4         x        2 -0.07287037 0.07677278 #> 5         m        2  0.31443159 0.49687180 #> 6         y        2 -0.05793438 0.06544479 #> 7         x        3 -0.09002373 0.09270965 #> 8         m        3  0.41588177 0.69045225 #> 9         y        3 -0.09164859 0.09891248 #> 10        x        4 -0.10030898 0.10255031 #> 11        m        4  0.43655572 0.77296511 #> 12        y        4 -0.12757086 0.13034183 #> 13        x        5 -0.10912895 0.10945063 #> 14        m        5  0.40597962 0.76217923 #> 15        y        5 -0.16027596 0.15841405 plot(posterior)"},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorMed.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — PosteriorMed","title":"Posterior Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — PosteriorMed","text":"function generates posterior distribution total, direct indirect effects independent variable \\(X\\) dependent variable \\(Y\\) mediator variables \\(\\mathbf{m}\\) specific time interval \\(\\Delta t\\) range time intervals using posterior distribution first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorMed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — PosteriorMed","text":"","code":"PosteriorMed(phi, delta_t, from, to, med, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorMed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — PosteriorMed","text":"phi List numeric matrices. element list sample posterior distribution drift matrix (\\(\\boldsymbol{\\Phi}\\)). matrix row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)). Character string. Name independent variable \\(X\\) phi. Character string. Name dependent variable \\(Y\\) phi. med Character vector. Name/s mediator variable/s phi. ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorMed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — PosteriorMed","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"PosteriorMed\"). output list length equal length delta_t. element output list following elements: est Mean posterior distribution total, direct, indirect effects. thetahatstar Posterior distribution total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorMed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — PosteriorMed","text":"See Total(), Direct(), Indirect() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorMed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Posterior Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — PosteriorMed","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorMed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Posterior Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — PosteriorMed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorMed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Distribution of Total, Direct, and Indirect Effects of X on Y Through M Over a Specific Time Interval or a Range of Time Intervals — PosteriorMed","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  phi <- MCPhi(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   R = 1000L )$output  # Specific time interval ---------------------------------------------------- PosteriorMed(   phi = phi,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se    R    2.5%   97.5% #> total           1 -0.1009 0.0321 1000 -0.1646 -0.0369 #> direct          1 -0.2672 0.0412 1000 -0.3519 -0.1864 #> indirect        1  0.1664 0.0178 1000  0.1341  0.2019 #>   # Range of time intervals --------------------------------------------------- posterior <- PosteriorMed(   phi = phi,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" )  # Methods ------------------------------------------------------------------- # PosteriorMed has a number of methods including # print, summary, confint, and plot print(posterior) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se    R    2.5%   97.5% #> total           1 -0.1009 0.0321 1000 -0.1646 -0.0369 #> direct          1 -0.2672 0.0412 1000 -0.3519 -0.1864 #> indirect        1  0.1664 0.0178 1000  0.1341  0.2019 #>  #> $`2` #>          interval     est     se    R    2.5%   97.5% #> total           2  0.0771 0.0359 1000  0.0067  0.1431 #> direct          2 -0.3231 0.0588 1000 -0.4503 -0.2173 #> indirect        2  0.4001 0.0476 1000  0.3181  0.4944 #>  #> $`3` #>          interval     est     se    R    2.5%   97.5% #> total           3  0.2477 0.0363 1000  0.1763  0.3161 #> direct          3 -0.2966 0.0659 1000 -0.4448 -0.1861 #> indirect        3  0.5443 0.0737 1000  0.4196  0.7083 #>  #> $`4` #>          interval     est     se    R    2.5%   97.5% #> total           4  0.3429 0.0403 1000  0.2720  0.4240 #> direct          4 -0.2452 0.0669 1000 -0.4024 -0.1399 #> indirect        4  0.5880 0.0905 1000  0.4403  0.7986 #>  #> $`5` #>          interval     est     se    R    2.5%   97.5% #> total           5  0.3688 0.0452 1000  0.2892  0.4669 #> direct          5 -0.1924 0.0639 1000 -0.3493 -0.0978 #> indirect        5  0.5613 0.0974 1000  0.4058  0.7886 #>  summary(posterior) #>      effect interval         est         se    R         2.5%       97.5% #> 1     total        1 -0.10086696 0.03207527 1000 -0.164639300 -0.03693203 #> 2    direct        1 -0.26721948 0.04116205 1000 -0.351915196 -0.18636417 #> 3  indirect        1  0.16635252 0.01783894 1000  0.134057398  0.20187363 #> 4     total        2  0.07708603 0.03591505 1000  0.006701073  0.14307396 #> 5    direct        2 -0.32305468 0.05875878 1000 -0.450341327 -0.21733528 #> 6  indirect        2  0.40014071 0.04758784 1000  0.318069431  0.49442469 #> 7     total        3  0.24767797 0.03634671 1000  0.176293976  0.31605233 #> 8    direct        3 -0.29661770 0.06592929 1000 -0.444837849 -0.18605237 #> 9  indirect        3  0.54429567 0.07372348 1000  0.419642984  0.70832341 #> 10    total        4  0.34285731 0.04027285 1000  0.272023199  0.42401092 #> 11   direct        4 -0.24517689 0.06687169 1000 -0.402406436 -0.13986536 #> 12 indirect        4  0.58803421 0.09050212 1000  0.440284103  0.79855677 #> 13    total        5  0.36884839 0.04521101 1000  0.289211206  0.46693840 #> 14   direct        5 -0.19244653 0.06389833 1000 -0.349267540 -0.09779297 #> 15 indirect        5  0.56129492 0.09736703 1000  0.405791502  0.78861468 confint(posterior, level = 0.95) #>      effect interval        2.5 %      97.5 % #> 1     total        1 -0.164639300 -0.03693203 #> 2    direct        1 -0.351915196 -0.18636417 #> 3  indirect        1  0.134057398  0.20187363 #> 4     total        2  0.006701073  0.14307396 #> 5    direct        2 -0.450341327 -0.21733528 #> 6  indirect        2  0.318069431  0.49442469 #> 7     total        3  0.176293976  0.31605233 #> 8    direct        3 -0.444837849 -0.18605237 #> 9  indirect        3  0.419642984  0.70832341 #> 10    total        4  0.272023199  0.42401092 #> 11   direct        4 -0.402406436 -0.13986536 #> 12 indirect        4  0.440284103  0.79855677 #> 13    total        5  0.289211206  0.46693840 #> 14   direct        5 -0.349267540 -0.09779297 #> 15 indirect        5  0.405791502  0.78861468 plot(posterior)"},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorTotalCentral.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior Distribution of the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorTotalCentral","title":"Posterior Distribution of the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorTotalCentral","text":"function generates posterior distribution total effect centrality specific time interval \\(\\Delta t\\) range time intervals using posterior distribution first-order stochastic differential equation model drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorTotalCentral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior Distribution of the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorTotalCentral","text":"","code":"PosteriorTotalCentral(phi, delta_t, ncores = NULL, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorTotalCentral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior Distribution of the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorTotalCentral","text":"phi List numeric matrices. element list sample posterior distribution drift matrix (\\(\\boldsymbol{\\Phi}\\)). matrix row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)). ncores Positive integer. Number cores use. ncores = NULL, use single core. Consider using multiple cores number replications R large value. tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorTotalCentral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior Distribution of the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorTotalCentral","text":"Returns object class ctmedmc list following elements: call Function call. args Function arguments. fun Function used (\"PosteriorTotalCentral\"). output list length equal length delta_t. element output list following elements: est Mean posterior distribution total, direct, indirect effects. thetahatstar Posterior distribution total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorTotalCentral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior Distribution of the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorTotalCentral","text":"See TotalCentral() details.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorTotalCentral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Posterior Distribution of the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorTotalCentral","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorTotalCentral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Posterior Distribution of the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorTotalCentral","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/PosteriorTotalCentral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior Distribution of the Total Effect Centrality Over a Specific Time Interval or a Range of Time Intervals — PosteriorTotalCentral","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  phi <- MCPhi(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   R = 1000L )$output  # Specific time interval ---------------------------------------------------- PosteriorTotalCentral(   phi = phi,   delta_t = 1 ) #>  #> Total Effect Centrality #>  #> $`1` #>   interval    est     se    R    2.5%  97.5% #> x        1 0.4026 0.0474 1000  0.3085 0.4934 #> m        1 0.4010 0.0409 1000  0.3176 0.4839 #> y        1 0.0014 0.0635 1000 -0.1277 0.1253 #>   # Range of time intervals --------------------------------------------------- posterior <- PosteriorTotalCentral(   phi = phi,   delta_t = 1:5 )  # Methods ------------------------------------------------------------------- # PosteriorTotalCentral has a number of methods including # print, summary, confint, and plot print(posterior) #>  #> Total Effect Centrality #>  #> $`1` #>   interval    est     se    R    2.5%  97.5% #> x        1 0.4026 0.0474 1000  0.3085 0.4934 #> m        1 0.4010 0.0409 1000  0.3176 0.4839 #> y        1 0.0014 0.0635 1000 -0.1277 0.1253 #>  #> $`2` #>   interval    est     se    R    2.5%  97.5% #> x        2 0.7345 0.0674 1000  0.6111 0.8753 #> m        2 0.4413 0.0540 1000  0.3385 0.5482 #> y        2 0.0018 0.0928 1000 -0.1846 0.1841 #>  #> $`3` #>   interval    est     se    R    2.5%  97.5% #> x        3 0.8930 0.0866 1000  0.7451 1.0874 #> m        3 0.3664 0.0626 1000  0.2512 0.4950 #> y        3 0.0017 0.1000 1000 -0.2041 0.1959 #>  #> $`4` #>   interval    est     se    R    2.5%  97.5% #> x        4 0.9079 0.1023 1000  0.7375 1.1396 #> m        4 0.2722 0.0683 1000  0.1431 0.4127 #> y        4 0.0017 0.0944 1000 -0.1922 0.1847 #>  #> $`5` #>   interval    est     se    R    2.5%  97.5% #> x        5 0.8347 0.1131 1000  0.6537 1.0861 #> m        5 0.1913 0.0708 1000  0.0572 0.3417 #> y        5 0.0020 0.0828 1000 -0.1621 0.1665 #>  summary(posterior) #>    variable interval         est         se    R        2.5%     97.5% #> 1         x        1 0.402617113 0.04736693 1000  0.30848863 0.4934005 #> 2         m        1 0.401022893 0.04086371 1000  0.31761523 0.4838669 #> 3         y        1 0.001422418 0.06352049 1000 -0.12774064 0.1253316 #> 4         x        2 0.734494663 0.06743364 1000  0.61108334 0.8752536 #> 5         m        2 0.441345838 0.05404808 1000  0.33846744 0.5482102 #> 6         y        2 0.001817357 0.09280206 1000 -0.18460271 0.1840568 #> 7         x        3 0.893039945 0.08660798 1000  0.74514581 1.0873780 #> 8         m        3 0.366424873 0.06257902 1000  0.25122899 0.4950256 #> 9         y        3 0.001699378 0.09995931 1000 -0.20414123 0.1958981 #> 10        x        4 0.907914495 0.10229651 1000  0.73747799 1.1395696 #> 11        m        4 0.272240243 0.06831946 1000  0.14308091 0.4127058 #> 12        y        4 0.001663828 0.09439566 1000 -0.19216836 0.1847016 #> 13        x        5 0.834702987 0.11307846 1000  0.65372889 1.0860634 #> 14        m        5 0.191298644 0.07084738 1000  0.05720004 0.3416777 #> 15        y        5 0.001998024 0.08277552 1000 -0.16214503 0.1664557 confint(posterior, level = 0.95) #>    variable interval       2.5 %    97.5 % #> 1         x        1  0.30848863 0.4934005 #> 2         m        1  0.31761523 0.4838669 #> 3         y        1 -0.12774064 0.1253316 #> 4         x        2  0.61108334 0.8752536 #> 5         m        2  0.33846744 0.5482102 #> 6         y        2 -0.18460271 0.1840568 #> 7         x        3  0.74514581 1.0873780 #> 8         m        3  0.25122899 0.4950256 #> 9         y        3 -0.20414123 0.1958981 #> 10        x        4  0.73747799 1.1395696 #> 11        m        4  0.14308091 0.4127058 #> 12        y        4 -0.19216836 0.1847016 #> 13        x        5  0.65372889 1.0860634 #> 14        m        5  0.05720004 0.3416777 #> 15        y        5 -0.16214503 0.1664557 plot(posterior)"},{"path":"https://github.com/jeksterslab/cTMed/reference/Total.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Effect Matrix Over a Specific Time Interval — Total","title":"Total Effect Matrix Over a Specific Time Interval — Total","text":"function computes total effects matrix specific time interval \\(\\Delta t\\) using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Effect Matrix Over a Specific Time Interval — Total","text":"","code":"Total(phi, delta_t)"},{"path":"https://github.com/jeksterslab/cTMed/reference/Total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Effect Matrix Over a Specific Time Interval — Total","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. delta_t Numeric. Time interval (\\(\\Delta t\\)).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Total.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Effect Matrix Over a Specific Time Interval — Total","text":"Returns object class ctmedeffect list following elements: call Function call. args Function arguments. fun Function used (\"Total\"). output matrix total effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Total.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Total Effect Matrix Over a Specific Time Interval — Total","text":"total effect matrix specific time interval \\(\\Delta t\\) given $$     \\mathrm{Total}_{\\Delta t}     =     \\exp     \\left(       \\Delta t       \\boldsymbol{\\Phi}     \\right)   $$ \\(\\boldsymbol{\\Phi}\\) denotes drift matrix, \\(\\Delta t\\) time interval.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Total.html","id":"linear-stochastic-differential-equation-model","dir":"Reference","previous_headings":"","what":"Linear Stochastic Differential Equation Model","title":"Total Effect Matrix Over a Specific Time Interval — Total","text":"measurement model given $$     \\mathbf{y}_{, t}     =     \\boldsymbol{\\nu}     +     \\boldsymbol{\\Lambda}     \\boldsymbol{\\eta}_{, t}     +     \\boldsymbol{\\varepsilon}_{, t},     \\quad     \\mathrm{}     \\quad     \\boldsymbol{\\varepsilon}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\boldsymbol{\\Theta}     \\right)   $$ \\(\\mathbf{y}_{, t}\\), \\(\\boldsymbol{\\eta}_{, t}\\), \\(\\boldsymbol{\\varepsilon}_{, t}\\) random variables \\(\\boldsymbol{\\nu}\\), \\(\\boldsymbol{\\Lambda}\\), \\(\\boldsymbol{\\Theta}\\) model parameters. \\(\\mathbf{y}_{, t}\\) represents vector observed random variables, \\(\\boldsymbol{\\eta}_{, t}\\) vector latent random variables, \\(\\boldsymbol{\\varepsilon}_{, t}\\) vector random measurement errors, time \\(t\\) individual \\(\\). \\(\\boldsymbol{\\nu}\\) denotes vector intercepts, \\(\\boldsymbol{\\Lambda}\\) matrix factor loadings, \\(\\boldsymbol{\\Theta}\\) covariance matrix \\(\\boldsymbol{\\varepsilon}\\). alternative representation measurement error given $$     \\boldsymbol{\\varepsilon}_{, t}     =     \\boldsymbol{\\Theta}^{\\frac{1}{2}}     \\mathbf{z}_{, t},     \\quad     \\mathrm{}     \\quad     \\mathbf{z}_{, t}     \\sim     \\mathcal{N}     \\left(     \\mathbf{0},     \\mathbf{}     \\right)   $$ \\(\\mathbf{z}_{, t}\\) vector independent standard normal random variables \\(     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)     \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)^{\\prime}     =     \\boldsymbol{\\Theta} .   \\) dynamic structure given $$     \\mathrm{d} \\boldsymbol{\\eta}_{, t}     =     \\left(     \\boldsymbol{\\iota}     +     \\boldsymbol{\\Phi}     \\boldsymbol{\\eta}_{, t}     \\right)     \\mathrm{d}t     +     \\boldsymbol{\\Sigma}^{\\frac{1}{2}}     \\mathrm{d}     \\mathbf{W}_{, t}   $$ \\(\\boldsymbol{\\iota}\\) term unobserved constant time, \\(\\boldsymbol{\\Phi}\\) drift matrix represents rate change solution absence random fluctuations, \\(\\boldsymbol{\\Sigma}\\) matrix volatility randomness process, \\(\\mathrm{d}\\boldsymbol{W}\\) Wiener process Brownian motion, represents random fluctuations.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Total.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Total Effect Matrix Over a Specific Time Interval — Total","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/Total.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Total Effect Matrix Over a Specific Time Interval — Total","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Total.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Effect Matrix Over a Specific Time Interval — Total","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") delta_t <- 1 Total(   phi = phi,   delta_t = delta_t ) #>         x      m      y #> x  0.6998 0.0000 0.0000 #> m  0.5000 0.5999 0.0000 #> y -0.1000 0.3998 0.5001 phi <- matrix(   data = c(     -6, 5.5, 0, 0,     1.25, -2.5, 5.9, -7.3,     0, 0, -6, 2.5,     5, 0, 0, -6   ),   nrow = 4 ) colnames(phi) <- rownames(phi) <- paste0(\"y\", 1:4) Total(   phi = phi,   delta_t = delta_t ) #>         y1      y2      y3      y4 #> y1 -0.0200  0.0284 -0.0214 -0.0493 #> y2 -0.0625 -0.0598  0.0252 -0.0117 #> y3 -0.0138 -0.0670  0.0566  0.0595 #> y4  0.0469  0.0767 -0.0310 -0.0171"},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalCentral.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Effect Centrality — TotalCentral","title":"Total Effect Centrality — TotalCentral","text":"Total Effect Centrality","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalCentral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Effect Centrality — TotalCentral","text":"","code":"TotalCentral(phi, delta_t, tol = 0.01)"},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalCentral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Effect Centrality — TotalCentral","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. delta_t Vector positive numbers. Time interval (\\(\\Delta t\\)). tol Numeric. Smallest possible time interval allow.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalCentral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Effect Centrality — TotalCentral","text":"Returns object class ctmedmed list following elements: call Function call. args Function arguments. fun Function used (\"TotalCentral\"). output matrix total effect centrality.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalCentral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Total Effect Centrality — TotalCentral","text":"total effect centrality variable sum total effects variable variables particular time interval.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalCentral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Total Effect Centrality — TotalCentral","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalCentral.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Total Effect Centrality — TotalCentral","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalCentral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Effect Centrality — TotalCentral","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\")  # Specific time interval ---------------------------------------------------- TotalCentral(   phi = phi,   delta_t = 1 ) #>  #> Total Effect Centrality #>  #>      interval   x      m y #> [1,]        1 0.4 0.3998 0  # Range of time intervals --------------------------------------------------- total_central <- TotalCentral(   phi = phi,   delta_t = 1:30 ) plot(total_central)   # Methods ------------------------------------------------------------------- # TotalCentral has a number of methods including # print, summary, and plot total_central <- TotalCentral(   phi = phi,   delta_t = 1:5 ) print(total_central) #>  #> Total Effect Centrality #>  #>      interval      x      m y #> [1,]        1 0.4000 0.3998 0 #> [2,]        2 0.7298 0.4398 0 #> [3,]        3 0.8855 0.3638 0 #> [4,]        4 0.8970 0.2683 0 #> [5,]        5 0.8204 0.1859 0 summary(total_central) #>      interval      x      m y #> [1,]        1 0.4000 0.3998 0 #> [2,]        2 0.7298 0.4398 0 #> [3,]        3 0.8855 0.3638 0 #> [4,]        4 0.8970 0.2683 0 #> [5,]        5 0.8204 0.1859 0 plot(total_central)"},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalStd.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Total Effect Matrix Over a Specific Time Interval — TotalStd","title":"Standardized Total Effect Matrix Over a Specific Time Interval — TotalStd","text":"function computes standardized total effects matrix specific time interval \\(\\Delta t\\) using first-order stochastic differential equation model's drift matrix \\(\\boldsymbol{\\Phi}\\) process noise covariance matrix \\(\\boldsymbol{\\Sigma}\\).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalStd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Total Effect Matrix Over a Specific Time Interval — TotalStd","text":"","code":"TotalStd(phi, sigma, delta_t)"},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalStd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Total Effect Matrix Over a Specific Time Interval — TotalStd","text":"phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. sigma Numeric matrix. process noise covariance matrix (\\(\\boldsymbol{\\Sigma}\\)). delta_t Numeric. Time interval (\\(\\Delta t\\)).","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalStd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Total Effect Matrix Over a Specific Time Interval — TotalStd","text":"Returns object class ctmedeffect list following elements: call Function call. args Function arguments. fun Function used (\"TotalStd\"). output standardized matrix total effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalStd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Total Effect Matrix Over a Specific Time Interval — TotalStd","text":"standardized total effect matrix specific time interval \\(\\Delta t\\) given $$     \\mathrm{Total}^{\\ast}_{\\Delta t}     =     \\mathbf{S}     \\left(     \\exp     \\left(       \\Delta t       \\boldsymbol{\\Phi}     \\right)     \\right)     \\mathbf{S}^{-1}   $$ \\(\\boldsymbol{\\Phi}\\) denotes drift matrix, \\(\\mathbf{S}\\) diagonal matrix model-implied steady-state standard deviations diagonals \\(\\Delta t\\) time interval.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalStd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Total Effect Matrix Over a Specific Time Interval — TotalStd","text":"Bollen, K. . (1987). Total, direct, indirect effects structural equation models. Sociological Methodology, 17, 37. doi:10.2307/271028 Deboeck, P. R., & Preacher, K. J. (2015). need discrete: method continuous time mediation analysis. Structural Equation Modeling: Multidisciplinary Journal, 23 (1), 61–75. doi:10.1080/10705511.2014.973960 Ryan, O., & Hamaker, E. L. (2021). Time intervene: continuous-time approach network analysis centrality. Psychometrika, 87 (1), 214–252. doi:10.1007/s11336-021-09767-0","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalStd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Total Effect Matrix Over a Specific Time Interval — TotalStd","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/TotalStd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Total Effect Matrix Over a Specific Time Interval — TotalStd","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") sigma <- matrix(   data = c(     0.24455556, 0.02201587, -0.05004762,     0.02201587, 0.07067800, 0.01539456,     -0.05004762, 0.01539456, 0.07553061   ),   nrow = 3 ) delta_t <- 1 TotalStd(   phi = phi,   sigma = sigma,   delta_t = delta_t ) #>         x      m      y #> x  0.6998 0.0000 0.0000 #> m  0.6176 0.5999 0.0000 #> y -0.0821 0.2656 0.5001"},{"path":"https://github.com/jeksterslab/cTMed/reference/Trajectory.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Trajectories of Variables — Trajectory","title":"Simulate Trajectories of Variables — Trajectory","text":"function simulates trajectories variables without measurement error process noise. Total corresponds total effect Direct corresponds portion total effect indirect effect removed.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Trajectory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Trajectories of Variables — Trajectory","text":"","code":"Trajectory(mu0, time, phi, med)"},{"path":"https://github.com/jeksterslab/cTMed/reference/Trajectory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Trajectories of Variables — Trajectory","text":"mu0 Numeric vector. Initial values variables. time Positive integer. Number time points. phi Numeric matrix. drift matrix (\\(\\boldsymbol{\\Phi}\\)). phi row column names pertaining variables system. med Character vector. Name/s mediator variable/s phi.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/Trajectory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Trajectories of Variables — Trajectory","text":"Returns object class ctmedtraj list following elements: call Function call. args Function arguments. fun Function used (\"Trajectory\"). output data frame simulated data.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/Trajectory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Trajectories of Variables — Trajectory","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\")  traj <- Trajectory(   mu0 = c(3, 3, -3),   time = 150,   phi = phi,   med = \"m\" ) plot(traj)     # Methods ------------------------------------------------------------------- # Trajectory has a number of methods including # print, summary, and plot  traj <- Trajectory(   mu0 = c(3, 3, -3),   time = 25,   phi = phi,   med = \"m\" ) print(traj) #>    time       y1        y2          y3   effect #> 1   0.0 3.000000 3.0000000 -3.00000000    total #> 2   0.1 2.894789 3.0720294 -2.71331237    total #> 3   0.2 2.793268 3.1327033 -2.43666332    total #> 4   0.3 2.695307 3.1828597 -2.17030792    total #> 5   0.4 2.600782 3.2232855 -1.91442143    total #> 6   0.5 2.509572 3.2547189 -1.66910840    total #> 7   0.6 2.421561 3.2778528 -1.43441085    total #> 8   0.7 2.336636 3.2933366 -1.21031580    total #> 9   0.8 2.254690 3.3017795 -0.99676204    total #> 10  0.9 2.175617 3.3037519 -0.79364635    total #> 11  1.0 2.099317 3.2997885 -0.60082904    total #> 12  1.1 2.025694 3.2903896 -0.41813908    total #> 13  1.2 1.954652 3.2760236 -0.24537862    total #> 14  1.3 1.886102 3.2571286 -0.08232717    total #> 15  1.4 1.819956 3.2341140  0.07125470    total #> 16  1.5 1.756130 3.2073626  0.21562200    total #> 17  1.6 1.694542 3.1772318  0.35104230    total #> 18  1.7 1.635114 3.1440552  0.47779306    total #> 19  1.8 1.577770 3.1081440  0.59615920    total #> 20  1.9 1.522437 3.0697883  0.70643095    total #> 21  2.0 1.469045 3.0292583  0.80890195    total #> 22  2.1 1.417525 2.9868056  0.90386756    total #> 23  2.2 1.367812 2.9426643  0.99162335    total #> 24  2.3 1.319842 2.8970518  1.07246380    total #> 25  2.4 1.273555 2.8501701  1.14668113    total #> 26  0.0 3.000000 3.0000000 -3.00000000   direct #> 27  0.1 2.894789 2.8505509 -2.92724153   direct #> 28  0.2 2.793268 2.7085469 -2.85486193   direct #> 29  0.3 2.695307 2.5736170 -2.78299339   direct #> 30  0.4 2.600782 2.4454088 -2.71175371   direct #> 31  0.5 2.509572 2.3235874 -2.64124750   direct #> 32  0.6 2.421561 2.2078348 -2.57156720   direct #> 33  0.7 2.336636 2.0978485 -2.50279409   direct #> 34  0.8 2.254690 1.9933413 -2.43499924   direct #> 35  0.9 2.175617 1.8940403 -2.36824433   direct #> 36  1.0 2.099317 1.7996862 -2.30258245   direct #> 37  1.1 2.025694 1.7100324 -2.23805882   direct #> 38  1.2 1.954652 1.6248448 -2.17471149   direct #> 39  1.3 1.886102 1.5439009 -2.11257197   direct #> 40  1.4 1.819956 1.4669894 -2.05166577   direct #> 41  1.5 1.756130 1.3939094 -1.99201297   direct #> 42  1.6 1.694542 1.3244699 -1.93362870   direct #> 43  1.7 1.635114 1.2584896 -1.87652362   direct #> 44  1.8 1.577770 1.1957963 -1.82070431   direct #> 45  1.9 1.522437 1.1362261 -1.76617367   direct #> 46  2.0 1.469045 1.0796234 -1.71293131   direct #> 47  2.1 1.417525 1.0258405 -1.66097382   direct #> 48  2.2 1.367812 0.9747369 -1.61029513   direct #> 49  2.3 1.319842 0.9261790 -1.56088678   direct #> 50  2.4 1.273555 0.8800402 -1.51273817   direct #> 51  0.0 3.000000 3.0000000 -3.00000000 indirect #> 52  0.1 2.894789 3.0720294 -2.58521101 indirect #> 53  0.2 2.793268 3.1327033 -2.19352996 indirect #> 54  0.3 2.695307 3.1828597 -1.82417931 indirect #> 55  0.4 2.600782 3.2232855 -1.47637642 indirect #> 56  0.5 2.509572 3.2547189 -1.14933736 indirect #> 57  0.6 2.421561 3.2778528 -0.84228031 indirect #> 58  0.7 2.336636 3.2933366 -0.55442860 indirect #> 59  0.8 2.254690 3.3017795 -0.28501322 indirect #> 60  0.9 2.175617 3.3037519 -0.03327518 indirect #> 61  1.0 2.099317 3.2997885  0.20153262 indirect #> 62  1.1 2.025694 3.2903896  0.42014365 indirect #> 63  1.2 1.954652 3.2760236  0.62327638 indirect #> 64  1.3 1.886102 3.2571286  0.81163307 indirect #> 65  1.4 1.819956 3.2341140  0.98589878 indirect #> 66  1.5 1.756130 3.2073626  1.14674061 indirect #> 67  1.6 1.694542 3.1772318  1.29480700 indirect #> 68  1.7 1.635114 3.1440552  1.43072731 indirect #> 69  1.8 1.577770 3.1081440  1.55511147 indirect #> 70  1.9 1.522437 3.0697883  1.66854971 indirect #> 71  2.0 1.469045 3.0292583  1.77161245 indirect #> 72  2.1 1.417525 2.9868056  1.86485031 indirect #> 73  2.2 1.367812 2.9426643  1.94879411 indirect #> 74  2.3 1.319842 2.8970518  2.02395503 indirect #> 75  2.4 1.273555 2.8501701  2.09082478 indirect summary(traj) #>    time       y1        y2          y3   effect #> 1   0.0 3.000000 3.0000000 -3.00000000    total #> 2   0.1 2.894789 3.0720294 -2.71331237    total #> 3   0.2 2.793268 3.1327033 -2.43666332    total #> 4   0.3 2.695307 3.1828597 -2.17030792    total #> 5   0.4 2.600782 3.2232855 -1.91442143    total #> 6   0.5 2.509572 3.2547189 -1.66910840    total #> 7   0.6 2.421561 3.2778528 -1.43441085    total #> 8   0.7 2.336636 3.2933366 -1.21031580    total #> 9   0.8 2.254690 3.3017795 -0.99676204    total #> 10  0.9 2.175617 3.3037519 -0.79364635    total #> 11  1.0 2.099317 3.2997885 -0.60082904    total #> 12  1.1 2.025694 3.2903896 -0.41813908    total #> 13  1.2 1.954652 3.2760236 -0.24537862    total #> 14  1.3 1.886102 3.2571286 -0.08232717    total #> 15  1.4 1.819956 3.2341140  0.07125470    total #> 16  1.5 1.756130 3.2073626  0.21562200    total #> 17  1.6 1.694542 3.1772318  0.35104230    total #> 18  1.7 1.635114 3.1440552  0.47779306    total #> 19  1.8 1.577770 3.1081440  0.59615920    total #> 20  1.9 1.522437 3.0697883  0.70643095    total #> 21  2.0 1.469045 3.0292583  0.80890195    total #> 22  2.1 1.417525 2.9868056  0.90386756    total #> 23  2.2 1.367812 2.9426643  0.99162335    total #> 24  2.3 1.319842 2.8970518  1.07246380    total #> 25  2.4 1.273555 2.8501701  1.14668113    total #> 26  0.0 3.000000 3.0000000 -3.00000000   direct #> 27  0.1 2.894789 2.8505509 -2.92724153   direct #> 28  0.2 2.793268 2.7085469 -2.85486193   direct #> 29  0.3 2.695307 2.5736170 -2.78299339   direct #> 30  0.4 2.600782 2.4454088 -2.71175371   direct #> 31  0.5 2.509572 2.3235874 -2.64124750   direct #> 32  0.6 2.421561 2.2078348 -2.57156720   direct #> 33  0.7 2.336636 2.0978485 -2.50279409   direct #> 34  0.8 2.254690 1.9933413 -2.43499924   direct #> 35  0.9 2.175617 1.8940403 -2.36824433   direct #> 36  1.0 2.099317 1.7996862 -2.30258245   direct #> 37  1.1 2.025694 1.7100324 -2.23805882   direct #> 38  1.2 1.954652 1.6248448 -2.17471149   direct #> 39  1.3 1.886102 1.5439009 -2.11257197   direct #> 40  1.4 1.819956 1.4669894 -2.05166577   direct #> 41  1.5 1.756130 1.3939094 -1.99201297   direct #> 42  1.6 1.694542 1.3244699 -1.93362870   direct #> 43  1.7 1.635114 1.2584896 -1.87652362   direct #> 44  1.8 1.577770 1.1957963 -1.82070431   direct #> 45  1.9 1.522437 1.1362261 -1.76617367   direct #> 46  2.0 1.469045 1.0796234 -1.71293131   direct #> 47  2.1 1.417525 1.0258405 -1.66097382   direct #> 48  2.2 1.367812 0.9747369 -1.61029513   direct #> 49  2.3 1.319842 0.9261790 -1.56088678   direct #> 50  2.4 1.273555 0.8800402 -1.51273817   direct #> 51  0.0 3.000000 3.0000000 -3.00000000 indirect #> 52  0.1 2.894789 3.0720294 -2.58521101 indirect #> 53  0.2 2.793268 3.1327033 -2.19352996 indirect #> 54  0.3 2.695307 3.1828597 -1.82417931 indirect #> 55  0.4 2.600782 3.2232855 -1.47637642 indirect #> 56  0.5 2.509572 3.2547189 -1.14933736 indirect #> 57  0.6 2.421561 3.2778528 -0.84228031 indirect #> 58  0.7 2.336636 3.2933366 -0.55442860 indirect #> 59  0.8 2.254690 3.3017795 -0.28501322 indirect #> 60  0.9 2.175617 3.3037519 -0.03327518 indirect #> 61  1.0 2.099317 3.2997885  0.20153262 indirect #> 62  1.1 2.025694 3.2903896  0.42014365 indirect #> 63  1.2 1.954652 3.2760236  0.62327638 indirect #> 64  1.3 1.886102 3.2571286  0.81163307 indirect #> 65  1.4 1.819956 3.2341140  0.98589878 indirect #> 66  1.5 1.756130 3.2073626  1.14674061 indirect #> 67  1.6 1.694542 3.1772318  1.29480700 indirect #> 68  1.7 1.635114 3.1440552  1.43072731 indirect #> 69  1.8 1.577770 3.1081440  1.55511147 indirect #> 70  1.9 1.522437 3.0697883  1.66854971 indirect #> 71  2.0 1.469045 3.0292583  1.77161245 indirect #> 72  2.1 1.417525 2.9868056  1.86485031 indirect #> 73  2.2 1.367812 2.9426643  1.94879411 indirect #> 74  2.3 1.319842 2.8970518  2.02395503 indirect #> 75  2.4 1.273555 2.8501701  2.09082478 indirect plot(traj)"},{"path":"https://github.com/jeksterslab/cTMed/reference/cTMed-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cTMed: Continuous Time Mediation — cTMed-package","title":"cTMed: Continuous Time Mediation — cTMed-package","text":"Calculates standard errors confidence intervals effects continuous-time mediation models. package extends work Deboeck Preacher (2015) doi:10.1080/10705511.2014.973960  Ryan Hamaker (2021) doi:10.1007/s11336-021-09767-0  providing methods generate standard errors confidence intervals total, direct, indirect effects models.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/reference/cTMed-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cTMed: Continuous Time Mediation — cTMed-package","text":"Maintainer: Ivan Jacob Agaloos Pesigan r.jeksterslab@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedboot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Method Confidence Intervals — confint.ctmedboot","title":"Bootstrap Method Confidence Intervals — confint.ctmedboot","text":"Bootstrap Method Confidence Intervals","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedboot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Method Confidence Intervals — confint.ctmedboot","text":"","code":"# S3 method for class 'ctmedboot' confint(object, parm = NULL, level = 0.95, type = \"pc\", ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedboot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Method Confidence Intervals — confint.ctmedboot","text":"object Object class ctmedboot. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. type Charater string. Confidence interval type, , type = \"pc\" percentile; type = \"bc\" bias corrected. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedboot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Method Confidence Intervals — confint.ctmedboot","text":"Returns data frame confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedboot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap Method Confidence Intervals — confint.ctmedboot","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedboot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Method Confidence Intervals — confint.ctmedboot","text":"","code":"if (FALSE) { # \\dontrun{ library(bootStateSpace) # prepare parameters ## number of individuals n <- 50 ## time points time <- 100 delta_t <- 0.10 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- matrix(   data = c(     1.0,     0.2,     0.2,     0.2,     1.0,     0.2,     0.2,     0.2,     1.0   ),   nrow = p ) sigma0_l <- t(chol(sigma0)) mu <- rep(x = 0, times = p) phi <- matrix(   data = c(     -0.357,     0.771,     -0.450,     0.0,     -0.511,     0.729,     0,     0,     -0.693   ),   nrow = p ) sigma <- matrix(   data = c(     0.24455556,     0.02201587,     -0.05004762,     0.02201587,     0.07067800,     0.01539456,     -0.05004762,     0.01539456,     0.07553061   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.2 * diag(k) theta_l <- t(chol(theta))  boot <- PBSSMOUFixed(   R = 1000L,   path = getwd(),   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = parallel::detectCores() - 1,   seed = 42 ) phi_hat <- phi colnames(phi_hat) <- rownames(phi_hat) <- c(\"x\", \"m\", \"y\") phi <- extract(object = boot, what = \"phi\")  # Specific time interval ---------------------------------------------------- boot <- BootMed(   phi = phi,   phi_hat = phi_hat,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) confint(boot) confint(boot, type = \"bc\") # bias-corrected  # Range of time intervals --------------------------------------------------- boot <- BootMed(   phi = phi,   phi_hat = phi_hat,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) confint(boot) confint(boot, type = \"bc\") # bias-corrected } # }"},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmeddelta.html","id":null,"dir":"Reference","previous_headings":"","what":"Delta Method Confidence Intervals — confint.ctmeddelta","title":"Delta Method Confidence Intervals — confint.ctmeddelta","text":"Delta Method Confidence Intervals","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmeddelta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delta Method Confidence Intervals — confint.ctmeddelta","text":"","code":"# S3 method for class 'ctmeddelta' confint(object, parm = NULL, level = 0.95, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmeddelta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delta Method Confidence Intervals — confint.ctmeddelta","text":"object Object class ctmeddelta. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmeddelta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delta Method Confidence Intervals — confint.ctmeddelta","text":"Returns data frame confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmeddelta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Delta Method Confidence Intervals — confint.ctmeddelta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmeddelta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delta Method Confidence Intervals — confint.ctmeddelta","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- delta <- DeltaMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) confint(delta, level = 0.95) #>     effect interval      2.5 %      97.5 % #> 1    total        1 -0.1599945 -0.04008223 #> 2   direct        1 -0.3446621 -0.19024569 #> 3 indirect        1  0.1330653  0.20176572  # Range of time intervals --------------------------------------------------- delta <- DeltaMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) confint(delta, level = 0.95) #>      effect interval       2.5 %      97.5 % #> 1     total        1 -0.15999452 -0.04008223 #> 2    direct        1 -0.34466208 -0.19024569 #> 3  indirect        1  0.13306530  0.20176572 #> 4     total        2  0.01279611  0.14700550 #> 5    direct        2 -0.42910491 -0.21270209 #> 6  indirect        2  0.31054364  0.49106497 #> 7     total        3  0.18167990  0.31994775 #> 8    direct        3 -0.41067673 -0.17220847 #> 9  indirect        3  0.40444738  0.68006547 #> 10    total        4  0.26767567  0.42218015 #> 11   direct        4 -0.35568031 -0.11909972 #> 12 indirect        4  0.41577174  0.74886411 #> 13    total        5  0.28273472  0.45577286 #> 14   direct        5 -0.29275471 -0.07293472 #> 15 indirect        5  0.37591173  0.72828528"},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Method Confidence Intervals — confint.ctmedmc","title":"Monte Carlo Method Confidence Intervals — confint.ctmedmc","text":"Monte Carlo Method Confidence Intervals","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Method Confidence Intervals — confint.ctmedmc","text":"","code":"# S3 method for class 'ctmedmc' confint(object, parm = NULL, level = 0.95, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Method Confidence Intervals — confint.ctmedmc","text":"object Object class ctmedmc. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Method Confidence Intervals — confint.ctmedmc","text":"Returns data frame confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedmc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monte Carlo Method Confidence Intervals — confint.ctmedmc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/confint.ctmedmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Method Confidence Intervals — confint.ctmedmc","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- mc <- MCMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) confint(mc, level = 0.95) #>     effect interval      2.5 %      97.5 % #> 1    total        1 -0.1727980 -0.03444335 #> 2   direct        1 -0.3530971 -0.18029584 #> 3 indirect        1  0.1310468  0.19907046  # Range of time intervals --------------------------------------------------- mc <- MCMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) confint(mc, level = 0.95) #>      effect interval       2.5 %      97.5 % #> 1     total        1 -0.15232781 -0.04123191 #> 2    direct        1 -0.34098924 -0.19575030 #> 3  indirect        1  0.13034214  0.19730024 #> 4     total        2  0.01734713  0.13816481 #> 5    direct        2 -0.43347383 -0.22496835 #> 6  indirect        2  0.32090375  0.48438931 #> 7     total        3  0.17891544  0.31595326 #> 8    direct        3 -0.42496332 -0.19529856 #> 9  indirect        3  0.43134204  0.68245524 #> 10    total        4  0.27762014  0.42528849 #> 11   direct        4 -0.37132486 -0.14987686 #> 12 indirect        4  0.45427525  0.74867661 #> 13    total        5  0.30966378  0.47707320 #> 14   direct        5 -0.31560524 -0.11390776 #> 15 indirect        5  0.42321469  0.75325267"},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedboot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for an Object of Class ctmedboot — plot.ctmedboot","title":"Plot Method for an Object of Class ctmedboot — plot.ctmedboot","text":"Plot Method Object Class ctmedboot","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedboot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for an Object of Class ctmedboot — plot.ctmedboot","text":"","code":"# S3 method for class 'ctmedboot' plot(x, alpha = 0.05, col = NULL, type = \"pc\", ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedboot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for an Object of Class ctmedboot — plot.ctmedboot","text":"x Object class ctmedboot. alpha Numeric. Significance level col Character vector. Optional argument. Character vector colors. type Charater string. Confidence interval type, , type = \"pc\" percentile; type = \"bc\" bias corrected. ... Additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedboot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for an Object of Class ctmedboot — plot.ctmedboot","text":"Displays plots point estimates confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedboot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Method for an Object of Class ctmedboot — plot.ctmedboot","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedboot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for an Object of Class ctmedboot — plot.ctmedboot","text":"","code":"if (FALSE) { # \\dontrun{ library(bootStateSpace) # prepare parameters ## number of individuals n <- 50 ## time points time <- 100 delta_t <- 0.10 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- matrix(   data = c(     1.0,     0.2,     0.2,     0.2,     1.0,     0.2,     0.2,     0.2,     1.0   ),   nrow = p ) sigma0_l <- t(chol(sigma0)) mu <- rep(x = 0, times = p) phi <- matrix(   data = c(     -0.357,     0.771,     -0.450,     0.0,     -0.511,     0.729,     0,     0,     -0.693   ),   nrow = p ) sigma <- matrix(   data = c(     0.24455556,     0.02201587,     -0.05004762,     0.02201587,     0.07067800,     0.01539456,     -0.05004762,     0.01539456,     0.07553061   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.2 * diag(k) theta_l <- t(chol(theta))  boot <- PBSSMOUFixed(   R = 1000L,   path = getwd(),   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = parallel::detectCores() - 1,   seed = 42 ) phi_hat <- phi colnames(phi_hat) <- rownames(phi_hat) <- c(\"x\", \"m\", \"y\") phi <- extract(object = boot, what = \"phi\")  # Range of time intervals --------------------------------------------------- boot <- BootMed(   phi = phi,   phi_hat = phi_hat,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) confint(boot) confint(boot, type = \"bc\") # bias-corrected } # }"},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmeddelta.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for an Object of Class ctmeddelta — plot.ctmeddelta","title":"Plot Method for an Object of Class ctmeddelta — plot.ctmeddelta","text":"Plot Method Object Class ctmeddelta","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmeddelta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for an Object of Class ctmeddelta — plot.ctmeddelta","text":"","code":"# S3 method for class 'ctmeddelta' plot(x, alpha = 0.05, col = NULL, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmeddelta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for an Object of Class ctmeddelta — plot.ctmeddelta","text":"x Object class ctmeddelta. alpha Numeric. Significance level col Character vector. Optional argument. Character vector colors. ... Additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmeddelta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for an Object of Class ctmeddelta — plot.ctmeddelta","text":"Displays plots point estimates confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmeddelta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Method for an Object of Class ctmeddelta — plot.ctmeddelta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmeddelta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for an Object of Class ctmeddelta — plot.ctmeddelta","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Range of time intervals --------------------------------------------------- delta <- DeltaMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) plot(delta)"},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for an Object of Class ctmedmc — plot.ctmedmc","title":"Plot Method for an Object of Class ctmedmc — plot.ctmedmc","text":"Plot Method Object Class ctmedmc","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for an Object of Class ctmedmc — plot.ctmedmc","text":"","code":"# S3 method for class 'ctmedmc' plot(x, alpha = 0.05, col = NULL, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for an Object of Class ctmedmc — plot.ctmedmc","text":"x Object class ctmedmc. alpha Numeric. Significance level col Character vector. Optional argument. Character vector colors. ... Additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for an Object of Class ctmedmc — plot.ctmedmc","text":"Displays plots point estimates confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Method for an Object of Class ctmedmc — plot.ctmedmc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for an Object of Class ctmedmc — plot.ctmedmc","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Range of time intervals --------------------------------------------------- mc <- MCMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) plot(mc)"},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmed.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for an Object of Class ctmedmed — plot.ctmedmed","title":"Plot Method for an Object of Class ctmedmed — plot.ctmedmed","text":"Plot Method Object Class ctmedmed","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for an Object of Class ctmedmed — plot.ctmedmed","text":"","code":"# S3 method for class 'ctmedmed' plot(x, col = NULL, legend_pos = \"topright\", ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for an Object of Class ctmedmed — plot.ctmedmed","text":"x Object class ctmedmed. col Character vector. Optional argument. Character vector colors. legend_pos Character vector. Optional argument. Legend position. ... Additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for an Object of Class ctmedmed — plot.ctmedmed","text":"Displays plots point estimates confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Method for an Object of Class ctmedmed — plot.ctmedmed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedmed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for an Object of Class ctmedmed — plot.ctmedmed","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\")  # Range of time intervals --------------------------------------------------- med <- Med(   phi = phi,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) plot(med)"},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedtraj.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for an Object of Class ctmedtraj — plot.ctmedtraj","title":"Plot Method for an Object of Class ctmedtraj — plot.ctmedtraj","text":"Plot Method Object Class ctmedtraj","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedtraj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for an Object of Class ctmedtraj — plot.ctmedtraj","text":"","code":"# S3 method for class 'ctmedtraj' plot(x, legend_pos = \"topright\", total = TRUE, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedtraj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for an Object of Class ctmedtraj — plot.ctmedtraj","text":"x Object class ctmedtraj. legend_pos Character vector. Optional argument. Legend position. total Logical. total = TRUE, include total effect trajectory. total = FALSE, exclude total effect trajectory. ... Additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedtraj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for an Object of Class ctmedtraj — plot.ctmedtraj","text":"Displays trajectory plots effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedtraj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Method for an Object of Class ctmedtraj — plot.ctmedtraj","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/plot.ctmedtraj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for an Object of Class ctmedtraj — plot.ctmedtraj","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\")  traj <- Trajectory(   mu0 = c(3, 3, -3),   time = 150,   phi = phi,   med = \"m\" )  plot(traj)"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedboot.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class ctmedboot — print.ctmedboot","title":"Print Method for Object of Class ctmedboot — print.ctmedboot","text":"Print Method Object Class ctmedboot","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedboot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class ctmedboot — print.ctmedboot","text":"","code":"# S3 method for class 'ctmedboot' print(x, alpha = 0.05, digits = 4, type = \"pc\", ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedboot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class ctmedboot — print.ctmedboot","text":"x object class ctmedboot. alpha Numeric vector. Significance level \\(\\alpha\\). digits Integer indicating number decimal places display. type Charater string. Confidence interval type, , type = \"pc\" percentile; type = \"bc\" bias corrected. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedboot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class ctmedboot — print.ctmedboot","text":"Prints list matrices time intervals, estimates, standard errors, number bootstrap replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedboot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class ctmedboot — print.ctmedboot","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedboot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class ctmedboot — print.ctmedboot","text":"","code":"if (FALSE) { # \\dontrun{ library(bootStateSpace) # prepare parameters ## number of individuals n <- 50 ## time points time <- 100 delta_t <- 0.10 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- matrix(   data = c(     1.0,     0.2,     0.2,     0.2,     1.0,     0.2,     0.2,     0.2,     1.0   ),   nrow = p ) sigma0_l <- t(chol(sigma0)) mu <- rep(x = 0, times = p) phi <- matrix(   data = c(     -0.357,     0.771,     -0.450,     0.0,     -0.511,     0.729,     0,     0,     -0.693   ),   nrow = p ) sigma <- matrix(   data = c(     0.24455556,     0.02201587,     -0.05004762,     0.02201587,     0.07067800,     0.01539456,     -0.05004762,     0.01539456,     0.07553061   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.2 * diag(k) theta_l <- t(chol(theta))  boot <- PBSSMOUFixed(   R = 1000L,   path = getwd(),   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = parallel::detectCores() - 1,   seed = 42 ) phi_hat <- phi colnames(phi_hat) <- rownames(phi_hat) <- c(\"x\", \"m\", \"y\") phi <- extract(object = boot, what = \"phi\")  # Specific time interval ---------------------------------------------------- boot <- BootMed(   phi = phi,   phi_hat = phi_hat,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) print(boot) print(boot, type = \"bc\") # bias-corrected  # Range of time intervals --------------------------------------------------- boot <- BootMed(   phi = phi,   phi_hat = phi_hat,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) print(boot) print(boot, type = \"bc\") # bias-corrected } # }"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmeddelta.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class ctmeddelta — print.ctmeddelta","title":"Print Method for Object of Class ctmeddelta — print.ctmeddelta","text":"Print Method Object Class ctmeddelta","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmeddelta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class ctmeddelta — print.ctmeddelta","text":"","code":"# S3 method for class 'ctmeddelta' print(x, alpha = 0.05, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmeddelta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class ctmeddelta — print.ctmeddelta","text":"x object class ctmeddelta. alpha Numeric vector. Significance level \\(\\alpha\\). digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmeddelta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class ctmeddelta — print.ctmeddelta","text":"Prints list matrices time intervals, estimates, standard errors, test statistics, p-values, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmeddelta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class ctmeddelta — print.ctmeddelta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmeddelta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class ctmeddelta — print.ctmeddelta","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- delta <- DeltaMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) print(delta) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se       z      p    2.5%   97.5% #> total           1 -0.1000 0.0306 -3.2703 0.0011 -0.1600 -0.0401 #> direct          1 -0.2675 0.0394 -6.7894 0.0000 -0.3447 -0.1902 #> indirect        1  0.1674 0.0175  9.5524 0.0000  0.1331  0.2018 #>   # Range of time intervals --------------------------------------------------- delta <- DeltaMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) print(delta) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se       z      p    2.5%   97.5% #> total           1 -0.1000 0.0306 -3.2703 0.0011 -0.1600 -0.0401 #> direct          1 -0.2675 0.0394 -6.7894 0.0000 -0.3447 -0.1902 #> indirect        1  0.1674 0.0175  9.5524 0.0000  0.1331  0.2018 #>  #> $`2` #>          interval     est     se       z      p    2.5%   97.5% #> total           2  0.0799 0.0342  2.3337 0.0196  0.0128  0.1470 #> direct          2 -0.3209 0.0552 -5.8129 0.0000 -0.4291 -0.2127 #> indirect        2  0.4008 0.0461  8.7033 0.0000  0.3105  0.4911 #>  #> $`3` #>          interval     est     se       z p    2.5%   97.5% #> total           3  0.2508 0.0353  7.1106 0  0.1817  0.3199 #> direct          3 -0.2914 0.0608 -4.7907 0 -0.4107 -0.1722 #> indirect        3  0.5423 0.0703  7.7121 0  0.4044  0.6801 #>  #> $`4` #>          interval     est     se       z     p    2.5%   97.5% #> total           4  0.3449 0.0394  8.7512 0e+00  0.2677  0.4222 #> direct          4 -0.2374 0.0604 -3.9333 1e-04 -0.3557 -0.1191 #> indirect        4  0.5823 0.0850  6.8529 0e+00  0.4158  0.7489 #>  #> $`5` #>          interval     est     se       z      p    2.5%   97.5% #> total           5  0.3693 0.0441  8.3649 0.0000  0.2827  0.4558 #> direct          5 -0.1828 0.0561 -3.2606 0.0011 -0.2928 -0.0729 #> indirect        5  0.5521 0.0899  6.1417 0.0000  0.3759  0.7283 #>"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedeffect.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class ctmedeffect — print.ctmedeffect","title":"Print Method for Object of Class ctmedeffect — print.ctmedeffect","text":"Print Method Object Class ctmedeffect","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedeffect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class ctmedeffect — print.ctmedeffect","text":"","code":"# S3 method for class 'ctmedeffect' print(x, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedeffect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class ctmedeffect — print.ctmedeffect","text":"x object class ctmedeffect. digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedeffect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class ctmedeffect — print.ctmedeffect","text":"Prints effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedeffect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class ctmedeffect — print.ctmedeffect","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedeffect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class ctmedeffect — print.ctmedeffect","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") delta_t <- 1  # Time Interval of One -----------------------------------------------------  ## Total Effect ------------------------------------------------------------ total_dt <- Total(   phi = phi,   delta_t = delta_t ) print(total_dt) #>         x      m      y #> x  0.6998 0.0000 0.0000 #> m  0.5000 0.5999 0.0000 #> y -0.1000 0.3998 0.5001  ## Direct Effect ----------------------------------------------------------- direct_dt <- Direct(   phi = phi,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\" ) print(direct_dt) #> [1] -0.2675  ## Indirect Effect --------------------------------------------------------- indirect_dt <- Indirect(   phi = phi,   delta_t = delta_t,   from = \"x\",   to = \"y\",   med = \"m\" ) print(indirect_dt) #> [1] 0.1674"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class ctmedmc — print.ctmedmc","title":"Print Method for Object of Class ctmedmc — print.ctmedmc","text":"Print Method Object Class ctmedmc","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class ctmedmc — print.ctmedmc","text":"","code":"# S3 method for class 'ctmedmc' print(x, alpha = 0.05, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class ctmedmc — print.ctmedmc","text":"x object class ctmedmc. alpha Numeric vector. Significance level \\(\\alpha\\). digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class ctmedmc — print.ctmedmc","text":"Prints list matrices time intervals, estimates, standard errors, number Monte Carlo replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class ctmedmc — print.ctmedmc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class ctmedmc — print.ctmedmc","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- mc <- MCMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) print(mc) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se   R    2.5%   97.5% #> total           1 -0.1000 0.0349 100 -0.1728 -0.0344 #> direct          1 -0.2675 0.0454 100 -0.3531 -0.1803 #> indirect        1  0.1674 0.0189 100  0.1310  0.1991 #>   # Range of time intervals --------------------------------------------------- mc <- MCMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) print(mc) #>  #> Total, Direct, and Indirect Effects #>  #> $`1` #>          interval     est     se   R    2.5%   97.5% #> total           1 -0.1000 0.0283 100 -0.1523 -0.0412 #> direct          1 -0.2675 0.0379 100 -0.3410 -0.1958 #> indirect        1  0.1674 0.0181 100  0.1303  0.1973 #>  #> $`2` #>          interval     est     se   R    2.5%   97.5% #> total           2  0.0799 0.0318 100  0.0173  0.1382 #> direct          2 -0.3209 0.0533 100 -0.4335 -0.2250 #> indirect        2  0.4008 0.0472 100  0.3209  0.4844 #>  #> $`3` #>          interval     est     se   R    2.5%   97.5% #> total           3  0.2508 0.0341 100  0.1789  0.3160 #> direct          3 -0.2914 0.0600 100 -0.4250 -0.1953 #> indirect        3  0.5423 0.0723 100  0.4313  0.6825 #>  #> $`4` #>          interval     est     se   R    2.5%   97.5% #> total           4  0.3449 0.0396 100  0.2776  0.4253 #> direct          4 -0.2374 0.0614 100 -0.3713 -0.1499 #> indirect        4  0.5823 0.0888 100  0.4543  0.7487 #>  #> $`5` #>          interval     est     se   R    2.5%   97.5% #> total           5  0.3693 0.0454 100  0.3097  0.4771 #> direct          5 -0.1828 0.0592 100 -0.3156 -0.1139 #> indirect        5  0.5521 0.0964 100  0.4232  0.7533 #>"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmcphi.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class ctmedmcphi — print.ctmedmcphi","title":"Print Method for Object of Class ctmedmcphi — print.ctmedmcphi","text":"Print Method Object Class ctmedmcphi","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmcphi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class ctmedmcphi — print.ctmedmcphi","text":"","code":"# S3 method for class 'ctmedmcphi' print(x, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmcphi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class ctmedmcphi — print.ctmedmcphi","text":"x object class ctmedmcphi. digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmcphi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class ctmedmcphi — print.ctmedmcphi","text":"Prints list drift matrices.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmcphi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class ctmedmcphi — print.ctmedmcphi","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmcphi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class ctmedmcphi — print.ctmedmcphi","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") mc <- MCPhi(   phi = phi,   vcov_phi_vec = 0.1 * diag(9),   R = 100L # use a large value for R in actual research ) print(mc) #> [[1]] #>         x       m       y #> x -0.3295  0.2220 -0.2679 #> m  0.7555 -0.8565  0.0091 #> y -0.4690  1.5626 -0.7618 #>  #> [[2]] #>         x       m       y #> x -0.3830  0.0943 -0.4144 #> m  0.9453 -0.4066 -0.3812 #> y -0.1887  0.7553 -0.8437 #>  #> [[3]] #>         x       m      y #> x -0.1077 -0.0344  0.001 #> m  0.4363 -0.7873 -0.033 #> y -0.9239  0.9293 -0.606 #>  #> [[4]] #>         x       m       y #> x -0.7750  0.1073 -0.1698 #> m  1.2028 -0.5626 -0.0798 #> y  0.0148  0.6496 -0.5988 #>  #> [[5]] #>         x       m       y #> x -1.0155  0.2169 -0.4148 #> m  0.8304 -0.3326 -0.1625 #> y -0.0059  0.3293 -0.4056 #>  #> [[6]] #>         x       m       y #> x -0.5023 -0.3002  0.2227 #> m  0.5239 -0.0857  0.3440 #> y -0.0757  0.5680 -0.9511 #>  #> [[7]] #>         x       m       y #> x -0.1279 -0.4010 -0.1586 #> m  0.7976 -0.4652 -0.6030 #> y -0.3153  0.3125 -0.7378 #>  #> [[8]] #>         x       m       y #> x -0.6284  0.2739 -0.1972 #> m  0.4140 -0.7338  0.1835 #> y -0.1817  0.6000 -0.6670 #>  #> [[9]] #>         x       m       y #> x -0.3203 -0.4097 -0.1738 #> m  1.0749 -0.4948  0.2990 #> y -0.4625  0.9025 -0.8753 #>  #> [[10]] #>         x       m       y #> x -0.4946 -0.6680  0.8914 #> m  0.4559 -0.7414 -0.3237 #> y  0.0138  0.7617 -0.7599 #>  #> [[11]] #>         x       m       y #> x -0.3574 -0.3296 -0.3109 #> m  0.9960 -1.0598  0.0318 #> y -0.6253  0.8023 -0.3250 #>  #> [[12]] #>         x       m       y #> x -0.2388  0.1046  0.1173 #> m  0.5637 -0.5110 -0.0937 #> y -0.4943  0.3738 -0.8324 #>  #> [[13]] #>         x       m       y #> x -0.4017 -0.1042 -0.1136 #> m  0.4225 -1.0385 -0.7173 #> y -0.2042  0.4482 -0.7084 #>  #> [[14]] #>         x       m       y #> x -0.5168 -0.1229  0.2009 #> m  0.4649 -0.5269  0.1268 #> y -0.4530  0.6824 -1.1855 #>  #> [[15]] #>         x       m       y #> x -0.4401  0.1808 -0.1407 #> m  0.5675 -0.7721 -0.0552 #> y  0.0013 -0.1627 -0.8033 #>  #> [[16]] #>         x      m       y #> x -0.7018 -0.287 -0.4060 #> m  0.4014 -0.926 -0.6191 #> y -0.4522  1.042 -0.9174 #>  #> [[17]] #>         x       m       y #> x -0.2428 -0.1850  0.3692 #> m  0.1528 -0.5686 -0.1734 #> y -0.1697  0.4695 -0.5461 #>  #> [[18]] #>         x       m       y #> x -0.8570 -0.0544 -0.0911 #> m  1.4080 -0.4738 -1.0594 #> y  0.0874  0.8196 -0.4478 #>  #> [[19]] #>         x       m       y #> x -0.4047 -0.2895  0.1201 #> m  0.7085 -0.7802  0.3837 #> y  0.3360  0.2906 -0.3345 #>  #> [[20]] #>         x       m       y #> x -0.1396 -0.0238 -0.1357 #> m  0.3961 -0.4810  0.0038 #> y  0.1203  0.4805 -0.1099 #>  #> [[21]] #>         x       m       y #> x -0.5919  0.0691 -0.0411 #> m  0.7065 -0.8078 -0.0403 #> y -0.7677  0.9824 -0.9226 #>  #> [[22]] #>         x       m       y #> x -0.3922 -0.0144 -0.1370 #> m  0.5602 -0.4864 -0.6544 #> y -0.7721  0.4842 -0.0734 #>  #> [[23]] #>         x       m       y #> x -0.0552 -0.2630 -0.2973 #> m  1.6914 -0.6528 -0.0127 #> y -0.4832  0.2784 -0.6221 #>  #> [[24]] #>         x       m       y #> x -0.4761 -0.1023  0.0572 #> m  1.0788 -0.6270 -0.1512 #> y -1.0433  0.8290 -1.1084 #>  #> [[25]] #>         x       m       y #> x -0.5386  0.3221  0.0621 #> m  0.4560 -0.7578  0.2615 #> y -0.5445 -0.2587 -0.8716 #>  #> [[26]] #>         x       m       y #> x -0.8226 -0.0375  0.1275 #> m  0.9053 -0.3728 -0.0042 #> y -0.1520  0.6408 -0.3339 #>  #> [[27]] #>         x       m       y #> x -0.3714 -0.2501  0.0273 #> m  0.3441 -0.5902  0.4339 #> y -0.1173  0.6587 -0.6179 #>  #> [[28]] #>         x       m       y #> x -0.2288  0.1370  0.0740 #> m  0.6924 -0.8384 -0.6592 #> y -0.6282  0.4929 -0.9160 #>  #> [[29]] #>         x       m       y #> x -0.9407  0.4237  0.1673 #> m  1.0778 -0.5615 -0.1271 #> y -0.1173  0.1810 -0.3245 #>  #> [[30]] #>         x       m       y #> x -0.4081  0.0028  0.0232 #> m  0.4974 -0.4713 -0.4130 #> y -0.4946  0.2607 -0.5754 #>  #> [[31]] #>         x       m       y #> x -0.1392 -0.4151  0.1329 #> m  0.4121 -0.3814 -0.0712 #> y -0.8051  0.4695 -0.5703 #>  #> [[32]] #>         x       m       y #> x -1.0668 -0.3412 -0.0488 #> m  1.5288 -0.5792 -0.6432 #> y -0.0236  0.6782 -0.9510 #>  #> [[33]] #>         x       m       y #> x -0.6313  0.1458  0.5649 #> m  1.0035 -1.0179 -0.0652 #> y -0.7079  0.5710 -0.9275 #>  #> [[34]] #>         x       m       y #> x -0.5981  0.5447  0.2370 #> m  0.5518 -0.8220  0.1444 #> y -0.2837  0.7441 -0.8026 #>  #> [[35]] #>         x       m       y #> x -0.3760 -0.6159 -0.1619 #> m  0.7455 -0.4486  0.3184 #> y -0.5399  0.8208 -0.9259 #>  #> [[36]] #>         x       m       y #> x -0.8211  0.3333  0.5403 #> m  0.4818 -0.6742  0.1147 #> y -0.4575  1.0438 -0.6069 #>  #> [[37]] #>         x       m       y #> x -0.0438 -0.1913 -0.2189 #> m  1.0121 -1.0879  0.4560 #> y -0.7420  0.9661 -0.4182 #>  #> [[38]] #>         x       m       y #> x -0.6305  0.0519 -0.3075 #> m  0.2891 -0.8919 -0.1079 #> y -0.5822  0.8868 -0.8725 #>  #> [[39]] #>         x       m       y #> x -0.9969  0.6508 -0.2677 #> m  0.4777 -0.5442 -0.0148 #> y -0.8395  0.8875 -1.0651 #>  #> [[40]] #>         x       m       y #> x -0.4153 -0.3777  0.0552 #> m  0.6768 -0.7006 -0.3646 #> y -0.5796  0.6035 -0.3262 #>  #> [[41]] #>         x       m       y #> x -0.4109 -0.2373 -0.0544 #> m  0.5736 -0.9596 -0.2123 #> y -0.3284  1.0132 -0.3790 #>  #> [[42]] #>         x       m       y #> x -0.1467 -0.3364 -0.4359 #> m  0.2769 -0.4348  0.0457 #> y -0.5458  0.6445 -0.6675 #>  #> [[43]] #>         x       m       y #> x -0.3225  0.0097  0.4471 #> m  0.2850 -0.5174  0.2141 #> y -1.0253  1.4949 -0.8394 #>  #> [[44]] #>         x       m       y #> x -0.7559 -0.1536  0.4511 #> m  0.9942 -0.9598  0.5648 #> y -0.4914  0.5642 -1.0631 #>  #> [[45]] #>         x       m       y #> x -0.1769  0.0374 -0.4160 #> m  0.9637 -0.4728 -0.2756 #> y -0.6885  0.3754 -0.5568 #>  #> [[46]] #>         x       m       y #> x -0.3169 -0.1641  0.0323 #> m  1.2726 -0.4854  0.2306 #> y -0.9982  0.6590 -0.7262 #>  #> [[47]] #>         x       m       y #> x -0.5678  0.2690  0.0708 #> m  0.4662 -0.5777  0.0837 #> y -0.5875  0.0619 -0.9957 #>  #> [[48]] #>         x       m       y #> x -0.9053 -0.4573 -0.0542 #> m  0.6444 -0.5776 -0.2122 #> y -0.0040  0.9637 -0.3440 #>  #> [[49]] #>         x       m       y #> x -0.3641  0.2027  0.0351 #> m  0.7360 -0.7475 -0.3221 #> y -0.4191  0.3433 -1.0359 #>  #> [[50]] #>         x       m       y #> x -0.1074 -0.1336 -0.3040 #> m  1.0164 -0.4057 -0.1125 #> y -0.5545  1.0478 -1.0712 #>  #> [[51]] #>         x       m       y #> x -0.3634 -0.0708 -0.3003 #> m  0.9753 -0.7200  1.1534 #> y -0.4025  0.9655 -0.8761 #>  #> [[52]] #>         x       m       y #> x -0.4116  0.1819  0.0896 #> m  0.2703 -0.4336  0.1018 #> y -0.5597  0.6048 -0.6692 #>  #> [[53]] #>         x       m       y #> x -0.9718 -0.1154 -0.1710 #> m  1.2792 -0.6169 -0.1020 #> y -0.5817  0.8355 -0.3922 #>  #> [[54]] #>         x       m       y #> x -0.3671 -0.0507  0.2011 #> m  0.4971 -0.9741 -0.2671 #> y -0.3027  1.1691 -0.6000 #>  #> [[55]] #>         x       m       y #> x -0.9081 -0.2732 -0.1377 #> m  0.7826 -0.2509  0.0539 #> y -0.4285  0.7691 -0.6318 #>  #> [[56]] #>         x       m       y #> x -0.6330 -0.1352  0.4032 #> m  1.3981 -0.4071 -0.4848 #> y -0.0628  0.8709 -0.6484 #>  #> [[57]] #>         x       m       y #> x -0.5716 -0.2904 -0.9815 #> m  0.6002 -0.5104  0.3351 #> y -0.5145  0.9666 -0.5926 #>  #> [[58]] #>         x       m       y #> x -0.0853 -0.1908  0.5859 #> m -0.0739 -0.7610 -0.2784 #> y -1.0674  0.6428 -0.8445 #>  #> [[59]] #>         x       m       y #> x -0.3777  0.0656  0.1128 #> m  0.8989 -0.5156 -0.4871 #> y -0.4501  0.3930 -0.4726 #>  #> [[60]] #>         x       m       y #> x -1.1444  0.2666 -0.0877 #> m  0.2862 -0.3202 -0.2117 #> y -0.5150  1.3012 -0.5467 #>  #> [[61]] #>         x       m       y #> x -0.5269  0.0676 -0.0710 #> m  0.7264 -1.0256  0.0231 #> y -0.0178  0.4719 -0.4232 #>  #> [[62]] #>         x       m       y #> x -0.2998 -0.1015  0.1827 #> m  0.4915 -0.6801  0.3549 #> y -0.0945  0.9665 -0.9195 #>  #> [[63]] #>         x       m       y #> x -0.0936 -0.1392  0.3097 #> m  1.0521 -0.4798 -0.4324 #> y -0.5027  0.6471 -0.7498 #>  #> [[64]] #>         x       m       y #> x -0.6689 -0.0929 -0.2490 #> m  1.0424 -0.1300  0.1806 #> y -0.9117  1.0659 -1.1202 #>  #> [[65]] #>         x       m       y #> x -0.4898 -0.1196  0.4541 #> m  0.6970 -0.1351 -0.3419 #> y -0.3528  0.1951 -0.7034 #>  #> [[66]] #>         x       m       y #> x -0.2360 -0.0164 -0.3757 #> m  0.9830 -0.6066 -0.2857 #> y -0.1591  0.7775 -1.0288 #>  #> [[67]] #>         x       m       y #> x -0.6339  0.0342  0.0401 #> m  0.8270 -1.0489  0.4998 #> y  0.0652  0.5969 -0.5418 #>  #> [[68]] #>         x       m       y #> x -0.5422 -0.0616  0.0014 #> m  0.6718 -0.3817  0.4155 #> y -0.7427  0.3234 -0.9757 #>  #> [[69]] #>         x       m       y #> x -0.0403 -0.0506 -0.5266 #> m  0.7176 -0.8780 -0.1823 #> y -0.4755  1.0920 -0.7177 #>  #> [[70]] #>         x       m       y #> x -0.4184  0.0873  0.2936 #> m  0.5819 -0.5672 -0.2931 #> y -0.5228  0.6846 -1.1257 #>  #> [[71]] #>         x       m       y #> x -0.6265  0.2090 -0.1042 #> m  0.7528 -0.9778  0.0057 #> y -0.5539  0.7630 -0.0298 #>  #> [[72]] #>         x       m       y #> x -0.3142 -0.4175 -0.3436 #> m  0.6047 -0.6731  0.4674 #> y -0.0897  0.5923 -1.0471 #>  #> [[73]] #>         x       m       y #> x -0.7625 -0.1079 -0.1096 #> m  0.5141 -0.8554  0.3487 #> y -0.6520  0.6899 -1.4064 #>  #> [[74]] #>         x       m       y #> x -0.3623 -0.2808 -0.0804 #> m  0.8808 -0.4030  0.1781 #> y -0.6301  0.8759 -1.0519 #>  #> [[75]] #>         x       m       y #> x -0.5995 -0.4198 -0.5094 #> m  0.6576 -0.2874  0.3968 #> y -0.2405  0.7774 -0.6126 #>  #> [[76]] #>         x       m       y #> x -0.2502  0.0400 -0.2393 #> m  1.0703 -0.0552 -0.2317 #> y -0.2040  0.5293 -0.4795 #>  #> [[77]] #>         x       m       y #> x -0.3583  0.4105 -0.3260 #> m  0.4468 -0.7572 -0.4285 #> y  0.0135  0.4630 -0.4630 #>  #> [[78]] #>         x       m       y #> x -0.6778  0.0109 -0.5704 #> m  0.8244 -0.3219 -0.1490 #> y -0.5195  0.4863 -1.0459 #>  #> [[79]] #>         x       m       y #> x -0.1261 -0.2689  0.1719 #> m  1.2347 -0.8141 -0.5353 #> y -0.5857  1.1799 -0.7561 #>  #> [[80]] #>         x       m       y #> x -0.2520 -0.4989  0.4904 #> m  0.5242 -0.4786 -0.2059 #> y -0.3187  0.9093 -0.7219 #>  #> [[81]] #>         x       m       y #> x -0.4483  0.5324 -0.0998 #> m  0.1837 -0.3331  0.2339 #> y -0.3454  0.9350 -1.0312 #>  #> [[82]] #>         x       m       y #> x -0.4740  0.4396 -0.0832 #> m  0.6544 -0.7612  0.3754 #> y -0.2096  0.5643 -0.9836 #>  #> [[83]] #>         x       m       y #> x -0.8703 -0.2334  0.4392 #> m  1.4877 -0.6639 -0.1450 #> y -0.2625  0.8243 -0.8017 #>  #> [[84]] #>         x       m       y #> x -0.1962 -0.3202  0.0654 #> m  1.3910 -0.3775 -0.3593 #> y -0.5640  0.3310 -0.3806 #>  #> [[85]] #>         x       m       y #> x -0.3905 -0.2777 -0.3170 #> m  0.3367 -0.6976  0.0301 #> y  0.6498  0.8609 -0.6813 #>  #> [[86]] #>         x       m       y #> x -0.6248 -0.4520  0.2134 #> m  0.8028 -0.2845  0.0879 #> y -0.9383  0.9861 -0.6502 #>  #> [[87]] #>         x       m       y #> x -0.1593 -0.5304 -0.0042 #> m  0.9188 -0.6926 -0.0764 #> y -0.2094  0.5743 -0.4895 #>  #> [[88]] #>         x       m       y #> x -0.4309 -0.1042 -0.0629 #> m  0.7116 -0.6306  0.1055 #> y -0.4704  0.3523 -0.9833 #>  #> [[89]] #>         x       m       y #> x -0.1073  0.0902  0.3519 #> m  0.0455 -0.5125  0.2619 #> y -0.4501  0.8671 -0.6955 #>  #> [[90]] #>         x       m       y #> x -0.1855 -0.1612 -0.1172 #> m  0.9788 -0.8409 -0.3104 #> y -0.5546  0.6565 -0.6502 #>  #> [[91]] #>         x       m       y #> x -0.2742 -0.0278 -0.0435 #> m  0.3944 -0.2534 -0.2422 #> y  0.6082  0.6999 -0.5411 #>  #> [[92]] #>         x       m       y #> x -0.8169  0.2507  0.1256 #> m  0.2168 -0.8083  0.4825 #> y  0.0757  0.5949 -0.5242 #>  #> [[93]] #>         x       m       y #> x -0.3167  0.0613 -0.1022 #> m  0.6812 -0.6474 -0.5121 #> y -0.3802  0.8593 -0.4606 #>  #> [[94]] #>         x       m       y #> x -0.4927  0.0970  0.1964 #> m  0.6259 -0.5075  0.2843 #> y -0.2871  0.1613 -1.0010 #>  #> [[95]] #>         x       m       y #> x -0.2908 -0.0831 -0.3284 #> m  0.7124 -0.3808  0.0491 #> y -0.4735  0.7616 -0.4224 #>  #> [[96]] #>         x       m       y #> x -0.2382 -0.0210  0.2435 #> m  0.8107 -0.9013  0.0443 #> y -0.5787  0.8863 -1.0013 #>  #> [[97]] #>         x       m       y #> x -0.3714 -0.2303 -0.3200 #> m  1.2856 -0.9282  0.2868 #> y -0.1415  1.1378 -0.8186 #>  #> [[98]] #>         x       m       y #> x -0.2475 -0.4155  0.3497 #> m  0.6953 -0.4973  0.1498 #> y -0.3532  0.7291 -0.4281 #>  #> [[99]] #>         x       m       y #> x -0.2293 -0.2961  0.2112 #> m  0.6084 -0.7606  0.1396 #> y -0.7304  0.3160 -0.4800 #>  #> [[100]] #>         x       m       y #> x -0.5496 -0.0348  0.0700 #> m  0.9226 -0.5533 -0.0088 #> y -0.5031  0.8429 -0.5873 #>"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmed.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class ctmedmed — print.ctmedmed","title":"Print Method for Object of Class ctmedmed — print.ctmedmed","text":"Print Method Object Class ctmedmed","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class ctmedmed — print.ctmedmed","text":"","code":"# S3 method for class 'ctmedmed' print(x, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class ctmedmed — print.ctmedmed","text":"x object class ctmedmed. digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class ctmedmed — print.ctmedmed","text":"Prints matrix effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class ctmedmed — print.ctmedmed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedmed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class ctmedmed — print.ctmedmed","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\")  # Specific time interval ---------------------------------------------------- med <- Med(   phi = phi,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) print(med) #>  #> Total, Direct, and Indirect Effects #>  #>      interval total  direct indirect #> [1,]        1  -0.1 -0.2675   0.1674  # Range of time intervals --------------------------------------------------- med <- Med(   phi = phi,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) print(med) #>  #> Total, Direct, and Indirect Effects #>  #>      interval   total  direct indirect #> [1,]        1 -0.1000 -0.2675   0.1674 #> [2,]        2  0.0799 -0.3209   0.4008 #> [3,]        3  0.2508 -0.2914   0.5423 #> [4,]        4  0.3449 -0.2374   0.5823 #> [5,]        5  0.3693 -0.1828   0.5521"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedtraj.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Object of Class ctmedtraj — print.ctmedtraj","title":"Print Method for Object of Class ctmedtraj — print.ctmedtraj","text":"Print Method Object Class ctmedtraj","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedtraj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Object of Class ctmedtraj — print.ctmedtraj","text":"","code":"# S3 method for class 'ctmedtraj' print(x, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedtraj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Object of Class ctmedtraj — print.ctmedtraj","text":"x object class ctmedtraj. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedtraj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Object of Class ctmedtraj — print.ctmedtraj","text":"Prints data frame simulated data.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedtraj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for Object of Class ctmedtraj — print.ctmedtraj","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/print.ctmedtraj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Object of Class ctmedtraj — print.ctmedtraj","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\")  traj <- Trajectory(   mu0 = c(3, 3, -3),   time = 150,   phi = phi,   med = \"m\" )  print(traj) #>     time         y1          y2          y3   effect #> 1    0.0 3.00000000 3.000000000 -3.00000000    total #> 2    0.1 2.89478919 3.072029427 -2.71331237    total #> 3    0.2 2.79326815 3.132703300 -2.43666332    total #> 4    0.3 2.69530747 3.182859714 -2.17030792    total #> 5    0.4 2.60078231 3.223285457 -1.91442143    total #> 6    0.5 2.50957217 3.254718908 -1.66910840    total #> 7    0.6 2.42156079 3.277852764 -1.43441085    total #> 8    0.7 2.33663600 3.293336633 -1.21031580    total #> 9    0.8 2.25468954 3.301779481 -0.99676204    total #> 10   0.9 2.17561697 3.303751945 -0.79364635    total #> 11   1.0 2.09931749 3.299788524 -0.60082904    total #> 12   1.1 2.02569386 3.290389648 -0.41813908    total #> 13   1.2 1.95465223 3.276023639 -0.24537862    total #> 14   1.3 1.88610204 3.257128562 -0.08232717    total #> 15   1.4 1.81995593 3.234113971  0.07125470    total #> 16   1.5 1.75612959 3.207362570  0.21562200    total #> 17   1.6 1.69454165 3.177231772  0.35104230    total #> 18   1.7 1.63511361 3.144055179  0.47779306    total #> 19   1.8 1.57776973 3.108143980  0.59615920    total #> 20   1.9 1.52243692 3.069788267  0.70643095    total #> 21   2.0 1.46904465 3.029258286  0.80890195    total #> 22   2.1 1.41752485 2.986805615  0.90386756    total #> 23   2.2 1.36781187 2.942664272  0.99162335    total #> 24   2.3 1.31984234 2.897051771  1.07246380    total #> 25   2.4 1.27355511 2.850170113  1.14668113    total #> 26   2.5 1.22889119 2.802206719  1.21456433    total #> 27   2.6 1.18579364 2.753335320  1.27639824    total #> 28   2.7 1.14420754 2.703716790  1.33246284    total #> 29   2.8 1.10407987 2.653499931  1.38303264    total #> 30   2.9 1.06535949 2.602822222  1.42837605    total #> 31   3.0 1.02799704 2.551810514  1.46875504    total #> 32   3.1 0.99194491 2.500581698  1.50442470    total #> 33   3.2 0.95715713 2.449243323  1.53563298    total #> 34   3.3 0.92358937 2.397894191  1.56262044    total #> 35   3.4 0.89119884 2.346624907  1.58562011    total #> 36   3.5 0.85994426 2.295518402  1.60485734    total #> 37   3.6 0.82978578 2.244650432  1.62054973    total #> 38   3.7 0.80068497 2.194090033  1.63290711    total #> 39   3.8 0.77260473 2.143899968  1.64213154    total #> 40   3.9 0.74550927 2.094137133  1.64841736    total #> 41   4.0 0.71936406 2.044852947  1.65195120    total #> 42   4.1 0.69413576 1.996093719  1.65291215    total #> 43   4.2 0.66979224 1.947900989  1.65147179    total #> 44   4.3 0.64630244 1.900311857  1.64779436    total #> 45   4.4 0.62363644 1.853359280  1.64203690    total #> 46   4.5 0.60176534 1.807072365  1.63434938    total #> 47   4.6 0.58066127 1.761476636  1.62487491    total #> 48   4.7 0.56029732 1.716594287  1.61374986    total #> 49   4.8 0.54064754 1.672444421  1.60110408    total #> 50   4.9 0.52168688 1.629043273  1.58706108    total #> 51   5.0 0.50339118 1.586404419  1.57173822    total #> 52   5.1 0.48573712 1.544538976  1.55524688    total #> 53   5.2 0.46870219 1.503455785  1.53769271    total #> 54   5.3 0.45226467 1.463161585  1.51917578    total #> 55   5.4 0.43640363 1.423661176  1.49979078    total #> 56   5.5 0.42109883 1.384957574  1.47962725    total #> 57   5.6 0.40633078 1.347052150  1.45876974    total #> 58   5.7 0.39208065 1.309944767  1.43729801    total #> 59   5.8 0.37833028 1.273633906  1.41528723    total #> 60   5.9 0.36506213 1.238116783  1.39280817    total #> 61   6.0 0.35225931 1.203389457  1.36992734    total #> 62   6.1 0.33990548 1.169446936  1.34670725    total #> 63   6.2 0.32798490 1.136283271  1.32320650    total #> 64   6.3 0.31648238 1.103891649  1.29947999    total #> 65   6.4 0.30538326 1.072264473  1.27557911    total #> 66   6.5 0.29467338 1.041393442  1.25155185    total #> 67   6.6 0.28433911 1.011269624  1.22744299    total #> 68   6.7 0.27436726 0.981883524  1.20329425    total #> 69   6.8 0.26474512 0.953225150  1.17914443    total #> 70   6.9 0.25546044 0.925284066  1.15502956    total #> 71   7.0 0.24650137 0.898049453  1.13098302    total #> 72   7.1 0.23785650 0.871510155  1.10703569    total #> 73   7.2 0.22951481 0.845654730  1.08321608    total #> 74   7.3 0.22146567 0.820471494  1.05955045    total #> 75   7.4 0.21369880 0.795948557  1.03606292    total #> 76   7.5 0.20620433 0.772073865  1.01277558    total #> 77   7.6 0.19897269 0.748835235  0.98970863    total #> 78   7.7 0.19199466 0.726220385  0.96688044    total #> 79   7.8 0.18526136 0.704216963  0.94430770    total #> 80   7.9 0.17876419 0.682812578  0.92200547    total #> 81   8.0 0.17249488 0.661994820  0.89998731    total #> 82   8.1 0.16644544 0.641751287  0.87826534    total #> 83   8.2 0.16060815 0.622069607  0.85685036    total #> 84   8.3 0.15497558 0.602937451  0.83575187    total #> 85   8.4 0.14954055 0.584342559  0.81497822    total #> 86   8.5 0.14429612 0.566272749  0.79453662    total #> 87   8.6 0.13923561 0.548715934  0.77443325    total #> 88   8.7 0.13435258 0.531660139  0.75467332    total #> 89   8.8 0.12964080 0.515093506  0.73526113    total #> 90   8.9 0.12509426 0.499004309  0.71620010    total #> 91   9.0 0.12070717 0.483380963  0.69749289    total #> 92   9.1 0.11647394 0.468212034  0.67914140    total #> 93   9.2 0.11238917 0.453486243  0.66114685    total #> 94   9.3 0.10844765 0.439192473  0.64350981    total #> 95   9.4 0.10464436 0.425319780  0.62623026    total #> 96   9.5 0.10097446 0.411857391  0.60930765    total #> 97   9.6 0.09743325 0.398794714  0.59274089    total #> 98   9.7 0.09401624 0.386121340  0.57652845    total #> 99   9.8 0.09071907 0.373827041  0.56066835    total #> 100  9.9 0.08753753 0.361901782  0.54515823    total #> 101 10.0 0.08446756 0.350335715  0.52999536    total #> 102 10.1 0.08150526 0.339119183  0.51517667    total #> 103 10.2 0.07864685 0.328242723  0.50069881    total #> 104 10.3 0.07588868 0.317697063  0.48655813    total #> 105 10.4 0.07322725 0.307473124  0.47275077    total #> 106 10.5 0.07065915 0.297562021  0.45927260    total #> 107 10.6 0.06818111 0.287955060  0.44611934    total #> 108 10.7 0.06578998 0.278643739  0.43328649    total #> 109 10.8 0.06348271 0.269619746  0.42076942    total #> 110 10.9 0.06125635 0.260874958  0.40856335    total #> 111 11.0 0.05910808 0.252401441  0.39666339    total #> 112 11.1 0.05703514 0.244191444  0.38506453    total #> 113 11.2 0.05503490 0.236237402  0.37376168    total #> 114 11.3 0.05310481 0.228531932  0.36274970    total #> 115 11.4 0.05124241 0.221067829  0.35202335    total #> 116 11.5 0.04944533 0.213838067  0.34157737    total #> 117 11.6 0.04771127 0.206835793  0.33140646    total #> 118 11.7 0.04603802 0.200054328  0.32150530    total #> 119 11.8 0.04442345 0.193487162  0.31186855    total #> 120 11.9 0.04286551 0.187127950  0.30249086    total #> 121 12.0 0.04136221 0.180970514  0.29336690    total #> 122 12.1 0.03991162 0.175008836  0.28449134    total #> 123 12.2 0.03851191 0.169237056  0.27585888    total #> 124 12.3 0.03716129 0.163649470  0.26746423    total #> 125 12.4 0.03585803 0.158240525  0.25930217    total #> 126 12.5 0.03460048 0.153004820  0.25136747    total #> 127 12.6 0.03338703 0.147937099  0.24365498    total #> 128 12.7 0.03221614 0.143032249  0.23615959    total #> 129 12.8 0.03108631 0.138285298  0.22887624    total #> 130 12.9 0.02999611 0.133691412  0.22179992    total #> 131 13.0 0.02894413 0.129245891  0.21492569    total #> 132 13.1 0.02792906 0.124944166  0.20824868    total #> 133 13.2 0.02694958 0.120781798  0.20176407    total #> 134 13.3 0.02600445 0.116754473  0.19546713    total #> 135 13.4 0.02509246 0.112858000  0.18935319    total #> 136 13.5 0.02421246 0.109088306  0.18341764    total #> 137 13.6 0.02336333 0.105441438  0.17765596    total #> 138 13.7 0.02254397 0.101913555  0.17206371    total #> 139 13.8 0.02175335 0.098500928  0.16663653    total #> 140 13.9 0.02099045 0.095199937  0.16137011    total #> 141 14.0 0.02025431 0.092007068  0.15626025    total #> 142 14.1 0.01954399 0.088918909  0.15130282    total #> 143 14.2 0.01885857 0.085932151  0.14649376    total #> 144 14.3 0.01819720 0.083043581  0.14182911    total #> 145 14.4 0.01755902 0.080250081  0.13730497    total #> 146 14.5 0.01694322 0.077548630  0.13291753    total #> 147 14.6 0.01634901 0.074936293  0.12866307    total #> 148 14.7 0.01577565 0.072410225  0.12453793    total #> 149 14.8 0.01522239 0.069967667  0.12053854    total #> 150 14.9 0.01468854 0.067605944  0.11666141    total #> 151  0.0 3.00000000 3.000000000 -3.00000000   direct #> 152  0.1 2.89478919 2.850550942 -2.92724153   direct #> 153  0.2 2.79326815 2.708546891 -2.85486193   direct #> 154  0.3 2.69530747 2.573616965 -2.78299339   direct #> 155  0.4 2.60078231 2.445408754 -2.71175371   direct #> 156  0.5 2.50957217 2.323587410 -2.64124750   direct #> 157  0.6 2.42156079 2.207834760 -2.57156720   direct #> 158  0.7 2.33663600 2.097848485 -2.50279409   direct #> 159  0.8 2.25468954 1.993341325 -2.43499924   direct #> 160  0.9 2.17561697 1.894040331 -2.36824433   direct #> 161  1.0 2.09931749 1.799686150 -2.30258245   direct #> 162  1.1 2.02569386 1.710032350 -2.23805882   direct #> 163  1.2 1.95465223 1.624844776 -2.17471149   direct #> 164  1.3 1.88610204 1.543900936 -2.11257197   direct #> 165  1.4 1.81995593 1.466989422 -2.05166577   direct #> 166  1.5 1.75612959 1.393909360 -1.99201297   direct #> 167  1.6 1.69454165 1.324469880 -1.93362870   direct #> 168  1.7 1.63511361 1.258489621 -1.87652362   direct #> 169  1.8 1.57776973 1.195796259 -1.82070431   direct #> 170  1.9 1.52243692 1.136226051 -1.76617367   direct #> 171  2.0 1.46904465 1.079623413 -1.71293131   direct #> 172  2.1 1.41752485 1.025840512 -1.66097382   direct #> 173  2.2 1.36781187 0.974736880 -1.61029513   direct #> 174  2.3 1.31984234 0.926179044 -1.56088678   direct #> 175  2.4 1.27355511 0.880040182 -1.51273817   direct #> 176  2.5 1.22889119 0.836199790 -1.46583677   direct #> 177  2.6 1.18579364 0.794543366 -1.42016841   direct #> 178  2.7 1.14420754 0.754962114 -1.37571741   direct #> 179  2.8 1.10407987 0.717352655 -1.33246680   direct #> 180  2.9 1.06535949 0.681616762 -1.29039849   direct #> 181  3.0 1.02799704 0.647661101 -1.24949342   direct #> 182  3.1 0.99194491 0.615396987 -1.20973168   direct #> 183  3.2 0.95715713 0.584740154 -1.17109268   direct #> 184  3.3 0.92358937 0.555610532 -1.13355523   direct #> 185  3.4 0.89119884 0.527932042 -1.09709768   direct #> 186  3.5 0.85994426 0.501632394 -1.06169799   direct #> 187  3.6 0.82978578 0.476642897 -1.02733384   direct #> 188  3.7 0.80068497 0.452898287 -0.99398270   direct #> 189  3.8 0.77260473 0.430336546 -0.96162191   direct #> 190  3.9 0.74550927 0.408898749 -0.93022875   direct #> 191  4.0 0.71936406 0.388528905 -0.89978047   direct #> 192  4.1 0.69413576 0.369173812 -0.87025439   direct #> 193  4.2 0.66979224 0.350782919 -0.84162792   direct #> 194  4.3 0.64630244 0.333308193 -0.81387861   direct #> 195  4.4 0.62363644 0.316703995 -0.78698417   direct #> 196  4.5 0.60176534 0.300926957 -0.76092256   direct #> 197  4.6 0.58066127 0.285935874 -0.73567196   direct #> 198  4.7 0.56029732 0.271691591 -0.71121081   direct #> 199  4.8 0.54064754 0.258156907 -0.68751787   direct #> 200  4.9 0.52168688 0.245296472 -0.66457219   direct #> 201  5.0 0.50339118 0.233076696 -0.64235317   direct #> 202  5.1 0.48573712 0.221465665 -0.62084055   direct #> 203  5.2 0.46870219 0.210433054 -0.60001444   direct #> 204  5.3 0.45226467 0.199950046 -0.57985530   direct #> 205  5.4 0.43640363 0.189989264 -0.56034400   direct #> 206  5.5 0.42109883 0.180524692 -0.54146176   direct #> 207  5.6 0.40633078 0.171531611 -0.52319023   direct #> 208  5.7 0.39208065 0.162986531 -0.50551144   direct #> 209  5.8 0.37833028 0.154867137 -0.48840782   direct #> 210  5.9 0.36506213 0.147152221 -0.47186219   direct #> 211  6.0 0.35225931 0.139821634 -0.45585779   direct #> 212  6.1 0.33990548 0.132856230 -0.44037825   direct #> 213  6.2 0.32798490 0.126237817 -0.42540760   direct #> 214  6.3 0.31648238 0.119949110 -0.41093027   direct #> 215  6.4 0.30538326 0.113973683 -0.39693108   direct #> 216  6.5 0.29467338 0.108295929 -0.38339525   direct #> 217  6.6 0.28433911 0.102901021 -0.37030837   direct #> 218  6.7 0.27436726 0.097774868 -0.35765642   direct #> 219  6.8 0.26474512 0.092904080 -0.34542576   direct #> 220  6.9 0.25546044 0.088275938 -0.33360311   direct #> 221  7.0 0.24650137 0.083878353 -0.32217556   direct #> 222  7.1 0.23785650 0.079699839 -0.31113057   direct #> 223  7.2 0.22951481 0.075729484 -0.30045594   direct #> 224  7.3 0.22146567 0.071956917 -0.29013982   direct #> 225  7.4 0.21369880 0.068372286 -0.28017069   direct #> 226  7.5 0.20620433 0.064966228 -0.27053738   direct #> 227  7.6 0.19897269 0.061729848 -0.26122904   direct #> 228  7.7 0.19199466 0.058654692 -0.25223512   direct #> 229  7.8 0.18526136 0.055732729 -0.24354541   direct #> 230  7.9 0.17876419 0.052956328 -0.23514999   direct #> 231  8.0 0.17249488 0.050318237 -0.22703924   direct #> 232  8.1 0.16644544 0.047811566 -0.21920383   direct #> 233  8.2 0.16060815 0.045429768 -0.21163471   direct #> 234  8.3 0.15497558 0.043166622 -0.20432312   direct #> 235  8.4 0.14954055 0.041016219 -0.19726054   direct #> 236  8.5 0.14429612 0.038972940 -0.19043875   direct #> 237  8.6 0.13923561 0.037031451 -0.18384976   direct #> 238  8.7 0.13435258 0.035186679 -0.17748584   direct #> 239  8.8 0.12964080 0.033433807 -0.17133950   direct #> 240  8.9 0.12509426 0.031768256 -0.16540348   direct #> 241  9.0 0.12070717 0.030185678 -0.15967076   direct #> 242  9.1 0.11647394 0.028681937 -0.15413453   direct #> 243  9.2 0.11238917 0.027253108 -0.14878821   direct #> 244  9.3 0.10844765 0.025895458 -0.14362542   direct #> 245  9.4 0.10464436 0.024605440 -0.13863999   direct #> 246  9.5 0.10097446 0.023379687 -0.13382595   direct #> 247  9.6 0.09743325 0.022214996 -0.12917752   direct #> 248  9.7 0.09401624 0.021108326 -0.12468910   direct #> 249  9.8 0.09071907 0.020056786 -0.12035530   direct #> 250  9.9 0.08753753 0.019057630 -0.11617086   direct #> 251 10.0 0.08446756 0.018108249 -0.11213073   direct #> 252 10.1 0.08150526 0.017206162 -0.10823002   direct #> 253 10.2 0.07864685 0.016349014 -0.10446397   direct #> 254 10.3 0.07588868 0.015534565 -0.10082802   direct #> 255 10.4 0.07322725 0.014760690 -0.09731774   direct #> 256 10.5 0.07065915 0.014025366 -0.09392883   direct #> 257 10.6 0.06818111 0.013326674 -0.09065717   direct #> 258 10.7 0.06578998 0.012662787 -0.08749874   direct #> 259 10.8 0.06348271 0.012031974 -0.08444967   direct #> 260 10.9 0.06125635 0.011432584 -0.08150623   direct #> 261 11.0 0.05910808 0.010863055 -0.07866480   direct #> 262 11.1 0.05703514 0.010321897 -0.07592187   direct #> 263 11.2 0.05503490 0.009807698 -0.07327408   direct #> 264 11.3 0.05310481 0.009319114 -0.07071816   direct #> 265 11.4 0.05124241 0.008854870 -0.06825094   direct #> 266 11.5 0.04944533 0.008413752 -0.06586939   direct #> 267 11.6 0.04771127 0.007994610 -0.06357056   direct #> 268 11.7 0.04603802 0.007596348 -0.06135159   direct #> 269 11.8 0.04442345 0.007217925 -0.05920975   direct #> 270 11.9 0.04286551 0.006858355 -0.05714236   direct #> 271 12.0 0.04136221 0.006516696 -0.05514687   direct #> 272 12.1 0.03991162 0.006192058 -0.05322079   direct #> 273 12.2 0.03851191 0.005883593 -0.05136173   direct #> 274 12.3 0.03716129 0.005590494 -0.04956737   direct #> 275 12.4 0.03585803 0.005311996 -0.04783548   direct #> 276 12.5 0.03460048 0.005047371 -0.04616389   direct #> 277 12.6 0.03338703 0.004795930 -0.04455052   direct #> 278 12.7 0.03221614 0.004557014 -0.04299336   direct #> 279 12.8 0.03108631 0.004330000 -0.04149046   direct #> 280 12.9 0.02999611 0.004114295 -0.04003993   direct #> 281 13.0 0.02894413 0.003909336 -0.03863998   direct #> 282 13.1 0.02792906 0.003714587 -0.03728883   direct #> 283 13.2 0.02694958 0.003529540 -0.03598481   direct #> 284 13.3 0.02600445 0.003353711 -0.03472626   direct #> 285 13.4 0.02509246 0.003186642 -0.03351163   direct #> 286 13.5 0.02421246 0.003027895 -0.03233938   direct #> 287 13.6 0.02336333 0.002877056 -0.03120803   direct #> 288 13.7 0.02254397 0.002733732 -0.03011618   direct #> 289 13.8 0.02175335 0.002597547 -0.02906244   direct #> 290 13.9 0.02099045 0.002468147 -0.02804549   direct #> 291 14.0 0.02025431 0.002345193 -0.02706405   direct #> 292 14.1 0.01954399 0.002228364 -0.02611689   direct #> 293 14.2 0.01885857 0.002117355 -0.02520282   direct #> 294 14.3 0.01819720 0.002011876 -0.02432068   direct #> 295 14.4 0.01755902 0.001911652 -0.02346936   direct #> 296 14.5 0.01694322 0.001816420 -0.02264779   direct #> 297 14.6 0.01634901 0.001725933 -0.02185492   direct #> 298 14.7 0.01577565 0.001639953 -0.02108978   direct #> 299 14.8 0.01522239 0.001558256 -0.02035137   direct #> 300 14.9 0.01468854 0.001480630 -0.01963879   direct #> 301  0.0 3.00000000 3.000000000 -3.00000000 indirect #> 302  0.1 2.89478919 3.072029427 -2.58521101 indirect #> 303  0.2 2.79326815 3.132703300 -2.19352996 indirect #> 304  0.3 2.69530747 3.182859714 -1.82417931 indirect #> 305  0.4 2.60078231 3.223285457 -1.47637642 indirect #> 306  0.5 2.50957217 3.254718908 -1.14933736 indirect #> 307  0.6 2.42156079 3.277852764 -0.84228031 indirect #> 308  0.7 2.33663600 3.293336633 -0.55442860 indirect #> 309  0.8 2.25468954 3.301779481 -0.28501322 indirect #> 310  0.9 2.17561697 3.303751945 -0.03327518 indirect #> 311  1.0 2.09931749 3.299788524  0.20153262 indirect #> 312  1.1 2.02569386 3.290389648  0.42014365 indirect #> 313  1.2 1.95465223 3.276023639  0.62327638 indirect #> 314  1.3 1.88610204 3.257128562  0.81163307 indirect #> 315  1.4 1.81995593 3.234113971  0.98589878 indirect #> 316  1.5 1.75612959 3.207362570  1.14674061 indirect #> 317  1.6 1.69454165 3.177231772  1.29480700 indirect #> 318  1.7 1.63511361 3.144055179  1.43072731 indirect #> 319  1.8 1.57776973 3.108143980  1.55511147 indirect #> 320  1.9 1.52243692 3.069788267  1.66854971 indirect #> 321  2.0 1.46904465 3.029258286  1.77161245 indirect #> 322  2.1 1.41752485 2.986805615  1.86485031 indirect #> 323  2.2 1.36781187 2.942664272  1.94879411 indirect #> 324  2.3 1.31984234 2.897051771  2.02395503 indirect #> 325  2.4 1.27355511 2.850170113  2.09082478 indirect #> 326  2.5 1.22889119 2.802206719  2.14987584 indirect #> 327  2.6 1.18579364 2.753335320  2.20156179 indirect #> 328  2.7 1.14420754 2.703716790  2.24631759 indirect #> 329  2.8 1.10407987 2.653499931  2.28455999 indirect #> 330  2.9 1.06535949 2.602822222  2.31668791 indirect #> 331  3.0 1.02799704 2.551810514  2.34308284 indirect #> 332  3.1 0.99194491 2.500581698  2.36410933 indirect #> 333  3.2 0.95715713 2.449243323  2.38011540 indirect #> 334  3.3 0.92358937 2.397894191  2.39143305 indirect #> 335  3.4 0.89119884 2.346624907  2.39837868 indirect #> 336  3.5 0.85994426 2.295518402  2.40125366 indirect #> 337  3.6 0.82978578 2.244650432  2.40034471 indirect #> 338  3.7 0.80068497 2.194090033  2.39592449 indirect #> 339  3.8 0.77260473 2.143899968  2.38825202 indirect #> 340  3.9 0.74550927 2.094137133  2.37757320 indirect #> 341  4.0 0.71936406 2.044852947  2.36412126 indirect #> 342  4.1 0.69413576 1.996093719  2.34811726 indirect #> 343  4.2 0.66979224 1.947900989  2.32977055 indirect #> 344  4.3 0.64630244 1.900311857  2.30927923 indirect #> 345  4.4 0.62363644 1.853359280  2.28683059 indirect #> 346  4.5 0.60176534 1.807072365  2.26260159 indirect #> 347  4.6 0.58066127 1.761476636  2.23675922 indirect #> 348  4.7 0.56029732 1.716594287  2.20946101 indirect #> 349  4.8 0.54064754 1.672444421  2.18085537 indirect #> 350  4.9 0.52168688 1.629043273  2.15108202 indirect #> 351  5.0 0.50339118 1.586404419  2.12027237 indirect #> 352  5.1 0.48573712 1.544538976  2.08854991 indirect #> 353  5.2 0.46870219 1.503455785  2.05603055 indirect #> 354  5.3 0.45226467 1.463161585  2.02282299 indirect #> 355  5.4 0.43640363 1.423661176  1.98902907 indirect #> 356  5.5 0.42109883 1.384957574  1.95474407 indirect #> 357  5.6 0.40633078 1.347052150  1.92005704 indirect #> 358  5.7 0.39208065 1.309944767  1.88505112 indirect #> 359  5.8 0.37833028 1.273633906  1.84980383 indirect #> 360  5.9 0.36506213 1.238116783  1.81438733 indirect #> 361  6.0 0.35225931 1.203389457  1.77886872 indirect #> 362  6.1 0.33990548 1.169446936  1.74331029 indirect #> 363  6.2 0.32798490 1.136283271  1.70776978 indirect #> 364  6.3 0.31648238 1.103891649  1.67230061 indirect #> 365  6.4 0.30538326 1.072264473  1.63695211 indirect #> 366  6.5 0.29467338 1.041393442  1.60176974 indirect #> 367  6.6 0.28433911 1.011269624  1.56679534 indirect #> 368  6.7 0.27436726 0.981883524  1.53206726 indirect #> 369  6.8 0.26474512 0.953225150  1.49762061 indirect #> 370  6.9 0.25546044 0.925284066  1.46348745 indirect #> 371  7.0 0.24650137 0.898049453  1.42969692 indirect #> 372  7.1 0.23785650 0.871510155  1.39627544 indirect #> 373  7.2 0.22951481 0.845654730  1.36324687 indirect #> 374  7.3 0.22146567 0.820471494  1.33063264 indirect #> 375  7.4 0.21369880 0.795948557  1.29845195 indirect #> 376  7.5 0.20620433 0.772073865  1.26672185 indirect #> 377  7.6 0.19897269 0.748835235  1.23545737 indirect #> 378  7.7 0.19199466 0.726220385  1.20467173 indirect #> 379  7.8 0.18526136 0.704216963  1.17437634 indirect #> 380  7.9 0.17876419 0.682812578  1.14458100 indirect #> 381  8.0 0.17249488 0.661994820  1.11529400 indirect #> 382  8.1 0.16644544 0.641751287  1.08652215 indirect #> 383  8.2 0.16060815 0.622069607  1.05827099 indirect #> 384  8.3 0.15497558 0.602937451  1.03054477 indirect #> 385  8.4 0.14954055 0.584342559  1.00334662 indirect #> 386  8.5 0.14429612 0.566272749  0.97667859 indirect #> 387  8.6 0.13923561 0.548715934  0.95054173 indirect #> 388  8.7 0.13435258 0.531660139  0.92493619 indirect #> 389  8.8 0.12964080 0.515093506  0.89986125 indirect #> 390  8.9 0.12509426 0.499004309  0.87531543 indirect #> 391  9.0 0.12070717 0.483380963  0.85129651 indirect #> 392  9.1 0.11647394 0.468212034  0.82780161 indirect #> 393  9.2 0.11238917 0.453486243  0.80482726 indirect #> 394  9.3 0.10844765 0.439192473  0.78236942 indirect #> 395  9.4 0.10464436 0.425319780  0.76042353 indirect #> 396  9.5 0.10097446 0.411857391  0.73898460 indirect #> 397  9.6 0.09743325 0.398794714  0.71804720 indirect #> 398  9.7 0.09401624 0.386121340  0.69760553 indirect #> 399  9.8 0.09071907 0.373827041  0.67765346 indirect #> 400  9.9 0.08753753 0.361901782  0.65818455 indirect #> 401 10.0 0.08446756 0.350335715  0.63919209 indirect #> 402 10.1 0.08150526 0.339119183  0.62066912 indirect #> 403 10.2 0.07864685 0.328242723  0.60260851 indirect #> 404 10.3 0.07588868 0.317697063  0.58500290 indirect #> 405 10.4 0.07322725 0.307473124  0.56784482 indirect #> 406 10.5 0.07065915 0.297562021  0.55112663 indirect #> 407 10.6 0.06818111 0.287955060  0.53484062 indirect #> 408 10.7 0.06578998 0.278643739  0.51897895 indirect #> 409 10.8 0.06348271 0.269619746  0.50353375 indirect #> 410 10.9 0.06125635 0.260874958  0.48849708 indirect #> 411 11.0 0.05910808 0.252401441  0.47386096 indirect #> 412 11.1 0.05703514 0.244191444  0.45961742 indirect #> 413 11.2 0.05503490 0.236237402  0.44575844 indirect #> 414 11.3 0.05310481 0.228531932  0.43227605 indirect #> 415 11.4 0.05124241 0.221067829  0.41916228 indirect #> 416 11.5 0.04944533 0.213838067  0.40640921 indirect #> 417 11.6 0.04771127 0.206835793  0.39400894 indirect #> 418 11.7 0.04603802 0.200054328  0.38195363 indirect #> 419 11.8 0.04442345 0.193487162  0.37023550 indirect #> 420 11.9 0.04286551 0.187127950  0.35884686 indirect #> 421 12.0 0.04136221 0.180970514  0.34778005 indirect #> 422 12.1 0.03991162 0.175008836  0.33702754 indirect #> 423 12.2 0.03851191 0.169237056  0.32658185 indirect #> 424 12.3 0.03716129 0.163649470  0.31643562 indirect #> 425 12.4 0.03585803 0.158240525  0.30658156 indirect #> 426 12.5 0.03460048 0.153004820  0.29701251 indirect #> 427 12.6 0.03338703 0.147937099  0.28772139 indirect #> 428 12.7 0.03221614 0.143032249  0.27870125 indirect #> 429 12.8 0.03108631 0.138285298  0.26994523 indirect #> 430 12.9 0.02999611 0.133691412  0.26144661 indirect #> 431 13.0 0.02894413 0.129245891  0.25319875 indirect #> 432 13.1 0.02792906 0.124944166  0.24519516 indirect #> 433 13.2 0.02694958 0.120781798  0.23742946 indirect #> 434 13.3 0.02600445 0.116754473  0.22989536 indirect #> 435 13.4 0.02509246 0.112858000  0.22258673 indirect #> 436 13.5 0.02421246 0.109088306  0.21549755 indirect #> 437 13.6 0.02336333 0.105441438  0.20862190 indirect #> 438 13.7 0.02254397 0.101913555  0.20195401 indirect #> 439 13.8 0.02175335 0.098500928  0.19548820 indirect #> 440 13.9 0.02099045 0.095199937  0.18921895 indirect #> 441 14.0 0.02025431 0.092007068  0.18314082 indirect #> 442 14.1 0.01954399 0.088918909  0.17724851 indirect #> 443 14.2 0.01885857 0.085932151  0.17153684 indirect #> 444 14.3 0.01819720 0.083043581  0.16600074 indirect #> 445 14.4 0.01755902 0.080250081  0.16063526 indirect #> 446 14.5 0.01694322 0.077548630  0.15543557 indirect #> 447 14.6 0.01634901 0.074936293  0.15039693 indirect #> 448 14.7 0.01577565 0.072410225  0.14551475 indirect #> 449 14.8 0.01522239 0.069967667  0.14078452 indirect #> 450 14.9 0.01468854 0.067605944  0.13620185 indirect"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedboot.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class ctmedboot — summary.ctmedboot","title":"Summary Method for an Object of Class ctmedboot — summary.ctmedboot","text":"Summary Method Object Class ctmedboot","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedboot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class ctmedboot — summary.ctmedboot","text":"","code":"# S3 method for class 'ctmedboot' summary(object, alpha = 0.05, type = \"pc\", ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedboot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class ctmedboot — summary.ctmedboot","text":"object Object class ctmedboot. alpha Numeric vector. Significance level \\(\\alpha\\). type Charater string. Confidence interval type, , type = \"pc\" percentile; type = \"bc\" bias corrected. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedboot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class ctmedboot — summary.ctmedboot","text":"Returns data frame effects, time intervals, estimates, standard errors, number bootstrap replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedboot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class ctmedboot — summary.ctmedboot","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedboot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for an Object of Class ctmedboot — summary.ctmedboot","text":"","code":"if (FALSE) { # \\dontrun{ library(bootStateSpace) # prepare parameters ## number of individuals n <- 50 ## time points time <- 100 delta_t <- 0.10 ## dynamic structure p <- 3 mu0 <- rep(x = 0, times = p) sigma0 <- matrix(   data = c(     1.0,     0.2,     0.2,     0.2,     1.0,     0.2,     0.2,     0.2,     1.0   ),   nrow = p ) sigma0_l <- t(chol(sigma0)) mu <- rep(x = 0, times = p) phi <- matrix(   data = c(     -0.357,     0.771,     -0.450,     0.0,     -0.511,     0.729,     0,     0,     -0.693   ),   nrow = p ) sigma <- matrix(   data = c(     0.24455556,     0.02201587,     -0.05004762,     0.02201587,     0.07067800,     0.01539456,     -0.05004762,     0.01539456,     0.07553061   ),   nrow = p ) sigma_l <- t(chol(sigma)) ## measurement model k <- 3 nu <- rep(x = 0, times = k) lambda <- diag(k) theta <- 0.2 * diag(k) theta_l <- t(chol(theta))  boot <- PBSSMOUFixed(   R = 1000L,   path = getwd(),   prefix = \"ou\",   n = n,   time = time,   delta_t = delta_t,   mu0 = mu0,   sigma0_l = sigma0_l,   mu = mu,   phi = phi,   sigma_l = sigma_l,   nu = nu,   lambda = lambda,   theta_l = theta_l,   ncores = parallel::detectCores() - 1,   seed = 42 ) phi_hat <- phi colnames(phi_hat) <- rownames(phi_hat) <- c(\"x\", \"m\", \"y\") phi <- extract(object = boot, what = \"phi\")  # Specific time interval ---------------------------------------------------- boot <- BootMed(   phi = phi,   phi_hat = phi_hat,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) summary(boot) summary(boot, type = \"bc\") # bias-corrected  # Range of time intervals --------------------------------------------------- boot <- BootMed(   phi = phi,   phi_hat = phi_hat,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) summary(boot) summary(boot, type = \"bc\") # bias-corrected } # }"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmeddelta.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class ctmeddelta — summary.ctmeddelta","title":"Summary Method for an Object of Class ctmeddelta — summary.ctmeddelta","text":"Summary Method Object Class ctmeddelta","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmeddelta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class ctmeddelta — summary.ctmeddelta","text":"","code":"# S3 method for class 'ctmeddelta' summary(object, alpha = 0.05, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmeddelta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class ctmeddelta — summary.ctmeddelta","text":"object Object class ctmeddelta. alpha Numeric vector. Significance level \\(\\alpha\\). ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmeddelta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class ctmeddelta — summary.ctmeddelta","text":"Returns data frame effects, time intervals, estimates, standard errors, test statistics, p-values, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmeddelta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class ctmeddelta — summary.ctmeddelta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmeddelta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for an Object of Class ctmeddelta — summary.ctmeddelta","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- delta <- DeltaMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) summary(delta) #>     effect interval        est         se         z            p       2.5% #> 1    total        1 -0.1000384 0.03059043 -3.270250 1.074523e-03 -0.1599945 #> 2   direct        1 -0.2674539 0.03939266 -6.789434 1.125739e-11 -0.3446621 #> 3 indirect        1  0.1674155 0.01752594  9.552442 1.266749e-21  0.1330653 #>         97.5% #> 1 -0.04008223 #> 2 -0.19024569 #> 3  0.20176572  # Range of time intervals --------------------------------------------------- delta <- DeltaMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) summary(delta) #>      effect interval        est         se         z            p        2.5% #> 1     total        1 -0.1000384 0.03059043 -3.270250 1.074523e-03 -0.15999452 #> 2    direct        1 -0.2674539 0.03939266 -6.789434 1.125739e-11 -0.34466208 #> 3  indirect        1  0.1674155 0.01752594  9.552442 1.266749e-21  0.13306530 #> 4     total        2  0.0799008 0.03423772  2.333707 1.961107e-02  0.01279611 #> 5    direct        2 -0.3209035 0.05520582 -5.812857 6.141562e-09 -0.42910491 #> 6  indirect        2  0.4008043 0.04605220  8.703260 3.224842e-18  0.31054364 #> 7     total        3  0.2508138 0.03527306  7.110634 1.155108e-12  0.18167990 #> 8    direct        3 -0.2914426 0.06083486 -4.790717 1.661862e-06 -0.41067673 #> 9  indirect        3  0.5422564 0.07031203  7.712143 1.237223e-14  0.40444738 #> 10    total        4  0.3449279 0.03941513  8.751155 2.111808e-18  0.26767567 #> 11   direct        4 -0.2373900 0.06035330 -3.933340 8.377377e-05 -0.35568031 #> 12 indirect        4  0.5823179 0.08497410  6.852887 7.237429e-12  0.41577174 #> 13    total        5  0.3692538 0.04414319  8.364909 6.016140e-17  0.28273472 #> 14   direct        5 -0.1828447 0.05607756 -3.260568 1.111891e-03 -0.29275471 #> 15 indirect        5  0.5520985 0.08989286  6.141739 8.162290e-10  0.37591173 #>          97.5% #> 1  -0.04008223 #> 2  -0.19024569 #> 3   0.20176572 #> 4   0.14700550 #> 5  -0.21270209 #> 6   0.49106497 #> 7   0.31994775 #> 8  -0.17220847 #> 9   0.68006547 #> 10  0.42218015 #> 11 -0.11909972 #> 12  0.74886411 #> 13  0.45577286 #> 14 -0.07293472 #> 15  0.72828528"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class ctmedmc — summary.ctmedmc","title":"Summary Method for an Object of Class ctmedmc — summary.ctmedmc","text":"Summary Method Object Class ctmedmc","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class ctmedmc — summary.ctmedmc","text":"","code":"# S3 method for class 'ctmedmc' summary(object, alpha = 0.05, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class ctmedmc — summary.ctmedmc","text":"object Object class ctmedmc. alpha Numeric vector. Significance level \\(\\alpha\\). ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class ctmedmc — summary.ctmedmc","text":"Returns data frame effects, time intervals, estimates, standard errors, number Monte Carlo replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class ctmedmc — summary.ctmedmc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for an Object of Class ctmedmc — summary.ctmedmc","text":"","code":"set.seed(42) phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\") vcov_phi_vec <- matrix(   data = c(     0.00843, 0.00040, -0.00151,     -0.00600, -0.00033, 0.00110,     0.00324, 0.00020, -0.00061,     0.00040, 0.00374, 0.00016,     -0.00022, -0.00273, -0.00016,     0.00009, 0.00150, 0.00012,     -0.00151, 0.00016, 0.00389,     0.00103, -0.00007, -0.00283,     -0.00050, 0.00000, 0.00156,     -0.00600, -0.00022, 0.00103,     0.00644, 0.00031, -0.00119,     -0.00374, -0.00021, 0.00070,     -0.00033, -0.00273, -0.00007,     0.00031, 0.00287, 0.00013,     -0.00014, -0.00170, -0.00012,     0.00110, -0.00016, -0.00283,     -0.00119, 0.00013, 0.00297,     0.00063, -0.00004, -0.00177,     0.00324, 0.00009, -0.00050,     -0.00374, -0.00014, 0.00063,     0.00495, 0.00024, -0.00093,     0.00020, 0.00150, 0.00000,     -0.00021, -0.00170, -0.00004,     0.00024, 0.00214, 0.00012,     -0.00061, 0.00012, 0.00156,     0.00070, -0.00012, -0.00177,     -0.00093, 0.00012, 0.00223   ),   nrow = 9 )  # Specific time interval ---------------------------------------------------- mc <- MCMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) summary(mc) #>     effect interval        est         se   R       2.5%       97.5% #> 1    total        1 -0.1000384 0.03485068 100 -0.1727980 -0.03444335 #> 2   direct        1 -0.2674539 0.04544184 100 -0.3530971 -0.18029584 #> 3 indirect        1  0.1674155 0.01890677 100  0.1310468  0.19907046  # Range of time intervals --------------------------------------------------- mc <- MCMed(   phi = phi,   vcov_phi_vec = vcov_phi_vec,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\",   R = 100L # use a large value for R in actual research ) summary(mc) #>      effect interval        est         se   R        2.5%       97.5% #> 1     total        1 -0.1000384 0.02828969 100 -0.15232781 -0.04123191 #> 2    direct        1 -0.2674539 0.03785126 100 -0.34098924 -0.19575030 #> 3  indirect        1  0.1674155 0.01813653 100  0.13034214  0.19730024 #> 4     total        2  0.0799008 0.03177536 100  0.01734713  0.13816481 #> 5    direct        2 -0.3209035 0.05331547 100 -0.43347383 -0.22496835 #> 6  indirect        2  0.4008043 0.04715986 100  0.32090375  0.48438931 #> 7     total        3  0.2508138 0.03411898 100  0.17891544  0.31595326 #> 8    direct        3 -0.2914426 0.06004235 100 -0.42496332 -0.19529856 #> 9  indirect        3  0.5422564 0.07226284 100  0.43134204  0.68245524 #> 10    total        4  0.3449279 0.03955381 100  0.27762014  0.42528849 #> 11   direct        4 -0.2373900 0.06142283 100 -0.37132486 -0.14987686 #> 12 indirect        4  0.5823179 0.08884600 100  0.45427525  0.74867661 #> 13    total        5  0.3692538 0.04543535 100  0.30966378  0.47707320 #> 14   direct        5 -0.1828447 0.05923691 100 -0.31560524 -0.11390776 #> 15 indirect        5  0.5520985 0.09636387 100  0.42321469  0.75325267"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmed.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class ctmedmed — summary.ctmedmed","title":"Summary Method for an Object of Class ctmedmed — summary.ctmedmed","text":"Summary Method Object Class ctmedmed","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class ctmedmed — summary.ctmedmed","text":"","code":"# S3 method for class 'ctmedmed' summary(object, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class ctmedmed — summary.ctmedmed","text":"object object class ctmedmed. digits Integer indicating number decimal places display. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class ctmedmed — summary.ctmedmed","text":"Returns matrix effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class ctmedmed — summary.ctmedmed","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedmed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for an Object of Class ctmedmed — summary.ctmedmed","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\")  # Specific time interval ---------------------------------------------------- med <- Med(   phi = phi,   delta_t = 1,   from = \"x\",   to = \"y\",   med = \"m\" ) summary(med) #>      interval total  direct indirect #> [1,]        1  -0.1 -0.2675   0.1674  # Range of time intervals --------------------------------------------------- med <- Med(   phi = phi,   delta_t = 1:5,   from = \"x\",   to = \"y\",   med = \"m\" ) summary(med) #>      interval   total  direct indirect #> [1,]        1 -0.1000 -0.2675   0.1674 #> [2,]        2  0.0799 -0.3209   0.4008 #> [3,]        3  0.2508 -0.2914   0.5423 #> [4,]        4  0.3449 -0.2374   0.5823 #> [5,]        5  0.3693 -0.1828   0.5521"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedposteriorphi.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for Object of Class ctmedposteriorphi — summary.ctmedposteriorphi","title":"Summary Method for Object of Class ctmedposteriorphi — summary.ctmedposteriorphi","text":"Summary Method Object Class ctmedposteriorphi","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedposteriorphi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for Object of Class ctmedposteriorphi — summary.ctmedposteriorphi","text":"","code":"# S3 method for class 'ctmedposteriorphi' summary(object, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedposteriorphi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for Object of Class ctmedposteriorphi — summary.ctmedposteriorphi","text":"object object class ctmedposteriorphi. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedposteriorphi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for Object of Class ctmedposteriorphi — summary.ctmedposteriorphi","text":"Returns list posterior means (matrix form) covariance matrix.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedposteriorphi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for Object of Class ctmedposteriorphi — summary.ctmedposteriorphi","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedtraj.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class ctmedtraj — summary.ctmedtraj","title":"Summary Method for an Object of Class ctmedtraj — summary.ctmedtraj","text":"Summary Method Object Class ctmedtraj","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedtraj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class ctmedtraj — summary.ctmedtraj","text":"","code":"# S3 method for class 'ctmedtraj' summary(object, ...)"},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedtraj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class ctmedtraj — summary.ctmedtraj","text":"object object class ctmedtraj. ... arguments.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedtraj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class ctmedtraj — summary.ctmedtraj","text":"Returns data frame simulated data.","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedtraj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class ctmedtraj — summary.ctmedtraj","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/cTMed/reference/summary.ctmedtraj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for an Object of Class ctmedtraj — summary.ctmedtraj","text":"","code":"phi <- matrix(   data = c(     -0.357, 0.771, -0.450,     0.0, -0.511, 0.729,     0, 0, -0.693   ),   nrow = 3 ) colnames(phi) <- rownames(phi) <- c(\"x\", \"m\", \"y\")  traj <- Trajectory(   mu0 = c(3, 3, -3),   time = 150,   phi = phi,   med = \"m\" )  summary(traj) #>     time         y1          y2          y3   effect #> 1    0.0 3.00000000 3.000000000 -3.00000000    total #> 2    0.1 2.89478919 3.072029427 -2.71331237    total #> 3    0.2 2.79326815 3.132703300 -2.43666332    total #> 4    0.3 2.69530747 3.182859714 -2.17030792    total #> 5    0.4 2.60078231 3.223285457 -1.91442143    total #> 6    0.5 2.50957217 3.254718908 -1.66910840    total #> 7    0.6 2.42156079 3.277852764 -1.43441085    total #> 8    0.7 2.33663600 3.293336633 -1.21031580    total #> 9    0.8 2.25468954 3.301779481 -0.99676204    total #> 10   0.9 2.17561697 3.303751945 -0.79364635    total #> 11   1.0 2.09931749 3.299788524 -0.60082904    total #> 12   1.1 2.02569386 3.290389648 -0.41813908    total #> 13   1.2 1.95465223 3.276023639 -0.24537862    total #> 14   1.3 1.88610204 3.257128562 -0.08232717    total #> 15   1.4 1.81995593 3.234113971  0.07125470    total #> 16   1.5 1.75612959 3.207362570  0.21562200    total #> 17   1.6 1.69454165 3.177231772  0.35104230    total #> 18   1.7 1.63511361 3.144055179  0.47779306    total #> 19   1.8 1.57776973 3.108143980  0.59615920    total #> 20   1.9 1.52243692 3.069788267  0.70643095    total #> 21   2.0 1.46904465 3.029258286  0.80890195    total #> 22   2.1 1.41752485 2.986805615  0.90386756    total #> 23   2.2 1.36781187 2.942664272  0.99162335    total #> 24   2.3 1.31984234 2.897051771  1.07246380    total #> 25   2.4 1.27355511 2.850170113  1.14668113    total #> 26   2.5 1.22889119 2.802206719  1.21456433    total #> 27   2.6 1.18579364 2.753335320  1.27639824    total #> 28   2.7 1.14420754 2.703716790  1.33246284    total #> 29   2.8 1.10407987 2.653499931  1.38303264    total #> 30   2.9 1.06535949 2.602822222  1.42837605    total #> 31   3.0 1.02799704 2.551810514  1.46875504    total #> 32   3.1 0.99194491 2.500581698  1.50442470    total #> 33   3.2 0.95715713 2.449243323  1.53563298    total #> 34   3.3 0.92358937 2.397894191  1.56262044    total #> 35   3.4 0.89119884 2.346624907  1.58562011    total #> 36   3.5 0.85994426 2.295518402  1.60485734    total #> 37   3.6 0.82978578 2.244650432  1.62054973    total #> 38   3.7 0.80068497 2.194090033  1.63290711    total #> 39   3.8 0.77260473 2.143899968  1.64213154    total #> 40   3.9 0.74550927 2.094137133  1.64841736    total #> 41   4.0 0.71936406 2.044852947  1.65195120    total #> 42   4.1 0.69413576 1.996093719  1.65291215    total #> 43   4.2 0.66979224 1.947900989  1.65147179    total #> 44   4.3 0.64630244 1.900311857  1.64779436    total #> 45   4.4 0.62363644 1.853359280  1.64203690    total #> 46   4.5 0.60176534 1.807072365  1.63434938    total #> 47   4.6 0.58066127 1.761476636  1.62487491    total #> 48   4.7 0.56029732 1.716594287  1.61374986    total #> 49   4.8 0.54064754 1.672444421  1.60110408    total #> 50   4.9 0.52168688 1.629043273  1.58706108    total #> 51   5.0 0.50339118 1.586404419  1.57173822    total #> 52   5.1 0.48573712 1.544538976  1.55524688    total #> 53   5.2 0.46870219 1.503455785  1.53769271    total #> 54   5.3 0.45226467 1.463161585  1.51917578    total #> 55   5.4 0.43640363 1.423661176  1.49979078    total #> 56   5.5 0.42109883 1.384957574  1.47962725    total #> 57   5.6 0.40633078 1.347052150  1.45876974    total #> 58   5.7 0.39208065 1.309944767  1.43729801    total #> 59   5.8 0.37833028 1.273633906  1.41528723    total #> 60   5.9 0.36506213 1.238116783  1.39280817    total #> 61   6.0 0.35225931 1.203389457  1.36992734    total #> 62   6.1 0.33990548 1.169446936  1.34670725    total #> 63   6.2 0.32798490 1.136283271  1.32320650    total #> 64   6.3 0.31648238 1.103891649  1.29947999    total #> 65   6.4 0.30538326 1.072264473  1.27557911    total #> 66   6.5 0.29467338 1.041393442  1.25155185    total #> 67   6.6 0.28433911 1.011269624  1.22744299    total #> 68   6.7 0.27436726 0.981883524  1.20329425    total #> 69   6.8 0.26474512 0.953225150  1.17914443    total #> 70   6.9 0.25546044 0.925284066  1.15502956    total #> 71   7.0 0.24650137 0.898049453  1.13098302    total #> 72   7.1 0.23785650 0.871510155  1.10703569    total #> 73   7.2 0.22951481 0.845654730  1.08321608    total #> 74   7.3 0.22146567 0.820471494  1.05955045    total #> 75   7.4 0.21369880 0.795948557  1.03606292    total #> 76   7.5 0.20620433 0.772073865  1.01277558    total #> 77   7.6 0.19897269 0.748835235  0.98970863    total #> 78   7.7 0.19199466 0.726220385  0.96688044    total #> 79   7.8 0.18526136 0.704216963  0.94430770    total #> 80   7.9 0.17876419 0.682812578  0.92200547    total #> 81   8.0 0.17249488 0.661994820  0.89998731    total #> 82   8.1 0.16644544 0.641751287  0.87826534    total #> 83   8.2 0.16060815 0.622069607  0.85685036    total #> 84   8.3 0.15497558 0.602937451  0.83575187    total #> 85   8.4 0.14954055 0.584342559  0.81497822    total #> 86   8.5 0.14429612 0.566272749  0.79453662    total #> 87   8.6 0.13923561 0.548715934  0.77443325    total #> 88   8.7 0.13435258 0.531660139  0.75467332    total #> 89   8.8 0.12964080 0.515093506  0.73526113    total #> 90   8.9 0.12509426 0.499004309  0.71620010    total #> 91   9.0 0.12070717 0.483380963  0.69749289    total #> 92   9.1 0.11647394 0.468212034  0.67914140    total #> 93   9.2 0.11238917 0.453486243  0.66114685    total #> 94   9.3 0.10844765 0.439192473  0.64350981    total #> 95   9.4 0.10464436 0.425319780  0.62623026    total #> 96   9.5 0.10097446 0.411857391  0.60930765    total #> 97   9.6 0.09743325 0.398794714  0.59274089    total #> 98   9.7 0.09401624 0.386121340  0.57652845    total #> 99   9.8 0.09071907 0.373827041  0.56066835    total #> 100  9.9 0.08753753 0.361901782  0.54515823    total #> 101 10.0 0.08446756 0.350335715  0.52999536    total #> 102 10.1 0.08150526 0.339119183  0.51517667    total #> 103 10.2 0.07864685 0.328242723  0.50069881    total #> 104 10.3 0.07588868 0.317697063  0.48655813    total #> 105 10.4 0.07322725 0.307473124  0.47275077    total #> 106 10.5 0.07065915 0.297562021  0.45927260    total #> 107 10.6 0.06818111 0.287955060  0.44611934    total #> 108 10.7 0.06578998 0.278643739  0.43328649    total #> 109 10.8 0.06348271 0.269619746  0.42076942    total #> 110 10.9 0.06125635 0.260874958  0.40856335    total #> 111 11.0 0.05910808 0.252401441  0.39666339    total #> 112 11.1 0.05703514 0.244191444  0.38506453    total #> 113 11.2 0.05503490 0.236237402  0.37376168    total #> 114 11.3 0.05310481 0.228531932  0.36274970    total #> 115 11.4 0.05124241 0.221067829  0.35202335    total #> 116 11.5 0.04944533 0.213838067  0.34157737    total #> 117 11.6 0.04771127 0.206835793  0.33140646    total #> 118 11.7 0.04603802 0.200054328  0.32150530    total #> 119 11.8 0.04442345 0.193487162  0.31186855    total #> 120 11.9 0.04286551 0.187127950  0.30249086    total #> 121 12.0 0.04136221 0.180970514  0.29336690    total #> 122 12.1 0.03991162 0.175008836  0.28449134    total #> 123 12.2 0.03851191 0.169237056  0.27585888    total #> 124 12.3 0.03716129 0.163649470  0.26746423    total #> 125 12.4 0.03585803 0.158240525  0.25930217    total #> 126 12.5 0.03460048 0.153004820  0.25136747    total #> 127 12.6 0.03338703 0.147937099  0.24365498    total #> 128 12.7 0.03221614 0.143032249  0.23615959    total #> 129 12.8 0.03108631 0.138285298  0.22887624    total #> 130 12.9 0.02999611 0.133691412  0.22179992    total #> 131 13.0 0.02894413 0.129245891  0.21492569    total #> 132 13.1 0.02792906 0.124944166  0.20824868    total #> 133 13.2 0.02694958 0.120781798  0.20176407    total #> 134 13.3 0.02600445 0.116754473  0.19546713    total #> 135 13.4 0.02509246 0.112858000  0.18935319    total #> 136 13.5 0.02421246 0.109088306  0.18341764    total #> 137 13.6 0.02336333 0.105441438  0.17765596    total #> 138 13.7 0.02254397 0.101913555  0.17206371    total #> 139 13.8 0.02175335 0.098500928  0.16663653    total #> 140 13.9 0.02099045 0.095199937  0.16137011    total #> 141 14.0 0.02025431 0.092007068  0.15626025    total #> 142 14.1 0.01954399 0.088918909  0.15130282    total #> 143 14.2 0.01885857 0.085932151  0.14649376    total #> 144 14.3 0.01819720 0.083043581  0.14182911    total #> 145 14.4 0.01755902 0.080250081  0.13730497    total #> 146 14.5 0.01694322 0.077548630  0.13291753    total #> 147 14.6 0.01634901 0.074936293  0.12866307    total #> 148 14.7 0.01577565 0.072410225  0.12453793    total #> 149 14.8 0.01522239 0.069967667  0.12053854    total #> 150 14.9 0.01468854 0.067605944  0.11666141    total #> 151  0.0 3.00000000 3.000000000 -3.00000000   direct #> 152  0.1 2.89478919 2.850550942 -2.92724153   direct #> 153  0.2 2.79326815 2.708546891 -2.85486193   direct #> 154  0.3 2.69530747 2.573616965 -2.78299339   direct #> 155  0.4 2.60078231 2.445408754 -2.71175371   direct #> 156  0.5 2.50957217 2.323587410 -2.64124750   direct #> 157  0.6 2.42156079 2.207834760 -2.57156720   direct #> 158  0.7 2.33663600 2.097848485 -2.50279409   direct #> 159  0.8 2.25468954 1.993341325 -2.43499924   direct #> 160  0.9 2.17561697 1.894040331 -2.36824433   direct #> 161  1.0 2.09931749 1.799686150 -2.30258245   direct #> 162  1.1 2.02569386 1.710032350 -2.23805882   direct #> 163  1.2 1.95465223 1.624844776 -2.17471149   direct #> 164  1.3 1.88610204 1.543900936 -2.11257197   direct #> 165  1.4 1.81995593 1.466989422 -2.05166577   direct #> 166  1.5 1.75612959 1.393909360 -1.99201297   direct #> 167  1.6 1.69454165 1.324469880 -1.93362870   direct #> 168  1.7 1.63511361 1.258489621 -1.87652362   direct #> 169  1.8 1.57776973 1.195796259 -1.82070431   direct #> 170  1.9 1.52243692 1.136226051 -1.76617367   direct #> 171  2.0 1.46904465 1.079623413 -1.71293131   direct #> 172  2.1 1.41752485 1.025840512 -1.66097382   direct #> 173  2.2 1.36781187 0.974736880 -1.61029513   direct #> 174  2.3 1.31984234 0.926179044 -1.56088678   direct #> 175  2.4 1.27355511 0.880040182 -1.51273817   direct #> 176  2.5 1.22889119 0.836199790 -1.46583677   direct #> 177  2.6 1.18579364 0.794543366 -1.42016841   direct #> 178  2.7 1.14420754 0.754962114 -1.37571741   direct #> 179  2.8 1.10407987 0.717352655 -1.33246680   direct #> 180  2.9 1.06535949 0.681616762 -1.29039849   direct #> 181  3.0 1.02799704 0.647661101 -1.24949342   direct #> 182  3.1 0.99194491 0.615396987 -1.20973168   direct #> 183  3.2 0.95715713 0.584740154 -1.17109268   direct #> 184  3.3 0.92358937 0.555610532 -1.13355523   direct #> 185  3.4 0.89119884 0.527932042 -1.09709768   direct #> 186  3.5 0.85994426 0.501632394 -1.06169799   direct #> 187  3.6 0.82978578 0.476642897 -1.02733384   direct #> 188  3.7 0.80068497 0.452898287 -0.99398270   direct #> 189  3.8 0.77260473 0.430336546 -0.96162191   direct #> 190  3.9 0.74550927 0.408898749 -0.93022875   direct #> 191  4.0 0.71936406 0.388528905 -0.89978047   direct #> 192  4.1 0.69413576 0.369173812 -0.87025439   direct #> 193  4.2 0.66979224 0.350782919 -0.84162792   direct #> 194  4.3 0.64630244 0.333308193 -0.81387861   direct #> 195  4.4 0.62363644 0.316703995 -0.78698417   direct #> 196  4.5 0.60176534 0.300926957 -0.76092256   direct #> 197  4.6 0.58066127 0.285935874 -0.73567196   direct #> 198  4.7 0.56029732 0.271691591 -0.71121081   direct #> 199  4.8 0.54064754 0.258156907 -0.68751787   direct #> 200  4.9 0.52168688 0.245296472 -0.66457219   direct #> 201  5.0 0.50339118 0.233076696 -0.64235317   direct #> 202  5.1 0.48573712 0.221465665 -0.62084055   direct #> 203  5.2 0.46870219 0.210433054 -0.60001444   direct #> 204  5.3 0.45226467 0.199950046 -0.57985530   direct #> 205  5.4 0.43640363 0.189989264 -0.56034400   direct #> 206  5.5 0.42109883 0.180524692 -0.54146176   direct #> 207  5.6 0.40633078 0.171531611 -0.52319023   direct #> 208  5.7 0.39208065 0.162986531 -0.50551144   direct #> 209  5.8 0.37833028 0.154867137 -0.48840782   direct #> 210  5.9 0.36506213 0.147152221 -0.47186219   direct #> 211  6.0 0.35225931 0.139821634 -0.45585779   direct #> 212  6.1 0.33990548 0.132856230 -0.44037825   direct #> 213  6.2 0.32798490 0.126237817 -0.42540760   direct #> 214  6.3 0.31648238 0.119949110 -0.41093027   direct #> 215  6.4 0.30538326 0.113973683 -0.39693108   direct #> 216  6.5 0.29467338 0.108295929 -0.38339525   direct #> 217  6.6 0.28433911 0.102901021 -0.37030837   direct #> 218  6.7 0.27436726 0.097774868 -0.35765642   direct #> 219  6.8 0.26474512 0.092904080 -0.34542576   direct #> 220  6.9 0.25546044 0.088275938 -0.33360311   direct #> 221  7.0 0.24650137 0.083878353 -0.32217556   direct #> 222  7.1 0.23785650 0.079699839 -0.31113057   direct #> 223  7.2 0.22951481 0.075729484 -0.30045594   direct #> 224  7.3 0.22146567 0.071956917 -0.29013982   direct #> 225  7.4 0.21369880 0.068372286 -0.28017069   direct #> 226  7.5 0.20620433 0.064966228 -0.27053738   direct #> 227  7.6 0.19897269 0.061729848 -0.26122904   direct #> 228  7.7 0.19199466 0.058654692 -0.25223512   direct #> 229  7.8 0.18526136 0.055732729 -0.24354541   direct #> 230  7.9 0.17876419 0.052956328 -0.23514999   direct #> 231  8.0 0.17249488 0.050318237 -0.22703924   direct #> 232  8.1 0.16644544 0.047811566 -0.21920383   direct #> 233  8.2 0.16060815 0.045429768 -0.21163471   direct #> 234  8.3 0.15497558 0.043166622 -0.20432312   direct #> 235  8.4 0.14954055 0.041016219 -0.19726054   direct #> 236  8.5 0.14429612 0.038972940 -0.19043875   direct #> 237  8.6 0.13923561 0.037031451 -0.18384976   direct #> 238  8.7 0.13435258 0.035186679 -0.17748584   direct #> 239  8.8 0.12964080 0.033433807 -0.17133950   direct #> 240  8.9 0.12509426 0.031768256 -0.16540348   direct #> 241  9.0 0.12070717 0.030185678 -0.15967076   direct #> 242  9.1 0.11647394 0.028681937 -0.15413453   direct #> 243  9.2 0.11238917 0.027253108 -0.14878821   direct #> 244  9.3 0.10844765 0.025895458 -0.14362542   direct #> 245  9.4 0.10464436 0.024605440 -0.13863999   direct #> 246  9.5 0.10097446 0.023379687 -0.13382595   direct #> 247  9.6 0.09743325 0.022214996 -0.12917752   direct #> 248  9.7 0.09401624 0.021108326 -0.12468910   direct #> 249  9.8 0.09071907 0.020056786 -0.12035530   direct #> 250  9.9 0.08753753 0.019057630 -0.11617086   direct #> 251 10.0 0.08446756 0.018108249 -0.11213073   direct #> 252 10.1 0.08150526 0.017206162 -0.10823002   direct #> 253 10.2 0.07864685 0.016349014 -0.10446397   direct #> 254 10.3 0.07588868 0.015534565 -0.10082802   direct #> 255 10.4 0.07322725 0.014760690 -0.09731774   direct #> 256 10.5 0.07065915 0.014025366 -0.09392883   direct #> 257 10.6 0.06818111 0.013326674 -0.09065717   direct #> 258 10.7 0.06578998 0.012662787 -0.08749874   direct #> 259 10.8 0.06348271 0.012031974 -0.08444967   direct #> 260 10.9 0.06125635 0.011432584 -0.08150623   direct #> 261 11.0 0.05910808 0.010863055 -0.07866480   direct #> 262 11.1 0.05703514 0.010321897 -0.07592187   direct #> 263 11.2 0.05503490 0.009807698 -0.07327408   direct #> 264 11.3 0.05310481 0.009319114 -0.07071816   direct #> 265 11.4 0.05124241 0.008854870 -0.06825094   direct #> 266 11.5 0.04944533 0.008413752 -0.06586939   direct #> 267 11.6 0.04771127 0.007994610 -0.06357056   direct #> 268 11.7 0.04603802 0.007596348 -0.06135159   direct #> 269 11.8 0.04442345 0.007217925 -0.05920975   direct #> 270 11.9 0.04286551 0.006858355 -0.05714236   direct #> 271 12.0 0.04136221 0.006516696 -0.05514687   direct #> 272 12.1 0.03991162 0.006192058 -0.05322079   direct #> 273 12.2 0.03851191 0.005883593 -0.05136173   direct #> 274 12.3 0.03716129 0.005590494 -0.04956737   direct #> 275 12.4 0.03585803 0.005311996 -0.04783548   direct #> 276 12.5 0.03460048 0.005047371 -0.04616389   direct #> 277 12.6 0.03338703 0.004795930 -0.04455052   direct #> 278 12.7 0.03221614 0.004557014 -0.04299336   direct #> 279 12.8 0.03108631 0.004330000 -0.04149046   direct #> 280 12.9 0.02999611 0.004114295 -0.04003993   direct #> 281 13.0 0.02894413 0.003909336 -0.03863998   direct #> 282 13.1 0.02792906 0.003714587 -0.03728883   direct #> 283 13.2 0.02694958 0.003529540 -0.03598481   direct #> 284 13.3 0.02600445 0.003353711 -0.03472626   direct #> 285 13.4 0.02509246 0.003186642 -0.03351163   direct #> 286 13.5 0.02421246 0.003027895 -0.03233938   direct #> 287 13.6 0.02336333 0.002877056 -0.03120803   direct #> 288 13.7 0.02254397 0.002733732 -0.03011618   direct #> 289 13.8 0.02175335 0.002597547 -0.02906244   direct #> 290 13.9 0.02099045 0.002468147 -0.02804549   direct #> 291 14.0 0.02025431 0.002345193 -0.02706405   direct #> 292 14.1 0.01954399 0.002228364 -0.02611689   direct #> 293 14.2 0.01885857 0.002117355 -0.02520282   direct #> 294 14.3 0.01819720 0.002011876 -0.02432068   direct #> 295 14.4 0.01755902 0.001911652 -0.02346936   direct #> 296 14.5 0.01694322 0.001816420 -0.02264779   direct #> 297 14.6 0.01634901 0.001725933 -0.02185492   direct #> 298 14.7 0.01577565 0.001639953 -0.02108978   direct #> 299 14.8 0.01522239 0.001558256 -0.02035137   direct #> 300 14.9 0.01468854 0.001480630 -0.01963879   direct #> 301  0.0 3.00000000 3.000000000 -3.00000000 indirect #> 302  0.1 2.89478919 3.072029427 -2.58521101 indirect #> 303  0.2 2.79326815 3.132703300 -2.19352996 indirect #> 304  0.3 2.69530747 3.182859714 -1.82417931 indirect #> 305  0.4 2.60078231 3.223285457 -1.47637642 indirect #> 306  0.5 2.50957217 3.254718908 -1.14933736 indirect #> 307  0.6 2.42156079 3.277852764 -0.84228031 indirect #> 308  0.7 2.33663600 3.293336633 -0.55442860 indirect #> 309  0.8 2.25468954 3.301779481 -0.28501322 indirect #> 310  0.9 2.17561697 3.303751945 -0.03327518 indirect #> 311  1.0 2.09931749 3.299788524  0.20153262 indirect #> 312  1.1 2.02569386 3.290389648  0.42014365 indirect #> 313  1.2 1.95465223 3.276023639  0.62327638 indirect #> 314  1.3 1.88610204 3.257128562  0.81163307 indirect #> 315  1.4 1.81995593 3.234113971  0.98589878 indirect #> 316  1.5 1.75612959 3.207362570  1.14674061 indirect #> 317  1.6 1.69454165 3.177231772  1.29480700 indirect #> 318  1.7 1.63511361 3.144055179  1.43072731 indirect #> 319  1.8 1.57776973 3.108143980  1.55511147 indirect #> 320  1.9 1.52243692 3.069788267  1.66854971 indirect #> 321  2.0 1.46904465 3.029258286  1.77161245 indirect #> 322  2.1 1.41752485 2.986805615  1.86485031 indirect #> 323  2.2 1.36781187 2.942664272  1.94879411 indirect #> 324  2.3 1.31984234 2.897051771  2.02395503 indirect #> 325  2.4 1.27355511 2.850170113  2.09082478 indirect #> 326  2.5 1.22889119 2.802206719  2.14987584 indirect #> 327  2.6 1.18579364 2.753335320  2.20156179 indirect #> 328  2.7 1.14420754 2.703716790  2.24631759 indirect #> 329  2.8 1.10407987 2.653499931  2.28455999 indirect #> 330  2.9 1.06535949 2.602822222  2.31668791 indirect #> 331  3.0 1.02799704 2.551810514  2.34308284 indirect #> 332  3.1 0.99194491 2.500581698  2.36410933 indirect #> 333  3.2 0.95715713 2.449243323  2.38011540 indirect #> 334  3.3 0.92358937 2.397894191  2.39143305 indirect #> 335  3.4 0.89119884 2.346624907  2.39837868 indirect #> 336  3.5 0.85994426 2.295518402  2.40125366 indirect #> 337  3.6 0.82978578 2.244650432  2.40034471 indirect #> 338  3.7 0.80068497 2.194090033  2.39592449 indirect #> 339  3.8 0.77260473 2.143899968  2.38825202 indirect #> 340  3.9 0.74550927 2.094137133  2.37757320 indirect #> 341  4.0 0.71936406 2.044852947  2.36412126 indirect #> 342  4.1 0.69413576 1.996093719  2.34811726 indirect #> 343  4.2 0.66979224 1.947900989  2.32977055 indirect #> 344  4.3 0.64630244 1.900311857  2.30927923 indirect #> 345  4.4 0.62363644 1.853359280  2.28683059 indirect #> 346  4.5 0.60176534 1.807072365  2.26260159 indirect #> 347  4.6 0.58066127 1.761476636  2.23675922 indirect #> 348  4.7 0.56029732 1.716594287  2.20946101 indirect #> 349  4.8 0.54064754 1.672444421  2.18085537 indirect #> 350  4.9 0.52168688 1.629043273  2.15108202 indirect #> 351  5.0 0.50339118 1.586404419  2.12027237 indirect #> 352  5.1 0.48573712 1.544538976  2.08854991 indirect #> 353  5.2 0.46870219 1.503455785  2.05603055 indirect #> 354  5.3 0.45226467 1.463161585  2.02282299 indirect #> 355  5.4 0.43640363 1.423661176  1.98902907 indirect #> 356  5.5 0.42109883 1.384957574  1.95474407 indirect #> 357  5.6 0.40633078 1.347052150  1.92005704 indirect #> 358  5.7 0.39208065 1.309944767  1.88505112 indirect #> 359  5.8 0.37833028 1.273633906  1.84980383 indirect #> 360  5.9 0.36506213 1.238116783  1.81438733 indirect #> 361  6.0 0.35225931 1.203389457  1.77886872 indirect #> 362  6.1 0.33990548 1.169446936  1.74331029 indirect #> 363  6.2 0.32798490 1.136283271  1.70776978 indirect #> 364  6.3 0.31648238 1.103891649  1.67230061 indirect #> 365  6.4 0.30538326 1.072264473  1.63695211 indirect #> 366  6.5 0.29467338 1.041393442  1.60176974 indirect #> 367  6.6 0.28433911 1.011269624  1.56679534 indirect #> 368  6.7 0.27436726 0.981883524  1.53206726 indirect #> 369  6.8 0.26474512 0.953225150  1.49762061 indirect #> 370  6.9 0.25546044 0.925284066  1.46348745 indirect #> 371  7.0 0.24650137 0.898049453  1.42969692 indirect #> 372  7.1 0.23785650 0.871510155  1.39627544 indirect #> 373  7.2 0.22951481 0.845654730  1.36324687 indirect #> 374  7.3 0.22146567 0.820471494  1.33063264 indirect #> 375  7.4 0.21369880 0.795948557  1.29845195 indirect #> 376  7.5 0.20620433 0.772073865  1.26672185 indirect #> 377  7.6 0.19897269 0.748835235  1.23545737 indirect #> 378  7.7 0.19199466 0.726220385  1.20467173 indirect #> 379  7.8 0.18526136 0.704216963  1.17437634 indirect #> 380  7.9 0.17876419 0.682812578  1.14458100 indirect #> 381  8.0 0.17249488 0.661994820  1.11529400 indirect #> 382  8.1 0.16644544 0.641751287  1.08652215 indirect #> 383  8.2 0.16060815 0.622069607  1.05827099 indirect #> 384  8.3 0.15497558 0.602937451  1.03054477 indirect #> 385  8.4 0.14954055 0.584342559  1.00334662 indirect #> 386  8.5 0.14429612 0.566272749  0.97667859 indirect #> 387  8.6 0.13923561 0.548715934  0.95054173 indirect #> 388  8.7 0.13435258 0.531660139  0.92493619 indirect #> 389  8.8 0.12964080 0.515093506  0.89986125 indirect #> 390  8.9 0.12509426 0.499004309  0.87531543 indirect #> 391  9.0 0.12070717 0.483380963  0.85129651 indirect #> 392  9.1 0.11647394 0.468212034  0.82780161 indirect #> 393  9.2 0.11238917 0.453486243  0.80482726 indirect #> 394  9.3 0.10844765 0.439192473  0.78236942 indirect #> 395  9.4 0.10464436 0.425319780  0.76042353 indirect #> 396  9.5 0.10097446 0.411857391  0.73898460 indirect #> 397  9.6 0.09743325 0.398794714  0.71804720 indirect #> 398  9.7 0.09401624 0.386121340  0.69760553 indirect #> 399  9.8 0.09071907 0.373827041  0.67765346 indirect #> 400  9.9 0.08753753 0.361901782  0.65818455 indirect #> 401 10.0 0.08446756 0.350335715  0.63919209 indirect #> 402 10.1 0.08150526 0.339119183  0.62066912 indirect #> 403 10.2 0.07864685 0.328242723  0.60260851 indirect #> 404 10.3 0.07588868 0.317697063  0.58500290 indirect #> 405 10.4 0.07322725 0.307473124  0.56784482 indirect #> 406 10.5 0.07065915 0.297562021  0.55112663 indirect #> 407 10.6 0.06818111 0.287955060  0.53484062 indirect #> 408 10.7 0.06578998 0.278643739  0.51897895 indirect #> 409 10.8 0.06348271 0.269619746  0.50353375 indirect #> 410 10.9 0.06125635 0.260874958  0.48849708 indirect #> 411 11.0 0.05910808 0.252401441  0.47386096 indirect #> 412 11.1 0.05703514 0.244191444  0.45961742 indirect #> 413 11.2 0.05503490 0.236237402  0.44575844 indirect #> 414 11.3 0.05310481 0.228531932  0.43227605 indirect #> 415 11.4 0.05124241 0.221067829  0.41916228 indirect #> 416 11.5 0.04944533 0.213838067  0.40640921 indirect #> 417 11.6 0.04771127 0.206835793  0.39400894 indirect #> 418 11.7 0.04603802 0.200054328  0.38195363 indirect #> 419 11.8 0.04442345 0.193487162  0.37023550 indirect #> 420 11.9 0.04286551 0.187127950  0.35884686 indirect #> 421 12.0 0.04136221 0.180970514  0.34778005 indirect #> 422 12.1 0.03991162 0.175008836  0.33702754 indirect #> 423 12.2 0.03851191 0.169237056  0.32658185 indirect #> 424 12.3 0.03716129 0.163649470  0.31643562 indirect #> 425 12.4 0.03585803 0.158240525  0.30658156 indirect #> 426 12.5 0.03460048 0.153004820  0.29701251 indirect #> 427 12.6 0.03338703 0.147937099  0.28772139 indirect #> 428 12.7 0.03221614 0.143032249  0.27870125 indirect #> 429 12.8 0.03108631 0.138285298  0.26994523 indirect #> 430 12.9 0.02999611 0.133691412  0.26144661 indirect #> 431 13.0 0.02894413 0.129245891  0.25319875 indirect #> 432 13.1 0.02792906 0.124944166  0.24519516 indirect #> 433 13.2 0.02694958 0.120781798  0.23742946 indirect #> 434 13.3 0.02600445 0.116754473  0.22989536 indirect #> 435 13.4 0.02509246 0.112858000  0.22258673 indirect #> 436 13.5 0.02421246 0.109088306  0.21549755 indirect #> 437 13.6 0.02336333 0.105441438  0.20862190 indirect #> 438 13.7 0.02254397 0.101913555  0.20195401 indirect #> 439 13.8 0.02175335 0.098500928  0.19548820 indirect #> 440 13.9 0.02099045 0.095199937  0.18921895 indirect #> 441 14.0 0.02025431 0.092007068  0.18314082 indirect #> 442 14.1 0.01954399 0.088918909  0.17724851 indirect #> 443 14.2 0.01885857 0.085932151  0.17153684 indirect #> 444 14.3 0.01819720 0.083043581  0.16600074 indirect #> 445 14.4 0.01755902 0.080250081  0.16063526 indirect #> 446 14.5 0.01694322 0.077548630  0.15543557 indirect #> 447 14.6 0.01634901 0.074936293  0.15039693 indirect #> 448 14.7 0.01577565 0.072410225  0.14551475 indirect #> 449 14.8 0.01522239 0.069967667  0.14078452 indirect #> 450 14.9 0.01468854 0.067605944  0.13620185 indirect"},{"path":[]},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"patch-1-0-5-9000","dir":"Changelog","previous_headings":"","what":"Patch","title":"cTMed 1.0.5.9000","text":"Latest development version. Revised standardization method using steady-state covariance matrix.","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"ctmed-105","dir":"Changelog","previous_headings":"","what":"cTMed 1.0.5","title":"cTMed 1.0.5","text":"CRAN release: 2025-01-23","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"patch-1-0-5","dir":"Changelog","previous_headings":"","what":"Patch","title":"cTMed 1.0.5","text":"Added MCPhiSigma() function. Added BootIndirectCentral() BootTotalCentral() functions.","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"ctmed-104","dir":"Changelog","previous_headings":"","what":"cTMed 1.0.4","title":"cTMed 1.0.4","text":"CRAN release: 2025-01-08","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"patch-1-0-4","dir":"Changelog","previous_headings":"","what":"Patch","title":"cTMed 1.0.4","text":"Added BootMed(), BootMedStd(), BootBeta(), BootBetaStd() functions.","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"ctmed-103","dir":"Changelog","previous_headings":"","what":"cTMed 1.0.3","title":"cTMed 1.0.3","text":"CRAN release: 2024-12-16","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"patch-1-0-3","dir":"Changelog","previous_headings":"","what":"Patch","title":"cTMed 1.0.3","text":"Fixed CRAN issues.","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"ctmed-102","dir":"Changelog","previous_headings":"","what":"cTMed 1.0.2","title":"cTMed 1.0.2","text":"CRAN release: 2024-11-26","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"patch-1-0-2","dir":"Changelog","previous_headings":"","what":"Patch","title":"cTMed 1.0.2","text":"Added standardized total, direct, indirect effects.","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"ctmed-101","dir":"Changelog","previous_headings":"","what":"cTMed 1.0.1","title":"cTMed 1.0.1","text":"CRAN release: 2024-10-21","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"patch-1-0-1","dir":"Changelog","previous_headings":"","what":"Patch","title":"cTMed 1.0.1","text":"Minor edits documentation.","code":""},{"path":"https://github.com/jeksterslab/cTMed/news/index.html","id":"ctmed-100","dir":"Changelog","previous_headings":"","what":"cTMed 1.0.0","title":"cTMed 1.0.0","text":"Initial CRAN submission.","code":""}]
