---
title: "Continuous Time Mediation - Delta Method"
author: "Ivan Jacob Agaloos Pesigan"
date: "`r Sys.Date()`"
bibliography: "vignettes.bib"
csl: https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl
nocite: |
  @RCoreTeam-2023
  @Deboeck-Preacher-2015
output:
  rmarkdown::html_vignette:
    toc: true
vignette: >
  %\VignetteIndexEntry{Continuous Time Mediation - Delta Method}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.path = "fig-vignettes-delta-",
  fig.cap = "",
  fig.width = 11,
  fig.height = 8,
  fig.retina = 2,
  dpi = 300,
  comment = "#>"
)
```

```{r}
#| echo = FALSE
root <- rprojroot::is_rstudio_project
```

```{r}
#| include = FALSE
file <- root$find_file(
  "data",
  "deboeck2015phi.rda"
)
load(file = file)
```

```{r}
library(cTMed)
```

The drift matrix and the corresponding sampling variance-covariance matrix
of the fitted OU model is available in the data object `deboeck2015phi`.
See this [link](ou.html) for more details on how the model was fitted.

```{r}
#| eval = FALSE
data("deboeck2015phi", package = "cTMed")
```

```{r}
#| echo = FALSE
if (!exists("deboeck2015phi")) {
  try(
    data(
      "deboeck2015phi",
      package = "cTMed"
    ),
    silent = TRUE
  )
}
```

## Using Results from the dynr Package

```{r}
phi <- deboeck2015phi$dynr$phi
vcov_phi_vec <- deboeck2015phi$dynr$vcov
phi
vcov_phi_vec
```

> **Note:** The input argument `phi` matrix is required to have column and rownames
> as they are used to trace the path of the independent variable column (`from = "x"`)
> to the dependent variable row (`to = "y"`) through mediator variables (`med = "m"`).
> The argument `vcov_phi_vec` does not require names.

### Plot the Effects as a Function of the Time-Interval

```{r dynr-med}
med <- Med(
  phi = phi,
  delta_t = seq(from = 0, to = 20, length.out = 1000),
  from = "x",
  to = "y",
  med = "m"
)
plot(med)
```

### Delta Method for Total, Direct, and Indirect Effects for a Range of Time-Intervals

The delta method confidence intervals of the total, direct, and indirect effects
from $X$ to $Y$ through $M$ at a range of time-intervals (0 to 20) is calculated using the `DeltaMed()` function.
If the length of `delta_t` is long,
using multiple cores by specifying the number of cores to use `ncores` can make the calculations run faster.

```{r dynr-delta}
delta <- DeltaMed(
  phi = phi,
  vcov_phi_vec = vcov_phi_vec,
  delta_t = seq(from = 0, to = 20, length.out = 1000),
  from = "x",
  to = "y",
  med = "m",
  ncores = parallel::detectCores()
)
plot(delta)
```

```{r}
#| include = FALSE
file <- root$find_file(
  ".setup",
  "data-raw",
  "delta.Rds"
)
saveRDS(delta, file = file, compress = "xz")
```

Notice that the lower and upper bounds of the confidence intervals are symmetric around the estimate.

```{r ctsem-delta-2}
#| echo = FALSE
delta <- DeltaMed(
  phi = phi,
  vcov_phi_vec = vcov_phi_vec,
  delta_t = seq(from = 15, to = 20, length.out = 1000),
  from = "x",
  to = "y",
  med = "m",
  ncores = parallel::detectCores()
)
plot(delta)
```

## Using Results from the ctsem Package

`phi` in the case of the `ctsem` results is the mean of the posterior distribution of the drift matrix
and `vcov_phi_vec` is the corresponding covariance matrix.

```{r}
phi <- deboeck2015phi$ctsem$phi
vcov_phi_vec <- deboeck2015phi$ctsem$vcov
phi
vcov_phi_vec
```

### Plot the Effects as a Function of the Time-Interval

```{r ctsem-med}
med <- Med(
  phi = phi,
  delta_t = seq(from = 0, to = 20, length.out = 1000),
  from = "x",
  to = "y",
  med = "m"
)
plot(med)
```

### Delta Method for Total, Direct, and Indirect Effects for a Range of Time-Intervals

```{r ctsem-delta}
delta <- DeltaMed(
  phi = phi,
  vcov_phi_vec = vcov_phi_vec,
  delta_t = seq(from = 0, to = 20, length.out = 1000),
  from = "x",
  to = "y",
  med = "m",
  ncores = parallel::detectCores()
)
plot(delta)
```

## References

```{r}
#| include = FALSE
rm(list = ls())
```
