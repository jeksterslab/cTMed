---
title: "Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package"
author: Ivan Jacob Agaloos Pesigan
date: "`r Sys.Date()`"
bibliography: "vignettes.bib"
csl: https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl
nocite: |
  @RCoreTeam-2024
  @Ou-Hunter-Chow-2019
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Fit the Continuous-Time Vector Autoregressive Model Using the dynr Package}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.path = "fig-vignettes-fit-ct-var-dynr-",
  fig.cap = "",
  fig.width = 11,
  fig.height = 8,
  fig.retina = 2,
  dpi = 300,
  comment = "#>"
)
```

```{r}
#| echo = FALSE
set.seed(42)
n <- 50
time <- 100
delta_t <- 0.10
k <- p <- 3
iden <- diag(k)
null_vec <- rep(x = 0, times = k)
null_mat <- matrix(
  data = 0,
  nrow = p,
  ncol = p
)
mu0 <- null_vec
sigma0 <- matrix(
  data = c(
    1.0,
    0.2,
    0.2,
    0.2,
    1.0,
    0.2,
    0.2,
    0.2,
    1.0
  ),
  nrow = 3
)
sigma0_l <- t(chol(sigma0))
mu <- null_vec
phi <- matrix(
  data = c(
    -0.357,
    0.771,
    -0.450,
    0.0,
    -0.511,
    0.729,
    0,
    0,
    -0.693
  ),
  nrow = k
)
beta_var1 <- expm::expm(
  phi
)
sigma <- matrix(
  data = c(
    0.24455556,
    0.02201587,
    -0.05004762,
    0.02201587,
    0.07067800,
    0.01539456,
    -0.05004762,
    0.01539456,
    0.07553061
  ),
  nrow = p
)
sigma_l <- t(chol(sigma))
nu <- null_vec
lambda <- iden
theta <- 0.2 * iden
theta_l <- t(chol(theta))
```

## Data Generation Using the `SimSSMOUFixed` Function from the `simStateSpace` Package

```{r}
n
time
delta_t
mu0
sigma0
sigma0_l
mu
phi
sigma
sigma_l
nu
lambda
theta
theta_l
```

```{r}
library(simStateSpace)
sim <- SimSSMOUFixed(
  n = n,
  time = time,
  delta_t = delta_t,
  mu0 = mu0,
  sigma0_l = sigma0_l,
  mu = mu,
  phi = phi,
  sigma_l = sigma_l,
  nu = nu,
  lambda = lambda,
  theta_l = theta_l,
  type = 0
)
data <- as.data.frame(sim)
colnames(data) <- c("id", "time", "x", "m", "y")
head(data)
```

## Model Fitting

We use the `dynr` package to fit the continuous-time vector autoregressive model.

```{r}
#| include = FALSE
library(dynr)
```

```{r}
library(dynr)
```

### Prepare the Data

```{r}
dynr_data <- dynr.data(
  dataframe = data,
  id = "id",
  time = "time",
  observed = c("x", "m", "y")
)
```

### Prepare the Initial Condition

```{r}
dynr_initial <- prep.initial(
  values.inistate = c(
    0, 0, 0
  ),
  params.inistate = c(
    "mu0_1", "mu0_2", "mu0_3"
  ),
  values.inicov = matrix(
    data = c(
      1.0, 0.2, 0.2,
      0.2, 1.0, 0.2,
      0.2, 0.2, 1.0
    ),
    nrow = 3
  ),
  params.inicov = matrix(
    data = c(
      "sigma0_11", "sigma0_12", "sigma0_13",
      "sigma0_12", "sigma0_22", "sigma0_23",
      "sigma0_13", "sigma0_23", "sigma0_33"
    ),
    nrow = 3
  )
)
```

### Prepare the Measurement Model

```{r}
dynr_measurement <- prep.measurement(
  values.load = diag(3),
  params.load = matrix(
    data = "fixed",
    nrow = 3,
    ncol = 3
  ),
  state.names = c("eta_x", "eta_m", "eta_y"),
  obs.names = c("x", "m", "y")
)
```

### Prepare the Dynamic Model

```{r}
dynr_dynamics <- prep.formulaDynamics(
  formula = list(
    eta_x ~ phi_11 * eta_x + phi_12 * eta_m + phi_13 * eta_y,
    eta_m ~ phi_21 * eta_x + phi_22 * eta_m + phi_23 * eta_y,
    eta_y ~ phi_31 * eta_x + phi_32 * eta_m + phi_33 * eta_y
  ),
  startval = c(
    phi_11 = -0.2, phi_21 = 0.0, phi_31 = 0.0,
    phi_12 = 0.0, phi_22 = -0.2, phi_32 = 0.0,
    phi_13 = 0.0, phi_23 = 0.0, phi_33 = -0.2
  ),
  isContinuousTime = TRUE
)
```

### Prepare the Noise Matrices

```{r}
dynr_noise <- prep.noise(
  values.latent = matrix(
    data = 0.2 * diag(3),
    nrow = 3
  ),
  params.latent = matrix(
    data = c(
      "sigma_11", "sigma_12", "sigma_13",
      "sigma_12", "sigma_22", "sigma_23",
      "sigma_13", "sigma_23", "sigma_33"
    ),
    nrow = 3
  ),
  values.observed = 0.2 * diag(3),
  params.observed = matrix(
    data = c(
      "theta_11", "fixed", "fixed",
      "fixed", "theta_22", "fixed",
      "fixed", "fixed", "theta_33"
    ),
    nrow = 3
  )
)
```

### Prepare the Model

In this example, we increase the maximum evaluations in the optimization process
and constrain the lower and upper bounds of the parameters for the drift matrix.

```{r}
dynr_model <- dynr.model(
  data = dynr_data,
  initial = dynr_initial,
  measurement = dynr_measurement,
  dynamics = dynr_dynamics,
  noise = dynr_noise,
  outfile = tempfile(
    paste0(
      "src-",
      format(
        Sys.time(),
        "%Y-%m-%d-%H-%M-%OS3"
      )
    ),
    fileext = ".c"
  )
)
dynr_model@options$maxeval <- 100000
lb <- ub <- rep(NA, times = length(dynr_model$xstart))
names(ub) <- names(lb) <- names(dynr_model$xstart)
lb[
  c(
    "phi_11", "phi_21", "phi_31",
    "phi_12", "phi_22", "phi_32",
    "phi_13", "phi_23", "phi_33"
  )
] <- -1.5
ub[
  c(
    "phi_11", "phi_21", "phi_31",
    "phi_12", "phi_22", "phi_32",
    "phi_13", "phi_23", "phi_33"
  )
] <- 1.5
dynr_model$lb <- lb
dynr_model$ub <- ub
```

### Fit the Model

```{r}
fit <- dynr.cook(
  dynr_model,
  verbose = FALSE
)
summary(fit)
coefs <- coef(fit)
vcovs <- vcov(fit)
```

### Extract Matrices from the Fitted Model to use in cTMed

```{r}
phi_names <- c(
  "phi_11", "phi_21", "phi_31",
  "phi_12", "phi_22", "phi_32",
  "phi_13", "phi_23", "phi_33"
)
sigma_names <- c(
  "sigma_11", "sigma_12", "sigma_13",
  "sigma_12", "sigma_22", "sigma_23",
  "sigma_13", "sigma_23", "sigma_33"
)
sigma_vech_names <- c(
  "sigma_11", "sigma_12", "sigma_13",
  "sigma_22", "sigma_23",
  "sigma_33"
)
theta_names <- c(
  "phi_11", "phi_21", "phi_31",
  "phi_12", "phi_22", "phi_32",
  "phi_13", "phi_23", "phi_33",
  "sigma_11", "sigma_12", "sigma_13",
  "sigma_22", "sigma_23",
  "sigma_33"
)
phi <- matrix(
  data = coefs[phi_names],
  nrow = 3,
  ncol = 3
)
sigma <- matrix(
  data = coefs[sigma_names],
  nrow = 3,
  ncol = 3
)
theta <- coefs[theta_names]
vcov_phi_vec <- vcovs[phi_names, phi_names]
vcov_sigma_vech <- vcovs[sigma_vech_names, sigma_vech_names]
vcov_theta <- vcovs[theta_names, theta_names]
```

#### Estimated Drift Matrix with Corresponding Sampling Covariance Matrix

```{r}
phi
vcov_phi_vec
```

#### Process Noise Covariance Matrix with Corresponding Sampling Covariance Matrix

```{r}
sigma
vcov_sigma_vech
```

#### Estimated Drift Matrix and Process Noise Covariance Matrix with Corresponding Sampling Covariance Matrix

```{r}
theta
vcov_theta
```

## References

```{r}
#| include = FALSE
rm(list = ls())
```
